# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 3.2.19 on 2024-03-13 04:22

from django.db import migrations, models


def extract_sub_actions_from_actions(apps, schema_editor):
    SubAction = apps.get_model("cm", "SubAction")
    Action = apps.get_model("cm", "Action")

    fields_to_migrate = (
        "name",
        "display_name",
        "script",
        "script_type",
        "params",
        "allow_to_terminate",
        "state_on_fail",
        "multi_state_on_fail_set",
        "multi_state_on_fail_unset",
    )

    sub_actions_to_create = []
    for action in Action.objects.filter(type="job"):
        action_data_for_subaction = {param: getattr(action, param) for param in fields_to_migrate}
        sub_actions_to_create.append(SubAction(action=action, **action_data_for_subaction))

    SubAction.objects.bulk_create(sub_actions_to_create)


def return_sub_actions_into_actions(apps, schema_editor):
    SubAction = apps.get_model("cm", "SubAction")

    fields_to_return = ("script", "script_type", "params")

    sub_actions_to_delete: list[int] = []
    for sub_action in SubAction.objects.select_related("action").filter(action__type="job"):
        for param in fields_to_return:
            setattr(sub_action.action, param, getattr(sub_action, param))
        sub_action.action.save()

        sub_actions_to_delete.append(sub_action.pk)

    SubAction.objects.filter(pk__in=sub_actions_to_delete).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("cm", "0118_post_autonomous_joblogs"),
    ]

    operations = [
        migrations.RunPython(extract_sub_actions_from_actions, reverse_code=return_sub_actions_into_actions),
        # alter for reverse compatibility
        migrations.AlterField(
            model_name="action",
            name="script_type",
            field=models.CharField(
                max_length=1000,
                choices=(("ansible", "ansible"), ("python", "python"), ("internal", "internal")),
                blank=True,
            ),
        ),
        migrations.AlterField(
            model_name="action",
            name="script",
            field=models.CharField(max_length=1000, blank=True),
        ),
        migrations.RemoveField(
            model_name="action",
            name="log_files",
        ),
        migrations.RemoveField(
            model_name="action",
            name="params",
        ),
        migrations.RemoveField(
            model_name="action",
            name="script",
        ),
        migrations.RemoveField(
            model_name="action",
            name="script_type",
        ),
        migrations.RemoveField(
            model_name="stageaction",
            name="log_files",
        ),
        migrations.RemoveField(
            model_name="stageaction",
            name="params",
        ),
        migrations.RemoveField(
            model_name="stageaction",
            name="script",
        ),
        migrations.RemoveField(
            model_name="stageaction",
            name="script_type",
        ),
    ]
