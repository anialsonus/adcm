# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Generated by Django 3.1.2 on 2021-05-20 09:09
# pylint: disable=line-too-long


from django.db import migrations, models
import django.db.models.deletion


def copy_model(All, Model):
    for obj in Model.objects.all():
        obj_type = obj.prototype.type
        new = All(type=obj_type)
        setattr(new, obj_type, obj)
        if obj_type == 'service':
            new.parent = obj.cluster.allobjects
        elif obj_type == 'component':
            new.parent = obj.service.allobjects
        elif obj_type == 'host':
            new.parent = obj.provider.allobjects
            if obj.cluster:
                new.belong = obj.cluster.allobjects
        new.save()


def populate_all_objects(apps, schema_editor):
    All = apps.get_model('cm', 'AllObjects')
    ADCM = apps.get_model('cm', 'ADCM')
    Host = apps.get_model('cm', 'Host')
    Provider = apps.get_model('cm', 'HostProvider')
    Cluster = apps.get_model('cm', 'Cluster')
    Service = apps.get_model('cm', 'ClusterObject')
    Component = apps.get_model('cm', 'ServiceComponent')
    copy_model(All, Cluster)
    copy_model(All, Provider)
    copy_model(All, Host)
    copy_model(All, Service)
    copy_model(All, Component)
    copy_model(All, ADCM)


class Migration(migrations.Migration):

    dependencies = [
        ('cm', '0066_auto_20210427_0853'),
    ]

    operations = [
        migrations.CreateModel(
            name='AllObjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('adcm', 'adcm'), ('service', 'service'), ('component', 'component'), ('cluster', 'cluster'), ('host', 'host'), ('provider', 'provider')], max_length=16)),
                ('adcm', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cm.adcm')),
                ('belong', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='belonged', to='cm.allobjects')),
                ('cluster', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cm.cluster')),
                ('component', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cm.servicecomponent')),
                ('host', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cm.host')),
                ('parent', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childs', to='cm.allobjects')),
                ('provider', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cm.hostprovider')),
                ('service', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cm.clusterobject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(populate_all_objects),
    ]
