# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 3.2.23 on 2024-04-10 04:08

from pathlib import Path

from django.db import migrations


def adjust_paths(apps, schema_editor):
    Action = apps.get_model("cm", "Action")
    SubAction = apps.get_model("cm", "SubAction")
    Prototype = apps.get_model("cm", "Prototype")
    PrototypeConfig = apps.get_model("cm", "PrototypeConfig")

    objects_to_update = []
    for entry in Action.objects.select_related("prototype").filter(config_jinja__startswith="./"):
        entry.config_jinja = Path(entry.prototype.path) / entry.config_jinja
        objects_to_update.append(entry)
    Action.objects.bulk_update(objs=objects_to_update, fields=["config_jinja"])

    objects_to_update = []
    for entry in SubAction.objects.select_related("action__prototype").filter(script__startswith="./"):
        entry.script = Path(entry.action.prototype.path) / entry.script
        objects_to_update.append(entry)
    SubAction.objects.bulk_update(objs=objects_to_update, fields=["script"])

    objects_to_update = []
    for entry in Prototype.objects.filter(license_path__startswith="./"):
        entry.license_path = Path(entry.path) / entry.license_path
        objects_to_update.append(entry)
    Prototype.objects.bulk_update(objs=objects_to_update, fields=["license_path"])

    objects_to_update = []
    for entry in PrototypeConfig.objects.select_related("prototype").filter(
        type__in=("file", "secretfile"), default__startswith="./"
    ):
        entry.default = Path(entry.prototype.path) / entry.default
        objects_to_update.append(entry)
    PrototypeConfig.objects.bulk_update(objs=objects_to_update, fields=["default"])


class Migration(migrations.Migration):
    dependencies = [
        ("cm", "0119_extract_sub_actions_from_actions"),
    ]

    operations = [migrations.RunPython(code=adjust_paths, reverse_code=migrations.RunPython.noop)]
