# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 3.2.13 on 2022-09-06 09:57

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models

MODEL_TYPE = {
    "adcm": "adcm",
    "cluster": "cluster",
    "clusterobject": "service",
    "servicecomponent": "component",
    "hostprovider": "provider",
    "host": "host",
}


def _get_host_action_context(apps, obj, task):
    Prototype = apps.get_model("cm", "Prototype")
    ClusterObject = apps.get_model("cm", "ClusterObject")
    ServiceComponent = apps.get_model("cm", "ServiceComponent")
    cluster = obj.cluster
    context = {"cluster": {"id": cluster.pk, "name": cluster.name}}

    if task.action.prototype.type == "service":

        try:
            service_prototype = Prototype.objects.get(
                type=task.action.prototype.type,
                name=task.action.prototype.name,
                bundle=cluster.prototype.bundle,
                version=cluster.prototype.version,
                parent=None,
            )
            service = ClusterObject.objects.get(prototype=service_prototype, cluster=cluster)
        except ObjectDoesNotExist:
            context = {}
        else:
            context["service"] = {"id": service.pk, "name": service.prototype.display_name}

    elif task.action.prototype.type == "component":

        try:
            service_prototype = Prototype.objects.get(
                type=task.action.prototype.parent.type,
                name=task.action.prototype.parent.name,
                bundle=cluster.prototype.bundle,
                version=cluster.prototype.version,
                parent=None,
            )
            service = ClusterObject.objects.get(prototype=service_prototype, cluster=cluster)
            component_prototype = Prototype.objects.get(
                type=task.action.prototype.type,
                name=task.action.prototype.name,
                bundle=cluster.prototype.bundle,
                version=cluster.prototype.version,
                parent=service_prototype,
            )
            component = ServiceComponent.objects.get(
                cluster=cluster,
                service=service,
                prototype=component_prototype,
            )
        except ObjectDoesNotExist:
            context = {}
        else:
            context["service"] = {"id": service.pk, "name": service.prototype.display_name}
            context["component"] = {
                "id": component.pk,
                "name": component.prototype.display_name,
            }
    return context


def _fix_selector(selector, _models):
    fixed_selector = {}
    for object_type, object_id in selector.items():
        model, name_attr = _models.get(object_type, (None, None))

        if not model:
            continue

        obj = model.objects.filter(pk=object_id).first()
        if not obj:
            continue

        if object_type in {"service", "component"}:
            obj = obj.prototype

        fixed_selector[object_type] = {"id": object_id, "name": getattr(obj, name_attr)}

    return fixed_selector


def get_selector(apps, schema_editor):
    TaskLog = apps.get_model("cm", "TaskLog")

    _models = {
        "adcm": (apps.get_model("cm", "ADCM"), "name"),
        "cluster": (apps.get_model("cm", "Cluster"), "name"),
        "service": (apps.get_model("cm", "ClusterObject"), "display_name"),
        "component": (apps.get_model("cm", "ServiceComponent"), "display_name"),
        "provider": (apps.get_model("cm", "HostProvider"), "name"),
        "host": (apps.get_model("cm", "Host"), "fqdn"),
    }

    for task in TaskLog.objects.all():

        if task.selector:
            selector = _fix_selector(task.selector, _models)
        else:

            if not task.object_type:
                continue

            model, _ = _models.get(MODEL_TYPE[task.object_type.model], (None, None))

            if not model:
                continue

            obj = model.objects.filter(pk=task.object_id).first()
            if not obj:
                continue

            selector = {}

            if obj.prototype.type in {"adcm", "cluster", "provider"}:
                selector[obj.prototype.type] = {"id": obj.pk, "name": obj.name}
            elif obj.prototype.type == "service":
                selector["cluster"] = {"id": obj.cluster.pk, "name": obj.cluster.name}
                selector["service"] = {"id": obj.pk, "name": obj.prototype.display_name}
            elif obj.prototype.type == "component":
                selector["cluster"] = {"id": obj.cluster.pk, "name": obj.cluster.name}
                selector["service"] = {
                    "id": obj.service.pk,
                    "name": obj.service.prototype.display_name,
                }
                selector["component"] = {"id": obj.pk, "name": obj.prototype.display_name}
            elif obj.prototype.type == "host":
                selector["host"] = {"id": obj.pk, "name": obj.fqdn}
                if task.action and task.action.host_action:
                    context = _get_host_action_context(apps, obj, task)
                    selector.update(context)
                else:
                    selector["provider"] = {
                        "id": obj.provider.pk,
                        "name": obj.provider.name,
                    }

        task.selector = selector
        task.save(update_fields=["selector"])
        task.joblog_set.filter().update(selector=selector)


class Migration(migrations.Migration):
    dependencies = [
        ("cm", "0091_migrate_adcm_logrotate_config"),
    ]

    operations = [
        migrations.AlterField(
            model_name="prototype",
            name="type",
            field=models.CharField(
                choices=[
                    ("adcm", "adcm"),
                    ("cluster", "cluster"),
                    ("service", "service"),
                    ("component", "component"),
                    ("provider", "provider"),
                    ("host", "host"),
                ],
                max_length=16,
            ),
        ),
        migrations.AlterField(
            model_name="stageprototype",
            name="type",
            field=models.CharField(
                choices=[
                    ("adcm", "adcm"),
                    ("cluster", "cluster"),
                    ("service", "service"),
                    ("component", "component"),
                    ("provider", "provider"),
                    ("host", "host"),
                ],
                max_length=16,
            ),
        ),
        migrations.RunPython(get_selector),
    ]
