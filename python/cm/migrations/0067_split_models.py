# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Generated by Django 3.2 on 2021-06-16 14:52

from django.db import migrations, models
import django.db.models.deletion


_model_names = {
    'ADCM': 'ptr_adcm',
    'HostProvider': 'ptr_provider',
    'Host': 'ptr_host',
    'Cluster': 'ptr_cluster',
    'ClusterObject': 'ptr_service',
    'ServiceComponent': 'ptr_component',
}
_removed_fields = (
    'state',
    'stack',
    'issue',
)
_created_joints = {}


def split_models(apps, schema_editor):
    """Create Joint instances from existing models"""
    global _created_joints  # pylint: disable=global-statement
    joint_model = apps.get_model('cm', 'Joint')
    for name in _model_names:
        model = apps.get_model('cm', name)
        for instance in model.objects.all():
            joint = joint_model.objects.create(
                state=instance.state,
                stack=instance.stack,
                issue=instance.issue,
            )
            _created_joints[(instance.__class__, instance.pk)] = joint


def _build_field_removals():
    """Remove Joint fields from models"""
    result = []
    for model_name in _model_names:
        for field_name in _removed_fields:
            result.append(
                migrations.RemoveField(
                    model_name=model_name,
                    name=field_name,
                )
            )
    return result


def _build_field_additions():
    """Add `joint` field to cleaned models"""
    result = []
    for model_name, related_name in _model_names.items():
        result.append(
            migrations.AddField(
                model_name=model_name,
                name='joint',
                field=models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE,
                    parent_link=True,
                    related_name=related_name,
                    serialize=False,
                    to='cm.joint',
                    null=True,  # removed later
                ),
            )
        )
    return result


def link_joints(apps, schema_editor):
    """Link previously created Joint instances to cleaned models"""
    for name in _model_names:
        model = apps.get_model('cm', name)
        for instance in model.objects.all():
            instance.joint = _created_joints[(instance.__class__, instance.pk)]
            instance.save()


def _build_field_alters():
    """Remove `null=True` from `model.joint` field"""
    result = []
    for model_name, related_name in _model_names.items():
        result.append(
            migrations.AlterField(
                model_name=model_name,
                name='joint',
                field=models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE,
                    parent_link=True,
                    related_name=related_name,
                    to='cm.joint',
                ),
            )
        )
    return result


class Migration(migrations.Migration):

    dependencies = [
        ('cm', '0066_auto_20210427_0853'),
    ]

    operations = [
        migrations.CreateModel(
            name='Joint',
            fields=[
                (
                    'oid',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('state', models.CharField(default='created', max_length=64)),
                ('stack', models.JSONField(default=list)),
                ('issue', models.JSONField(default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='ServiceComponent',
            name='prototype',
            field=models.ForeignKey(
                default=None, on_delete=django.db.models.deletion.CASCADE, to='cm.prototype'
            ),
            preserve_default=False,
        ),
        migrations.RunPython(split_models),
        *_build_field_removals(),
        *_build_field_additions(),
        migrations.RunPython(link_joints),
        *_build_field_alters(),
    ]
