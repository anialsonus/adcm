# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Generated by Django 3.2.7 on 2021-10-26 13:48

from rest_flex_fields.serializers import FlexFieldsSerializerMixin
from rest_framework import serializers
from rest_framework import viewsets
from rest_framework.reverse import reverse
from rest_framework_extensions.mixins import NestedViewSetMixin

from rbac.models import Policy, User


# pylint: disable=too-many-ancestors
class PolicyUserViewSet(NestedViewSetMixin, viewsets.ModelViewSet):
    class UserSerializer(FlexFieldsSerializerMixin, serializers.ModelSerializer):
        id = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
        permissions = serializers.RelatedField(source='user_permissions', many=True, read_only=True)
        profile = serializers.PrimaryKeyRelatedField(source='userprofile', read_only=True)
        url = serializers.SerializerMethodField()

        class Meta:
            model = User
            fields = (
                'id',
                'username',
                'password',
                'first_name',
                'last_name',
                'email',
                'is_superuser',
                'groups',
                'permissions',
                'profile',
                'url',
            )
            read_only_fields = (
                'username',
                'password',
                'first_name',
                'last_name',
                'email',
                'is_superuser',
                'groups',
                'permissions',
                'profile',
                'url',
            )

        def get_url(self, obj):
            kwargs = {'parent_lookup_policy': self.context['policy'].id, 'pk': obj.id}
            return reverse(
                'policy-user-detail',
                kwargs=kwargs,
                request=self.context['request'],
                format=self.context['format'],
            )

    queryset = User.objects.all()
    serializer_class = UserSerializer
    fiterset_fields = '__all__'
    ordering_fields = '__all__'

    def get_serializer_context(self):
        context = super().get_serializer_context()
        policy_id = self.kwargs.get('parent_lookup_policy')
        if policy_id is not None:
            context.update({'policy': Policy.objects.get(id=policy_id)})
        return context

    def create(self, request, *args, **kwargs):
        pass

    def destroy(self, request, *args, **kwargs):
        pass


class PolicyViewSet(viewsets.ModelViewSet):  # pylint: disable=too-many-ancestors
    class PolicySerializer(FlexFieldsSerializerMixin, serializers.ModelSerializer):
        url = serializers.HyperlinkedIdentityField(view_name='policy-detail')
        user = serializers.HyperlinkedRelatedField(
            view_name='policy-user-list',
            read_only=True,
            source='*',
            lookup_field='pk',
            lookup_url_kwarg='parent_lookup_policy',
        )

        class Meta:
            model = Policy
            fields = (
                'id',
                'name',
                'object',
                'role',
                'user',
                'group',
                'url',
            )
            expandable_fields = {
                'user': (PolicyUserViewSet.UserSerializer, {'many': True}),
            }

    queryset = Policy.objects.all()
    serializer_class = PolicySerializer
    filterset_fields = '__all__'
    ordering_fields = '__all__'
