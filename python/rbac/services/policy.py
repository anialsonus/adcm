# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Generated by Django 3.2.7 on 2021-10-26 13:48

from typing import Union

from django.contrib.contenttypes.models import ContentType
from django.db.transaction import atomic

from cm.models import Cluster, ClusterObject, ServiceComponent, HostProvider, Host
from rbac.models import User, Policy, PolicyObject, Role
from rbac.utils import update_m2m_field


def user_add(policy: Policy, user: User) -> None:
    """
    Adding user to policy

    :param policy: Policy
    :type policy: Policy
    :param user: User
    :type user: User
    """
    policy.user.add(user)


def user_remove(policy: Policy, user: User) -> None:
    """
    Removing user from policy

    :param policy: Policy
    :type policy: Policy
    :param user: User
    :type user: User
    """
    policy.user.remove(user)


ObjectType = Union[Cluster, ClusterObject, ServiceComponent, HostProvider, Host]


def object_policy_add(policy: Policy, obj: ObjectType) -> None:
    """
    Added object to Policy

    :param policy: Policy
    :type policy: Policy
    :param obj: Cluster, Service, Component, Provider or Host
    :type obj: Cluster, ClusterObject, ServiceComponent, HostProvider, Host
    """
    content_type = ContentType.objects.get_for_model(obj)
    policy_object, _ = PolicyObject.objects.get_or_create(
        object_id=obj.id, content_type=content_type
    )
    policy.object.add(policy_object)


@atomic
def policy_create(name: str, role: Role, **kwargs):
    """
    Creating Policy object

    :param name: Policy name
    :type name: str
    :param role: Role
    :type role: Role
    :param kwargs: Other parameters for Policy object
    :type kwargs: dict
    :return: Policy
    :rtype: Policy
    """
    policy = Policy.objects.create(name=name, role=role)
    objects = kwargs.get('object', [])

    for obj in objects:
        object_policy_add(policy, obj)

    users = kwargs.get('user', ())
    policy.user.add(*users)

    groups = kwargs.get('group', ())
    policy.group.add(*groups)

    policy.apply()
    return policy


def policy_update(policy: Policy, **kwargs) -> Policy:
    """
    Update Policy object

    :param policy: Policy object
    :type policy: Policy
    :param kwargs: parameters for Policy object
    :type kwargs: dict
    :return: Policy object
    :rtype: Policy
    """

    if 'name' in kwargs:
        policy.name = kwargs['name']
    if 'role' in kwargs:
        policy.role = kwargs['role']

    users = kwargs.get('user')
    if users is not None:
        update_m2m_field(policy.user, users)

    groups = kwargs.get('group')
    if groups is not None:
        update_m2m_field(policy.group, groups)

    objects = kwargs.get('object')
    if objects is not None:
        if objects:
            policy_objects = []
            for obj in objects:
                content_type = ContentType.objects.get_for_model(obj)
                policy_object, _ = PolicyObject.objects.get_or_create(
                    object_id=obj.id, content_type=content_type
                )
                policy_objects.append(policy_object)
            update_m2m_field(policy.object, policy_objects)
        else:
            policy.object.clear()

    policy.save()
    return policy
