# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 3.2.19 on 2023-06-29 08:56

from django.db import migrations, models
from django.utils import timezone
import django.db.models.deletion


def create_and_link_audit_users(apps, schema_editor):
    AuthUser = apps.get_model("auth", "User")
    AuditUser = apps.get_model("audit", "AuditUser")
    AuditLog = apps.get_model("audit", "AuditLog")
    AuditSession = apps.get_model("audit", "AuditSession")

    for auth_user in AuthUser.objects.filter(is_active=True):
        AuditUser.objects.get_or_create(
            username=auth_user.username, created_at=auth_user.date_joined, auth_user_id=auth_user.pk
        )

    auditlog_usernames = [
        username
        for username in AuditLog.objects.values_list("user__username", flat=True).distinct()
        if username is not None
    ]
    auth_user_pks = [AuthUser.objects.get(username=username).pk for username in auditlog_usernames]
    for log_username, auth_pk in zip(auditlog_usernames, auth_user_pks):
        audit_user, created = AuditUser.objects.get_or_create(username=log_username, auth_user_id=auth_pk)
        if created:
            audit_user.created_at = AuthUser.objects.get(username=log_username).date_joined
            audit_user.save(update_fields=["created_at"])

        AuditLog.objects.filter(user__username=log_username).update(audit_user=audit_user)

    auditsession_usernames = [
        username
        for username in AuditSession.objects.values_list("user__username", flat=True).distinct()
        if username is not None
    ]
    auth_user_pks = [AuthUser.objects.get(username=username).pk for username in auditsession_usernames]
    for session_username, auth_pk in zip(auditsession_usernames, auth_user_pks):
        audit_user, created = AuditUser.objects.get_or_create(username=session_username, auth_user_id=auth_pk)
        if created:
            audit_user.created_at = AuthUser.objects.get(username=session_username).date_joined
            audit_user.save(update_fields=["created_at"])

        AuditSession.objects.filter(user__username=session_username).update(audit_user=audit_user)

    deleting_users = AuthUser.objects.filter(is_active=False).values_list("username", flat=True)
    AuditUser.objects.filter(username__in=deleting_users).update(deleted_at=timezone.now())


def create_and_link_audit_users_reverse(apps, schema_editor):
    AuthUser = apps.get_model("auth", "User")
    AuditLog = apps.get_model("audit", "AuditLog")
    AuditSession = apps.get_model("audit", "AuditSession")

    for audit_session in AuditSession.objects.filter(audit_user__isnull=False):
        auth_user = AuthUser.objects.get(username=audit_session.audit_user.username)
        audit_session.user = auth_user
        audit_session.save(update_fields=["user"])

    for audit_log in AuditLog.objects.filter(audit_user__isnull=False):
        auth_user = AuthUser.objects.get(username=audit_log.audit_user.username)
        audit_log.user = auth_user
        audit_log.save(update_fields=["user"])


class Migration(migrations.Migration):
    dependencies = [
        ("audit", "0004_auto_20230131_0944"),
    ]

    operations = [
        migrations.CreateModel(
            name="AuditUser",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("username", models.CharField(max_length=150)),
                ("auth_user_id", models.PositiveBigIntegerField()),
                ("created_at", models.DateTimeField(null=True)),
                ("deleted_at", models.DateTimeField(null=True)),
            ],
        ),
        migrations.AddField(
            model_name="auditlog",
            name="audit_user",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="audit.audituser"),
        ),
        migrations.AddField(
            model_name="auditsession",
            name="audit_user",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="audit.audituser"),
        ),
        migrations.RunPython(code=create_and_link_audit_users, reverse_code=create_and_link_audit_users_reverse),
        migrations.RemoveField(
            model_name="auditlog",
            name="user",
        ),
        migrations.RemoveField(
            model_name="auditsession",
            name="user",
        ),
        migrations.RenameField(
            model_name="auditlog",
            old_name="audit_user",
            new_name="user",
        ),
        migrations.RenameField(
            model_name="auditsession",
            old_name="audit_user",
            new_name="user",
        ),
    ]
