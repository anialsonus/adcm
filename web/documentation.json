{
    "pipes": [
        {
            "name": "BellTaskLinkPipe",
            "id": "pipe-BellTaskLinkPipe-9d9997d3625a3b7380aaa04dc1ee6953",
            "file": "src/app/pipes/bell-task-link.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "task",
                            "type": "TaskRaw",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "TaskRaw",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bellTaskLink",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { TaskRaw } from '@app/core/types';\n\n@Pipe({\n  name: 'bellTaskLink'\n})\nexport class BellTaskLinkPipe implements PipeTransform {\n\n  transform(task: TaskRaw): (string | number)[] {\n    if (task?.jobs?.length > 0) {\n      if (task.status === 'failed') {\n        const failedJob = task.jobs.find(job => job.status === 'failed');\n        if (failedJob) {\n          return ['job', failedJob.id, 'main'];\n        }\n      } else {\n        return ['job', task.jobs[0].id, 'main'];\n      }\n    }\n\n    return ['job', task.id, 'main'];\n  }\n\n}\n"
        },
        {
            "name": "BreakRowPipe",
            "id": "pipe-BreakRowPipe-e121b6c3f4d1307214e75bdbdcf6e163",
            "file": "src/app/shared/pipes/break-row.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "breakRow",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n  name: 'breakRow',\n})\nexport class BreakRowPipe implements PipeTransform {\n  transform(value: string, args?: any): any {\n    return value.replace(/\\n|\\\\n/g, '<br />');\n  }\n}\n"
        },
        {
            "name": "ConcernMenuItemPipe",
            "id": "pipe-ConcernMenuItemPipe-4f809746194426f5a960a43fdca41da2",
            "file": "src/app/shared/details/left-menu-items/concern-menu-item/concern-menu-item.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cause",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cause",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "concernMenuItem",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { BaseEntity } from '@app/core/types';\n\n@Pipe({\n  name: 'concernMenuItem'\n})\nexport class ConcernMenuItemPipe implements PipeTransform {\n\n  transform(value: BaseEntity, cause: string): boolean {\n    const concerns = value && value.concerns;\n    if (!(concerns && concerns.length)) return false;\n\n    return !!concerns.filter((c) => c.cause === cause).length;\n  }\n\n}\n"
        },
        {
            "name": "EntityStatusToStatusTreePipe",
            "id": "pipe-EntityStatusToStatusTreePipe-05231230e000cae557009614e36b27a7",
            "file": "src/app/pipes/entity-status-to-status-tree.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entityService",
                            "type": "HavingStatusTreeAbstractService<StatusTreeType | EntityType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTree[]",
                    "typeParameters": [
                        "StatusTreeType",
                        "EntityType"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityService",
                            "type": "HavingStatusTreeAbstractService<StatusTreeType | EntityType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "entityStatusToStatusTree",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { StatusTree, StatusTreeSubject } from '@app/models/status-tree';\nimport { HavingStatusTreeAbstractService } from '../abstract/having-status-tree.abstract.service';\nimport { AdcmEntity } from '@app/models/entity';\n\n@Pipe({\n  name: 'entityStatusToStatusTree'\n})\nexport class EntityStatusToStatusTreePipe implements PipeTransform {\n\n  transform<StatusTreeType extends StatusTreeSubject, EntityType extends AdcmEntity>(\n    value: StatusTreeType,\n    entityService: HavingStatusTreeAbstractService<StatusTreeType, EntityType>,\n    data: any,\n  ): StatusTree[] {\n    return value ? entityService.entityStatusTreeToStatusTree(value, data) : [];\n  }\n\n}\n"
        },
        {
            "name": "IsArrayPipe",
            "id": "pipe-IsArrayPipe-ac031b1519dc2821002587933eab9e74",
            "file": "src/app/pipes/is-array.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "isArray",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'isArray'\n})\nexport class IsArrayPipe implements PipeTransform {\n\n  transform(value: any): unknown {\n    return Array.isArray(value);\n  }\n\n}\n"
        },
        {
            "name": "IssueMessagePlaceholderPipe",
            "id": "pipe-IssueMessagePlaceholderPipe-cce498d96653998b9928324c51e8370d",
            "file": "src/app/pipes/issue-message-placeholder.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "issueMessagePlaceholder",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'issueMessagePlaceholder'\n})\nexport class IssueMessagePlaceholderPipe implements PipeTransform {\n\n  transform(value: string): string {\n    return value.replace(/(\\$\\{)|(\\})/g, '');\n  }\n\n}\n"
        },
        {
            "name": "IssuePathPipe",
            "id": "pipe-IssuePathPipe-81cb5ca7b4ee8c3de81f1f39c6eddfec",
            "file": "src/app/pipes/issue-path.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "issueName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "issueType",
                            "type": "IssueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "issueName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "issueType",
                            "type": "IssueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "issuePath",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\n\nimport { ServiceService } from '@app/services/service.service';\nimport { IssueType } from '@app/models/issue';\nimport { ServiceComponentService } from '@app/services/service-component.service';\n\n@Pipe({\n  name: 'issuePath'\n})\nexport class IssuePathPipe implements PipeTransform {\n\n  constructor(\n    private serviceService: ServiceService,\n    private serviceComponentService: ServiceComponentService,\n  ) {}\n\n  transform(issueName: string, issueType: IssueType, id: number): Observable<string> {\n    let issue = issueName;\n    if (issue === 'required_import') {\n      issue = 'import';\n    }\n\n    if (issueType === 'service') {\n      return this.serviceService.get(id)\n        .pipe(map(\n          service => `/cluster/${service.cluster_id}/${issueType}/${id}/${issue}`,\n        ));\n    } else if (issueType === 'servicecomponent' || issueType === 'component') {\n      return this.serviceComponentService.get(id)\n        .pipe(map(\n          component => `/cluster/${component.cluster_id}/service/${component.service_id}/component/${id}/${issue}`,\n        ));\n    } {\n      return of(`/${issueType}/${id}/${issue}`);\n    }\n  }\n\n}\n"
        },
        {
            "name": "KeysPipe",
            "id": "pipe-KeysPipe-357d3d3ef0d1196244276cefc9850ae4",
            "file": "src/app/pipes/keys.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "keys",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'keys'\n})\nexport class KeysPipe implements PipeTransform {\n\n  transform(value: any): unknown {\n    return Object.keys(value || {});\n  }\n\n}\n"
        },
        {
            "name": "NavItemPipe",
            "id": "pipe-NavItemPipe-baf8797bee82dd34036d8703298cbaf4",
            "file": "src/app/pipes/nav-item.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "getEntityTitle",
                    "args": [
                        {
                            "name": "entity",
                            "type": "AdcmTypedEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "AdcmTypedEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupName",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "path",
                            "type": "AdcmTypedEntity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "AdcmTypedEntity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "path",
                            "type": "AdcmTypedEntity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IStyledNavItem[]",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "AdcmTypedEntity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "navItem",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { AdcmTypedEntity } from '@app/models/entity';\nimport { IStyledNavItem } from '@app/models/details';\nimport { ApiFlat, TypeName } from '@app/core/types';\n\n@Pipe({\n  name: 'navItem'\n})\nexport class NavItemPipe implements PipeTransform {\n\n  getGroupName(typeName: TypeName): string {\n    switch (typeName) {\n      case 'cluster':\n        return 'clusters';\n      case 'service':\n        return 'services';\n      case 'servicecomponent':\n        return 'components';\n      case 'component':\n        return 'components';\n      case 'host':\n        return 'hosts';\n      case 'provider':\n        return 'hostproviders';\n      case 'group_config':\n        return 'groupconfigs';\n    }\n  }\n\n  getLink(path: AdcmTypedEntity[], index: number, group: boolean): string {\n    let cluster: AdcmTypedEntity;\n\n    switch (path[index].typeName) {\n      case 'cluster':\n        return group ? `/${path[index].typeName}` : `/${path[index].typeName}/${path[index].id}`;\n      case 'service':\n        return group ? (\n          `/${path[index - 1].typeName}/${path[index - 1].id}/service`\n        ) : (\n          `/${path[index - 1].typeName}/${path[index - 1].id}/service/${path[index].id}`\n        );\n      case 'servicecomponent':\n      case 'component':\n        return group ? (\n          `/${path[index - 2].typeName}/${path[index - 2].id}/service/${path[index - 1].id}/component`\n        ) : (\n          `/${path[index - 2].typeName}/${path[index - 2].id}/service/${path[index - 1].id}/component/${path[index].id}`\n        );\n      case 'host':\n        cluster = path.find(item => item.typeName === 'cluster');\n        if (cluster) {\n          return group ? (\n            `/${cluster.typeName}/${cluster.id}/host`\n          ) : (\n            `/${cluster.typeName}/${cluster.id}/host/${path[index].id}`\n          );\n\n        }\n        return group ? `/${path[index].typeName}` : `/${path[index].typeName}/${path[index].id}`;\n      case 'provider':\n        return group ? `/${path[index].typeName}` : `/${path[index].typeName}/${path[index].id}`;\n      case 'group_config':\n        cluster = path[0];\n        const { object_type, object_id, id } = (path[index] as unknown as ApiFlat);\n        if (object_type === 'service') {\n          return group ? (\n            `/${cluster.typeName}/${cluster.id}/${object_type}/${object_id}/group_config`\n          ) : (\n            `/${cluster.typeName}/${cluster.id}/${object_type}/${object_id}/group_config/${id}`\n          );\n        } else if (object_type === 'component') {\n          return group ? (\n            `/${path[index - 3].typeName}/${path[index - 3].id}/service/${path[index - 2].id}/component/${path[index-1].id}/group_config`\n          ) : (\n            `/${path[index - 3].typeName}/${path[index - 3].id}/service/${path[index - 2].id}/component/${path[index-1].id}/group_config/${id}`\n          );\n        }\n      {\n        return group ? (\n          `/${object_type}/${object_id}/group_config`\n        ) : (\n          `/${object_type}/${object_id}/group_config/${id}`\n        );\n      }\n\n    }\n  }\n\n  getEntityTitle(entity: AdcmTypedEntity): string {\n    return entity.typeName === 'host' ? entity.fqdn : entity.display_name || entity.name;\n  }\n\n  transform(path: AdcmTypedEntity[]): IStyledNavItem[] {\n    return path?.reduce((acc, item, index) => {\n      return [\n        ...acc,\n        {\n          title: this.getGroupName(item.typeName),\n          url: this.getLink(path, index, true),\n          class: 'type-name',\n        },\n        {\n          title: this.getEntityTitle(item),\n          url: this.getLink(path, index, false),\n          class: 'entity',\n          entity: item,\n        }\n      ] as IStyledNavItem[];\n    }, []);\n  }\n\n}\n"
        },
        {
            "name": "ObjectLinkColumnPipe",
            "id": "pipe-ObjectLinkColumnPipe-0e1e1798558147aca01c6c701d261f5a",
            "file": "src/app/pipes/object-link-column.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "object",
                            "type": "JobObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ILinkColumn<Task>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "JobObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "url",
                    "args": [
                        {
                            "name": "object",
                            "type": "JobObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "JobObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "objectLinkColumn",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { ILinkColumn } from '@adwp-ui/widgets';\n\nimport { JobObject, Task } from '../core/types';\nimport { ObjectsHelper } from '../helpers/objects-helper';\n\n@Pipe({\n  name: 'objectLinkColumn'\n})\nexport class ObjectLinkColumnPipe implements PipeTransform {\n\n  url(object: JobObject, task: Task): string[] {\n    return ObjectsHelper.getObjectUrl(object, task.objects);\n  }\n\n  transform(object: JobObject, task: Task): ILinkColumn<Task> {\n    return {\n      label: '',\n      type: 'link',\n      value: () => object.name,\n      url: () => this.url(object, task).join('/'),\n    };\n  }\n\n}\n"
        },
        {
            "name": "PickKeysPipe",
            "id": "pipe-PickKeysPipe-56dd529d300aaf1182c279ee7b62e12e",
            "file": "src/app/pipes/pick-keys.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "object",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pickKeys",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'pickKeys'\n})\nexport class PickKeysPipe implements PipeTransform {\n\n  transform(object: { [key: string]: any }, keys: string[]): { [key: string]: any } {\n    return keys.reduce((result, key) => ({ ...result, [key]: object[key] }), {});\n  }\n\n}\n"
        },
        {
            "name": "SortObjectsPipe",
            "id": "pipe-SortObjectsPipe-cebb9ffc281835f71f3dcd9a322ecc6c",
            "file": "src/app/pipes/sort-objects.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "JobObject[]",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "sortObjects",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { JobObject } from '../core/types';\nimport { ObjectsHelper } from '../helpers/objects-helper';\n\n@Pipe({\n  name: 'sortObjects'\n})\nexport class SortObjectsPipe implements PipeTransform {\n\n  transform(objects: JobObject[]): JobObject[] {\n    return ObjectsHelper.sortObjects(objects);\n  }\n\n}\n"
        },
        {
            "name": "StatusTreeLinkPipe",
            "id": "pipe-StatusTreeLinkPipe-51e68f2e6658409914d30c35f033e987",
            "file": "src/app/pipes/status-tree-link.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tree",
                            "type": "StatusTree[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "func",
                            "type": "StatusTreeLinkFunc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tree",
                            "type": "StatusTree[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "StatusTreeLinkFunc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "statusTreeLink",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { StatusTree, StatusTreeLinkFunc } from '@app/models/status-tree';\n\n@Pipe({\n  name: 'statusTreeLink'\n})\nexport class StatusTreeLinkPipe implements PipeTransform {\n\n  transform(id: number, tree: StatusTree[], func: StatusTreeLinkFunc): string[] {\n    return func(id, tree);\n  }\n\n}\n"
        },
        {
            "name": "TagEscPipe",
            "id": "pipe-TagEscPipe-11f3e8d00e60a7047a20fce0420b7125",
            "file": "src/app/shared/pipes/tag-esc.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tagEsc",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'tagEsc',\n})\nexport class TagEscPipe implements PipeTransform {\n  transform(value: string, args?: any): any {\n    if (value) return value.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\\n/g, '<br />');\n  }\n}\n"
        },
        {
            "name": "ToDataSourcePipe",
            "id": "pipe-ToDataSourcePipe-98af7b501fba5e70ded56ababac271df",
            "file": "src/app/pipes/to-data-source.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "model",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "toDataSource",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'toDataSource'\n})\nexport class ToDataSourcePipe implements PipeTransform {\n\n  transform(model: { [key: string]: any }): { results: any[]; count: number; } {\n    if (!model) {\n      return { results: [], count: 0 };\n    }\n\n    const results = Object.entries(model)\n      .reduce((acc, [key, value]) => {\n        return [...acc, { key, value }];\n      }, []);\n\n    return { results, count: 0 };\n  }\n\n}\n"
        },
        {
            "name": "TranslateKeysPipe",
            "id": "pipe-TranslateKeysPipe-9dde61c630ab134f977afae6517a5dae",
            "file": "src/app/pipes/translate-object-keys.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "object",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "translateKeys",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Pipe({\n  name: 'translateKeys'\n})\nexport class TranslateKeysPipe implements PipeTransform {\n\n  constructor(private _translate: TranslateService) {}\n\n  transform(object: { [key: string]: any }): { [key: string]: any } {\n    if (!object) {\n      return {};\n    }\n\n    return Object.entries(object)\n      .reduce((acc, [key, value]) => {\n        return {\n          ...acc,\n          [this._translate.instant(key)]: value\n        }\n      }, {});\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ActionParameters",
            "id": "interface-ActionParameters-4a99492dc98d6050cef89c3777395d3d",
            "file": "src/app/shared/components/actions/actions.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { IAction } from '@app/core/types';\n\nimport { DialogComponent } from '../dialog.component';\nimport { ActionMasterComponent as component } from './master/master.component';\n\nexport interface ActionParameters {\n  cluster?: {\n    id: number;\n    hostcomponent: string;\n  };\n  actions: IAction[];\n}\n\n@Directive({\n  selector: '[appActions]'\n})\nexport class ActionsDirective {\n  @Input('appActions') inputData: ActionParameters;\n\n  constructor(private dialog: MatDialog) {}\n\n  @HostListener('click')\n  onClick() {\n    this.dialog.closeAll();\n    const dialogModel: MatDialogConfig = this.prepare();\n    this.dialog.open(DialogComponent, dialogModel);\n  }\n\n  prepare(): MatDialogConfig {\n    const maxWidth = '1400px';\n    const model = this.inputData;\n\n    if (!model.actions?.length) return { data: { title: 'No parameters for run the action', model: null, component: null } };\n\n    const act = model.actions[0];\n    const isMulty = model.actions.length > 1;\n\n    const width = isMulty || act.config?.config.length || act.hostcomponentmap?.length ? '90%' : '400px';\n    const title = act.ui_options?.disclaimer ? act.ui_options.disclaimer : isMulty ? 'Run an actions?' : `Run an action [ ${act.display_name} ]?`;\n\n    return {\n      width,\n      maxWidth,\n      data: {\n        title,\n        model,\n        component,\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AdcmEntity",
            "id": "interface-AdcmEntity-c446613764b686aea3918d5bb5bb4586",
            "file": "src/app/models/entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Entity } from '@adwp-ui/widgets';\nimport { TypeName } from '@app/core/types';\n\nexport interface AdcmEntity extends Entity {\n  name?: string;\n  display_name?: string;\n  fqdn?: string;\n}\n\nexport interface AdcmTypedEntity extends AdcmEntity {\n  typeName: TypeName;\n}\n",
            "properties": [
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fqdn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "Entity"
        },
        {
            "name": "AdcmTypedEntity",
            "id": "interface-AdcmTypedEntity-c446613764b686aea3918d5bb5bb4586",
            "file": "src/app/models/entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Entity } from '@adwp-ui/widgets';\nimport { TypeName } from '@app/core/types';\n\nexport interface AdcmEntity extends Entity {\n  name?: string;\n  display_name?: string;\n  fqdn?: string;\n}\n\nexport interface AdcmTypedEntity extends AdcmEntity {\n  typeName: TypeName;\n}\n",
            "properties": [
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "AdcmEntity"
        },
        {
            "name": "AddClusterEventData",
            "id": "interface-AddClusterEventData-b821baa6ddbe88af207bd4338cb664ea",
            "file": "src/app/components/columns/cluster-column/cluster-column.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { AdwpCellComponent, ILinkColumn, EventHelper } from '@adwp-ui/widgets';\n\nimport { IHost } from '@app/models/host';\nimport { UniversalAdcmEventData } from '@app/models/universal-adcm-event-data';\nimport { ICluster } from '@app/models/cluster';\n\nexport interface AddClusterEventData extends UniversalAdcmEventData<IHost> {\n  cluster: ICluster;\n}\n\n@Component({\n  selector: 'app-cluster-column',\n  template: `\n    <ng-container *ngIf=\"row\">\n      <adwp-link-cell *ngIf=\"row?.cluster_id; else hasNoCluster\"\n                      [row]=\"row\"\n                      [column]=\"linkColumn\"></adwp-link-cell>\n\n      <ng-template #hasNoCluster>\n        <mat-select appInfinityScroll (topScrollPoint)=\"getNextPageCluster($event)\"\n                    placeholder=\"Assign to cluster\" class=\"select-in-cell\" (click)=\"EventHelper.stopPropagation($event)\"\n                    (openedChange)=\"getClusters($event)\"\n                    (valueChange)=\"addCluster($event, clusters.value)\" #clusters>\n          <mat-option>...</mat-option>\n          <mat-option *ngFor=\"let item of row.clusters\" [value]=\"item.id\">\n            {{ item.title }}\n          </mat-option>\n        </mat-select>\n      </ng-template>\n\n    </ng-container>\n  `,\n  styles: [`\n    :host {\n      width: 100%;\n    }\n  `],\n})\nexport class ClusterColumnComponent implements AdwpCellComponent<IHost> {\n\n  EventHelper = EventHelper;\n\n  @Input() row: IHost;\n\n  @Output() onGetNextPageCluster = new EventEmitter<UniversalAdcmEventData<IHost>>();\n  @Output() onGetClusters = new EventEmitter<UniversalAdcmEventData<IHost>>();\n  @Output() onAddCluster = new EventEmitter<AddClusterEventData>();\n\n  linkColumn: ILinkColumn<IHost> = {\n    label: '',\n    type: 'link',\n    value: (row) => row.cluster_name,\n    url: (row) => `/cluster/${row.cluster_id}`,\n  };\n\n  getNextPageCluster(event: MouseEvent) {\n    this.onGetNextPageCluster.emit({ event, action: 'getNextPageCluster', row: this.row });\n  }\n\n  getClusters(event: MouseEvent) {\n    this.onGetClusters.emit({ event, action: 'getClusters', row: this.row });\n  }\n\n  addCluster(event: MouseEvent, cluster: ICluster) {\n    this.onAddCluster.emit({ event, action: 'addCluster', row: this.row, cluster });\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICluster",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "UniversalAdcmEventData"
        },
        {
            "name": "ApiFlat",
            "id": "interface-ApiFlat-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "object_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "object_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ApiState",
            "id": "interface-ApiState-18a90fa4fedd48681bf24a69bde5f2f7",
            "file": "src/app/core/api/api.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IRoot } from '@app/core/types/api';\nimport { Action, createAction, createFeatureSelector, createReducer, createSelector, on, props } from '@ngrx/store';\n\nexport const loadRoot = createAction('[API] LoadRoot');\nexport const loadStack = createAction('[API] LoadStack');\nexport const rootSuccess = createAction('[API] LoadRootSuccess', props<{ root: IRoot }>());\nexport const rootError = createAction('[API] LoadRootError');\nexport const stackSuccess = createAction('[API] LoadStackSuccess', props<{ stack: IRoot }>());\n\nexport interface ApiState {\n  root: IRoot;\n  stack: IRoot;\n}\n\nconst InitState: ApiState = {\n  root: null,\n  stack: null,\n};\n\nconst reducer = createReducer(\n  InitState,\n  on(rootSuccess, (state, { root }) => ({ ...state, root })),\n  on(rootError, state => ({ root: null, stack: null })),\n  on(stackSuccess, (state, { stack }) => ({ ...state, stack }))\n);\n\nexport function apiReducer(state: ApiState, action: Action) {\n  return reducer(state, action);\n}\n\nexport const getApiState = createFeatureSelector<ApiState>('api');\nexport const getRoot = createSelector(\n  getApiState,\n  (state: ApiState) => state.root\n);\nexport const getStack = createSelector(\n  getApiState,\n  (state: ApiState) => state.stack\n);\n",
            "properties": [
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRoot",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "stack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRoot",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AttributeOptions",
            "id": "interface-AttributeOptions-651cfdba3f000923bbee8d3d05505de6",
            "file": "src/app/shared/configuration/attributes/attribute.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, InjectionToken, TemplateRef, Type } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { isBoolean, isEmptyObject } from '@app/core/types';\nimport { FieldComponent } from '@app/shared/configuration/field/field.component';\n\nexport const ATTRIBUTES_OPTIONS = new InjectionToken('Attributes options');\n\nexport interface AttributeOptions {\n  name: ConfigAttributeNames;\n  wrapper?: Type<AttributeWrapper>;\n  options?: ConfigAttributeOptions;\n}\n\nexport type AttributesOptions = Record<ConfigAttributeNames, AttributeOptions>\n\nexport interface AttributeWrapper {\n  fieldTemplate: TemplateRef<any>;\n  wrapperOptions: ConfigAttributeOptions;\n  fieldOptions: IFieldOptions;\n  attributeForm: FormGroup;\n  parametersForm: FormGroup;\n  field: FieldComponent;\n}\n\nexport enum ConfigAttributeNames {\n  // an attribute for adding config parameters to group\n  GROUP_KEYS = 'group_keys',\n  // an attribute for config parameters that determines whether this parameter can be added to the config group\n  CUSTOM_GROUP_KEYS = 'custom_group_keys'\n}\n\nexport interface ConfigAttributesJSON {\n  [key: string]: any;\n}\n\nexport interface ConfigAttributeOptions {\n  tooltipText?: string;\n\n  [key: string]: any;\n}\n\nexport type ConfigAttribute = AttributeOptions & { value: ConfigAttributesJSON, form: FormGroup };\n\nexport type Attributes = Map<ConfigAttributeNames, ConfigAttribute>;\n\n@Injectable()\nexport class AttributeService {\n\n  private readonly _activeAttributes: Partial<ConfigAttributeNames>[] = [\n    ConfigAttributeNames.GROUP_KEYS,\n    ConfigAttributeNames.CUSTOM_GROUP_KEYS\n  ];\n\n  get attributes(): Attributes {\n    return this._attributes;\n  }\n\n  private _attributes: Attributes;\n\n  constructor(@Inject(ATTRIBUTES_OPTIONS) private _configs: AttributesOptions, private _fb: FormBuilder) {\n  }\n\n  init(json: ConfigAttributesJSON): void {\n    this._attributes = this._createAttributes(this._activeAttributes, json, this._configs);\n  }\n\n  getByName(name: ConfigAttributeNames): ConfigAttribute {\n    return this._attributes.has(name) ? this._attributes.get(name) : undefined;\n  }\n\n  private _createAttributes(_activeAttributes: Partial<ConfigAttributeNames>[], json: ConfigAttributesJSON, configs: AttributesOptions): Attributes {\n    const isEmptyAttrs = !Object.keys(json || {}).length;\n    const isActiveAttrsPresent = !!Object.keys(json || {}).filter((x: ConfigAttributeNames) => this._activeAttributes.includes(x)).length;\n    if (isEmptyAttrs || !isActiveAttrsPresent) {\n      return;\n    }\n\n    return new Map(this._activeAttributes.map((attr) => [\n      attr,\n      new ConfigAttributeFactory(this._fb).create(attr, json[attr], configs[attr], json),\n    ]));\n  }\n\n\n  rawAttributes() {\n    let json = {};\n    if (this._attributes) {\n      for (const [key, value] of this._attributes.entries()) {\n        json = {\n          ...json,\n          [key]: value.form.value\n        };\n      }\n    }\n\n    return json;\n  }\n}\n\nexport const createFormForAttribute = (fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n};\n\n\nexport class ConfigAttributeFactory {\n\n  constructor(private fb: FormBuilder) {}\n\n  create(name: ConfigAttributeNames, value: ConfigAttributesJSON, options: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n    if (!this[name]) {\n      return;\n    }\n\n    return this[name](value, options, json);\n  }\n\n  [ConfigAttributeNames.GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options,\n    wrapper\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return {\n      name,\n      value,\n      wrapper,\n      options,\n      form\n    };\n  }\n\n  [ConfigAttributeNames.CUSTOM_GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return { name, value, options, form };\n  }\n\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigAttributeNames",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigAttributeOptions",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "wrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<AttributeWrapper>",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AttributeWrapper",
            "id": "interface-AttributeWrapper-651cfdba3f000923bbee8d3d05505de6",
            "file": "src/app/shared/configuration/attributes/attribute.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, InjectionToken, TemplateRef, Type } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { isBoolean, isEmptyObject } from '@app/core/types';\nimport { FieldComponent } from '@app/shared/configuration/field/field.component';\n\nexport const ATTRIBUTES_OPTIONS = new InjectionToken('Attributes options');\n\nexport interface AttributeOptions {\n  name: ConfigAttributeNames;\n  wrapper?: Type<AttributeWrapper>;\n  options?: ConfigAttributeOptions;\n}\n\nexport type AttributesOptions = Record<ConfigAttributeNames, AttributeOptions>\n\nexport interface AttributeWrapper {\n  fieldTemplate: TemplateRef<any>;\n  wrapperOptions: ConfigAttributeOptions;\n  fieldOptions: IFieldOptions;\n  attributeForm: FormGroup;\n  parametersForm: FormGroup;\n  field: FieldComponent;\n}\n\nexport enum ConfigAttributeNames {\n  // an attribute for adding config parameters to group\n  GROUP_KEYS = 'group_keys',\n  // an attribute for config parameters that determines whether this parameter can be added to the config group\n  CUSTOM_GROUP_KEYS = 'custom_group_keys'\n}\n\nexport interface ConfigAttributesJSON {\n  [key: string]: any;\n}\n\nexport interface ConfigAttributeOptions {\n  tooltipText?: string;\n\n  [key: string]: any;\n}\n\nexport type ConfigAttribute = AttributeOptions & { value: ConfigAttributesJSON, form: FormGroup };\n\nexport type Attributes = Map<ConfigAttributeNames, ConfigAttribute>;\n\n@Injectable()\nexport class AttributeService {\n\n  private readonly _activeAttributes: Partial<ConfigAttributeNames>[] = [\n    ConfigAttributeNames.GROUP_KEYS,\n    ConfigAttributeNames.CUSTOM_GROUP_KEYS\n  ];\n\n  get attributes(): Attributes {\n    return this._attributes;\n  }\n\n  private _attributes: Attributes;\n\n  constructor(@Inject(ATTRIBUTES_OPTIONS) private _configs: AttributesOptions, private _fb: FormBuilder) {\n  }\n\n  init(json: ConfigAttributesJSON): void {\n    this._attributes = this._createAttributes(this._activeAttributes, json, this._configs);\n  }\n\n  getByName(name: ConfigAttributeNames): ConfigAttribute {\n    return this._attributes.has(name) ? this._attributes.get(name) : undefined;\n  }\n\n  private _createAttributes(_activeAttributes: Partial<ConfigAttributeNames>[], json: ConfigAttributesJSON, configs: AttributesOptions): Attributes {\n    const isEmptyAttrs = !Object.keys(json || {}).length;\n    const isActiveAttrsPresent = !!Object.keys(json || {}).filter((x: ConfigAttributeNames) => this._activeAttributes.includes(x)).length;\n    if (isEmptyAttrs || !isActiveAttrsPresent) {\n      return;\n    }\n\n    return new Map(this._activeAttributes.map((attr) => [\n      attr,\n      new ConfigAttributeFactory(this._fb).create(attr, json[attr], configs[attr], json),\n    ]));\n  }\n\n\n  rawAttributes() {\n    let json = {};\n    if (this._attributes) {\n      for (const [key, value] of this._attributes.entries()) {\n        json = {\n          ...json,\n          [key]: value.form.value\n        };\n      }\n    }\n\n    return json;\n  }\n}\n\nexport const createFormForAttribute = (fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n};\n\n\nexport class ConfigAttributeFactory {\n\n  constructor(private fb: FormBuilder) {}\n\n  create(name: ConfigAttributeNames, value: ConfigAttributesJSON, options: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n    if (!this[name]) {\n      return;\n    }\n\n    return this[name](value, options, json);\n  }\n\n  [ConfigAttributeNames.GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options,\n    wrapper\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return {\n      name,\n      value,\n      wrapper,\n      options,\n      form\n    };\n  }\n\n  [ConfigAttributeNames.CUSTOM_GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return { name, value, options, form };\n  }\n\n}\n",
            "properties": [
                {
                    "name": "attributeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFieldOptions",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "parametersForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "wrapperOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigAttributeOptions",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-c93cd801beead75ee8f3180f3314d660",
            "file": "src/app/core/auth/auth.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action, createAction, createFeatureSelector, createReducer, createSelector, on, props } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\n\nexport const authCheck = createAction('[Auth] Check');\nexport const authLogin = createAction('[Auth] Login', props<{ login: string; password: string }>());\nexport const authSuccess = createAction('[Auth] LoginSuccess', props<{ login: string }>());\nexport const authFaled = createAction('[Auth] LoginFaled', props<{ message: string }>());\nexport const authLogout = createAction('[Auth] Logout');\n\nexport interface AuthState {\n  isValid: boolean;\n  message: string;\n}\n\nconst initialState: AuthState = {\n  isValid: false,\n  message: '',\n};\n\nconst reducer = createReducer(\n  initialState,\n  on(authSuccess, state => ({ isValid: true, message: 'Auth is success.' })),\n  on(authFaled, (state, { message }) => ({ isValid: false, message })),\n  on(authLogout, state => ({ isValid: false, message: '' }))\n);\n\nexport function authReducer(state: AuthState, action: Action) {\n  return reducer(state, action);\n}\n\nexport const getAuthState = createFeatureSelector<AuthState>('auth');\nexport const isAuthenticated = createSelector(\n  getAuthState,\n  state => state.isValid\n);\n\n@Injectable()\nexport class AuthEffects {\n  check$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(authCheck),\n      map(() =>\n        this.authService.auth.token\n          ? authSuccess({ login: this.authService.auth.login })\n          : authFaled({ message: 'User is not authorized!' })\n      )\n    )\n  );\n\n  auth$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(authLogin),\n        switchMap(a =>\n          this.authService.login(a.login, a.password).pipe(\n            map(() => authSuccess({ login: a.login })),\n            catchError(() => of(authFaled({ message: 'Incorrect password or user.' })))\n          )\n        )\n      ),\n    { useEffectsErrorHandler: true }\n  );\n\n  logout$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(authLogout),\n        tap(() => this.authService.logout())\n      ),\n    { dispatch: false }\n  );\n\n  constructor(private actions$: Actions, private authService: AuthService) {}\n}\n",
            "properties": [
                {
                    "name": "isValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "BaseEntity",
            "id": "interface-BaseEntity-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "bundle_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "concerns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Concern[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIssues",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "prototype_display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "prototype_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "prototype_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "AdcmEntity"
        },
        {
            "name": "Bundle",
            "id": "interface-Bundle-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-0cbb246102564bc134c66dc61b2dabe6",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": [],
            "extends": "BaseEntity"
        },
        {
            "name": "CanLicensed",
            "id": "interface-CanLicensed-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "license",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"unaccepted\" | \"accepted\" | \"absent\"",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "license_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CheckLog",
            "id": "interface-CheckLog-a25a180383c9eab0fd04d0bffbe4860c",
            "file": "src/app/core/types/task-job.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from './api';\nimport { Entity } from '@adwp-ui/widgets';\n\nexport type JobStatus = 'created' | 'running' | 'failed' | 'success' | 'aborted';\n\nexport type JobType = 'component' | 'service' | 'cluster' | 'host' | 'provider';\n\nexport interface JobObject {\n  id: number;\n  name: string;\n  type: JobType;\n  url?: string[];\n}\n\ninterface TaskBase extends Entity {\n  start_date: string;\n  finish_date: string;\n  objects: JobObject[];\n  status: JobStatus;\n  action: JobAction;\n  terminatable: boolean;\n  cancel: string;\n}\n\nexport interface JobAction {\n  prototype_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  display_name: string;\n}\ninterface JobRaw extends TaskBase {\n  log_files: LogFile[];\n  start_date: string;\n  finish_date: string;\n}\n\nexport interface TaskRaw extends TaskBase {\n  jobs: Job[];\n}\n\nexport type Job = JobRaw & BaseEntity;\nexport type Task = TaskRaw & BaseEntity;\n\nexport interface LogFile {\n  id: number;\n  url: string;\n  name: string;\n  type: string;\n  format: 'txt' | 'json';\n  download_url: string;\n  content: string | CheckLog[];\n}\n\nexport interface CheckLog {\n  title: string;\n  message: string;\n  result: boolean;\n  type: 'group' | 'check';\n  content?: CheckLog[];\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckLog[]",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"group\" | \"check\"",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ClusterStatusTree",
            "id": "interface-ClusterStatusTree-c0578eccc6c0f17562e0f3175dee1006",
            "file": "src/app/models/status-tree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StatusTreeLinkFunc = (id: number, tree: StatusTree[]) => string[];\n\nexport interface StatusTreeSubject {\n  id?: number;\n  name: string;\n  status?: number;\n  link?: StatusTreeLinkFunc;\n}\n\nexport interface StatusTree {\n  subject: StatusTreeSubject;\n  children: StatusTree[];\n}\n\nexport interface ClusterStatusTree extends StatusTreeSubject {\n  chilren: {\n    hosts: StatusTreeSubject[];\n    services: ServiceStatusTree[];\n  };\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n\nexport interface HostComponentStatusTree extends StatusTreeSubject {\n  hosts: StatusTreeSubject[];\n}\n\nexport interface HostStatusTree extends StatusTreeSubject {\n  hc: StatusTreeSubject[];\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n",
            "properties": [
                {
                    "name": "chilren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "StatusTreeSubject"
        },
        {
            "name": "CompareConfig",
            "id": "interface-CompareConfig-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IConfig"
        },
        {
            "name": "Concern",
            "id": "interface-Concern-148a13da0121427561184af2494fce44",
            "file": "src/app/models/concern/concern.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Entity } from '@adwp-ui/widgets';\nimport { ConcernReason } from './concern-reason';\n\nexport type ConcernType = 'issue' | 'lock';\n\nexport interface Concern extends Entity {\n  blocking: boolean;\n  reason: ConcernReason;\n  type: ConcernType;\n  url?: string;\n  cause: string;\n}\n",
            "properties": [
                {
                    "name": "blocking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "cause",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConcernReason",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConcernType",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "Entity"
        },
        {
            "name": "ConcernEventFilter",
            "id": "interface-ConcernEventFilter-70a6210b9e5b1aba1f56cd28e16d0494",
            "file": "src/app/models/eventable-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\n\nimport { EntityEvent, EventMessage } from '@app/core/store';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\nexport interface EventFilter {\n  events?: EntityEvent[];\n}\n\nexport interface ConcernEventFilter extends EventFilter {\n  types?: ConcernEventType[];\n}\n\nexport interface EventableService {\n\n  events(eventFilter?: EventFilter): Observable<EventMessage>;\n\n}\n",
            "properties": [
                {
                    "name": "types",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConcernEventType[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EventFilter"
        },
        {
            "name": "ConcernReason",
            "id": "interface-ConcernReason-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholder",
                    "optional": false,
                    "description": "",
                    "line": 95
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ConfigAttributeOptions",
            "id": "interface-ConfigAttributeOptions-651cfdba3f000923bbee8d3d05505de6",
            "file": "src/app/shared/configuration/attributes/attribute.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, InjectionToken, TemplateRef, Type } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { isBoolean, isEmptyObject } from '@app/core/types';\nimport { FieldComponent } from '@app/shared/configuration/field/field.component';\n\nexport const ATTRIBUTES_OPTIONS = new InjectionToken('Attributes options');\n\nexport interface AttributeOptions {\n  name: ConfigAttributeNames;\n  wrapper?: Type<AttributeWrapper>;\n  options?: ConfigAttributeOptions;\n}\n\nexport type AttributesOptions = Record<ConfigAttributeNames, AttributeOptions>\n\nexport interface AttributeWrapper {\n  fieldTemplate: TemplateRef<any>;\n  wrapperOptions: ConfigAttributeOptions;\n  fieldOptions: IFieldOptions;\n  attributeForm: FormGroup;\n  parametersForm: FormGroup;\n  field: FieldComponent;\n}\n\nexport enum ConfigAttributeNames {\n  // an attribute for adding config parameters to group\n  GROUP_KEYS = 'group_keys',\n  // an attribute for config parameters that determines whether this parameter can be added to the config group\n  CUSTOM_GROUP_KEYS = 'custom_group_keys'\n}\n\nexport interface ConfigAttributesJSON {\n  [key: string]: any;\n}\n\nexport interface ConfigAttributeOptions {\n  tooltipText?: string;\n\n  [key: string]: any;\n}\n\nexport type ConfigAttribute = AttributeOptions & { value: ConfigAttributesJSON, form: FormGroup };\n\nexport type Attributes = Map<ConfigAttributeNames, ConfigAttribute>;\n\n@Injectable()\nexport class AttributeService {\n\n  private readonly _activeAttributes: Partial<ConfigAttributeNames>[] = [\n    ConfigAttributeNames.GROUP_KEYS,\n    ConfigAttributeNames.CUSTOM_GROUP_KEYS\n  ];\n\n  get attributes(): Attributes {\n    return this._attributes;\n  }\n\n  private _attributes: Attributes;\n\n  constructor(@Inject(ATTRIBUTES_OPTIONS) private _configs: AttributesOptions, private _fb: FormBuilder) {\n  }\n\n  init(json: ConfigAttributesJSON): void {\n    this._attributes = this._createAttributes(this._activeAttributes, json, this._configs);\n  }\n\n  getByName(name: ConfigAttributeNames): ConfigAttribute {\n    return this._attributes.has(name) ? this._attributes.get(name) : undefined;\n  }\n\n  private _createAttributes(_activeAttributes: Partial<ConfigAttributeNames>[], json: ConfigAttributesJSON, configs: AttributesOptions): Attributes {\n    const isEmptyAttrs = !Object.keys(json || {}).length;\n    const isActiveAttrsPresent = !!Object.keys(json || {}).filter((x: ConfigAttributeNames) => this._activeAttributes.includes(x)).length;\n    if (isEmptyAttrs || !isActiveAttrsPresent) {\n      return;\n    }\n\n    return new Map(this._activeAttributes.map((attr) => [\n      attr,\n      new ConfigAttributeFactory(this._fb).create(attr, json[attr], configs[attr], json),\n    ]));\n  }\n\n\n  rawAttributes() {\n    let json = {};\n    if (this._attributes) {\n      for (const [key, value] of this._attributes.entries()) {\n        json = {\n          ...json,\n          [key]: value.form.value\n        };\n      }\n    }\n\n    return json;\n  }\n}\n\nexport const createFormForAttribute = (fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n};\n\n\nexport class ConfigAttributeFactory {\n\n  constructor(private fb: FormBuilder) {}\n\n  create(name: ConfigAttributeNames, value: ConfigAttributesJSON, options: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n    if (!this[name]) {\n      return;\n    }\n\n    return this[name](value, options, json);\n  }\n\n  [ConfigAttributeNames.GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options,\n    wrapper\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return {\n      name,\n      value,\n      wrapper,\n      options,\n      form\n    };\n  }\n\n  [ConfigAttributeNames.CUSTOM_GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return { name, value, options, form };\n  }\n\n}\n",
            "properties": [
                {
                    "name": "tooltipText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-651cfdba3f000923bbee8d3d05505de6",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "ConfigAttributesJSON",
            "id": "interface-ConfigAttributesJSON-651cfdba3f000923bbee8d3d05505de6",
            "file": "src/app/shared/configuration/attributes/attribute.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, InjectionToken, TemplateRef, Type } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { isBoolean, isEmptyObject } from '@app/core/types';\nimport { FieldComponent } from '@app/shared/configuration/field/field.component';\n\nexport const ATTRIBUTES_OPTIONS = new InjectionToken('Attributes options');\n\nexport interface AttributeOptions {\n  name: ConfigAttributeNames;\n  wrapper?: Type<AttributeWrapper>;\n  options?: ConfigAttributeOptions;\n}\n\nexport type AttributesOptions = Record<ConfigAttributeNames, AttributeOptions>\n\nexport interface AttributeWrapper {\n  fieldTemplate: TemplateRef<any>;\n  wrapperOptions: ConfigAttributeOptions;\n  fieldOptions: IFieldOptions;\n  attributeForm: FormGroup;\n  parametersForm: FormGroup;\n  field: FieldComponent;\n}\n\nexport enum ConfigAttributeNames {\n  // an attribute for adding config parameters to group\n  GROUP_KEYS = 'group_keys',\n  // an attribute for config parameters that determines whether this parameter can be added to the config group\n  CUSTOM_GROUP_KEYS = 'custom_group_keys'\n}\n\nexport interface ConfigAttributesJSON {\n  [key: string]: any;\n}\n\nexport interface ConfigAttributeOptions {\n  tooltipText?: string;\n\n  [key: string]: any;\n}\n\nexport type ConfigAttribute = AttributeOptions & { value: ConfigAttributesJSON, form: FormGroup };\n\nexport type Attributes = Map<ConfigAttributeNames, ConfigAttribute>;\n\n@Injectable()\nexport class AttributeService {\n\n  private readonly _activeAttributes: Partial<ConfigAttributeNames>[] = [\n    ConfigAttributeNames.GROUP_KEYS,\n    ConfigAttributeNames.CUSTOM_GROUP_KEYS\n  ];\n\n  get attributes(): Attributes {\n    return this._attributes;\n  }\n\n  private _attributes: Attributes;\n\n  constructor(@Inject(ATTRIBUTES_OPTIONS) private _configs: AttributesOptions, private _fb: FormBuilder) {\n  }\n\n  init(json: ConfigAttributesJSON): void {\n    this._attributes = this._createAttributes(this._activeAttributes, json, this._configs);\n  }\n\n  getByName(name: ConfigAttributeNames): ConfigAttribute {\n    return this._attributes.has(name) ? this._attributes.get(name) : undefined;\n  }\n\n  private _createAttributes(_activeAttributes: Partial<ConfigAttributeNames>[], json: ConfigAttributesJSON, configs: AttributesOptions): Attributes {\n    const isEmptyAttrs = !Object.keys(json || {}).length;\n    const isActiveAttrsPresent = !!Object.keys(json || {}).filter((x: ConfigAttributeNames) => this._activeAttributes.includes(x)).length;\n    if (isEmptyAttrs || !isActiveAttrsPresent) {\n      return;\n    }\n\n    return new Map(this._activeAttributes.map((attr) => [\n      attr,\n      new ConfigAttributeFactory(this._fb).create(attr, json[attr], configs[attr], json),\n    ]));\n  }\n\n\n  rawAttributes() {\n    let json = {};\n    if (this._attributes) {\n      for (const [key, value] of this._attributes.entries()) {\n        json = {\n          ...json,\n          [key]: value.form.value\n        };\n      }\n    }\n\n    return json;\n  }\n}\n\nexport const createFormForAttribute = (fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n};\n\n\nexport class ConfigAttributeFactory {\n\n  constructor(private fb: FormBuilder) {}\n\n  create(name: ConfigAttributeNames, value: ConfigAttributesJSON, options: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n    if (!this[name]) {\n      return;\n    }\n\n    return this[name](value, options, json);\n  }\n\n  [ConfigAttributeNames.GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options,\n    wrapper\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return {\n      name,\n      value,\n      wrapper,\n      options,\n      form\n    };\n  }\n\n  [ConfigAttributeNames.CUSTOM_GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return { name, value, options, form };\n  }\n\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-651cfdba3f000923bbee8d3d05505de6",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "ConfigGroup",
            "id": "interface-ConfigGroup-8e9ab1169297eb2457ce4f4f82dfafda",
            "file": "src/app/config-groups/model/config-group.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ApiFlat } from '@app/core/types';\n\nexport interface ConfigGroup extends ApiFlat {\n  name: string;\n  description: string;\n  hosts: string;\n  config: string;\n  host_candidate: string;\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "host_candidate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "ApiFlat"
        },
        {
            "name": "CountedStatusTree",
            "id": "interface-CountedStatusTree-91f369d83e4defa92ad4e5e0aa366670",
            "file": "src/app/components/status-tree/status-tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\n\nimport { StatusTree, StatusTreeSubject } from '@app/models/status-tree';\n\ninterface ExampleFlatNode {\n  expandable: boolean;\n  subject: StatusTreeSubject;\n  level: number;\n}\n\ninterface Counts {\n  total: number;\n  succeed: number;\n}\n\ninterface CountedStatusTree extends StatusTree {\n  counts?: Counts;\n}\n\nexport enum Folding {\n  Collapsed,\n  Expanded,\n}\n\n@Component({\n  selector: 'app-status-tree',\n  templateUrl: './status-tree.component.html',\n  styleUrls: ['./status-tree.component.scss']\n})\nexport class StatusTreeComponent {\n\n  @ViewChild('treeNode', { static: true }) treeNode: any;\n\n  private calcCounts = (children: CountedStatusTree[]): Counts => {\n    return children.reduce((acc: Counts, child: CountedStatusTree) => {\n        acc.total++;\n        if ('status' in child.subject) {\n          if (child.subject.status === 0) {\n            acc.succeed++;\n          }\n        } else {\n          const childrenSucceed = child.children.reduce((accum, item) => item.subject.status === 0 ? accum + 1 : accum, 0);\n          if (childrenSucceed === child.children.length) {\n            acc.succeed++;\n          }\n        }\n        return acc;\n      },\n      { total: 0, succeed: 0 } as Counts,\n    ) as Counts;\n  }\n\n  private transformer = (node: StatusTree, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      subject: node.subject,\n      level: level,\n      counts: node.children ? this.calcCounts(node.children) : { total: 0, succeed: 0 },\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n  node => node.level,\n  node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this.transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  private ownTree: StatusTree[];\n  @Input() set tree(tree: StatusTree[]) {\n    this.ownTree = tree;\n    this.dataSource.data = tree;\n\n    if (this.folding === Folding.Expanded) {\n      this.treeControl.expandAll();\n    }\n\n    if (this.folding === Folding.Collapsed) {\n      this.treeControl.collapseAll();\n    }\n  }\n  get tree(): StatusTree[] {\n    return this.ownTree;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  private ownFolding: Folding;\n  @Input() set folding(folding: Folding) {\n    this.ownFolding = folding;\n    this.tree = this.tree;\n  }\n  get folding(): Folding {\n    return this.ownFolding;\n  }\n\n  expandAll() {\n    this.treeControl.expandAll();\n  }\n\n  collapseAll() {\n    this.treeControl.collapseAll();\n  }\n\n  hasCollapsed(): boolean {\n    for (const item of this.treeControl.dataNodes) {\n      if (!this.treeControl.isExpanded(item)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "counts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Counts",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "StatusTree"
        },
        {
            "name": "Counts",
            "id": "interface-Counts-91f369d83e4defa92ad4e5e0aa366670",
            "file": "src/app/components/status-tree/status-tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\n\nimport { StatusTree, StatusTreeSubject } from '@app/models/status-tree';\n\ninterface ExampleFlatNode {\n  expandable: boolean;\n  subject: StatusTreeSubject;\n  level: number;\n}\n\ninterface Counts {\n  total: number;\n  succeed: number;\n}\n\ninterface CountedStatusTree extends StatusTree {\n  counts?: Counts;\n}\n\nexport enum Folding {\n  Collapsed,\n  Expanded,\n}\n\n@Component({\n  selector: 'app-status-tree',\n  templateUrl: './status-tree.component.html',\n  styleUrls: ['./status-tree.component.scss']\n})\nexport class StatusTreeComponent {\n\n  @ViewChild('treeNode', { static: true }) treeNode: any;\n\n  private calcCounts = (children: CountedStatusTree[]): Counts => {\n    return children.reduce((acc: Counts, child: CountedStatusTree) => {\n        acc.total++;\n        if ('status' in child.subject) {\n          if (child.subject.status === 0) {\n            acc.succeed++;\n          }\n        } else {\n          const childrenSucceed = child.children.reduce((accum, item) => item.subject.status === 0 ? accum + 1 : accum, 0);\n          if (childrenSucceed === child.children.length) {\n            acc.succeed++;\n          }\n        }\n        return acc;\n      },\n      { total: 0, succeed: 0 } as Counts,\n    ) as Counts;\n  }\n\n  private transformer = (node: StatusTree, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      subject: node.subject,\n      level: level,\n      counts: node.children ? this.calcCounts(node.children) : { total: 0, succeed: 0 },\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n  node => node.level,\n  node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this.transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  private ownTree: StatusTree[];\n  @Input() set tree(tree: StatusTree[]) {\n    this.ownTree = tree;\n    this.dataSource.data = tree;\n\n    if (this.folding === Folding.Expanded) {\n      this.treeControl.expandAll();\n    }\n\n    if (this.folding === Folding.Collapsed) {\n      this.treeControl.collapseAll();\n    }\n  }\n  get tree(): StatusTree[] {\n    return this.ownTree;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  private ownFolding: Folding;\n  @Input() set folding(folding: Folding) {\n    this.ownFolding = folding;\n    this.tree = this.tree;\n  }\n  get folding(): Folding {\n    return this.ownFolding;\n  }\n\n  expandAll() {\n    this.treeControl.expandAll();\n  }\n\n  collapseAll() {\n    this.treeControl.collapseAll();\n  }\n\n  hasCollapsed(): boolean {\n    for (const item of this.treeControl.dataNodes) {\n      if (!this.treeControl.isExpanded(item)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "succeed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-068900a1cc4916fa3b799a2be53b23f7",
            "file": "src/app/shared/components/dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ComponentFactoryResolver, EventEmitter, Inject, OnInit, Type, ViewChild, HostListener } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { DynamicComponent, DynamicDirective, DynamicEvent } from '../directives/dynamic.directive';\nimport { ChannelService } from '@app/core/services';\nimport { keyChannelStrim } from '@app/core/services';\nimport { ActionParameters } from '@app/shared/components/actions/actions.directive';\n\nexport interface DialogData {\n  title: string;\n  component: Type<DynamicComponent>;\n  model?: ActionParameters | any;\n  event?: EventEmitter<any>;\n  text?: string;\n  controls?: any[] | any;\n  disabled?: boolean;\n}\n\n@Component({\n  selector: 'app-dialog',\n  template: `\n    <h3 mat-dialog-title class=\"overflow\">{{ data.title || 'Notification' }}</h3>\n    <mat-dialog-content class=\"content\" appScroll (read)=\"scroll($event)\">\n      <pre *ngIf=\"data.text\">{{ data.text }}</pre>\n      <ng-template appDynamic></ng-template>\n    </mat-dialog-content>\n    <mat-dialog-actions class=\"controls\" *ngIf=\"data.controls\">\n      <ng-container *ngIf=\"controlsIsArray(); else withLabel\">\n        <ng-template *ngTemplateOutlet=\"isArray; context: { buttons: data.controls }\"></ng-template>\n      </ng-container>\n    </mat-dialog-actions>\n    <ng-template #withLabel>\n      <label class=\"warn\" style=\"margin-right: 30px;\">{{ data.controls.label }}</label>\n      <ng-container *ngTemplateOutlet=\"isArray; context: { buttons: data.controls.buttons }\"></ng-container>\n    </ng-template>\n    <ng-template #isArray let-buttons=\"buttons\">\n      <button mat-raised-button color=\"primary\" (click)=\"_noClick()\" tabindex=\"-1\">{{ buttons[1] }}</button>\n      <button mat-raised-button color=\"accent\" [mat-dialog-close]=\"true\" [disabled]=\"data?.disabled\" tabindex=\"2\">\n        {{ buttons[0] }}\n      </button>\n    </ng-template>\n  `,\n  styles: ['pre {white-space: pre-wrap;}'],\n})\nexport class DialogComponent implements OnInit {\n  controls: string[];\n  noClose: boolean | undefined;\n\n  instance: DynamicComponent;\n\n  @ViewChild(DynamicDirective, { static: true }) dynamic: DynamicDirective;\n\n  @HostListener('window:keydown', ['$event'])\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      const c = this.instance;\n      if (c?.onEnterKey) c.onEnterKey();\n    }\n  }\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private componentFactoryResolever: ComponentFactoryResolver,\n    private channel: ChannelService\n  ) {}\n\n  controlsIsArray() {\n    return Array.isArray(this.data.controls);\n  }\n\n  ngOnInit(): void {\n    if (this.data.component) {\n      const componentFactory = this.componentFactoryResolever.resolveComponentFactory(this.data.component);\n      const viewContainerRef = this.dynamic.viewContainerRef;\n      viewContainerRef.clear();\n\n      const componentRef = viewContainerRef.createComponent(componentFactory);\n      this.instance = <DynamicComponent>componentRef.instance;\n      this.instance.model = this.data.model;\n      // event define in the component\n      if (this.instance.event) this.instance.event.subscribe((e: DynamicEvent) => this.dialogRef.close(e));\n\n      if (this.data.event) this.instance.event = this.data.event;\n    }\n  }\n\n  scroll(stop: { direct: -1 | 1 | 0; screenTop: number }) {\n    this.channel.next(keyChannelStrim.scroll, stop);\n  }\n\n  _noClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<DynamicComponent>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "controls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[] | any",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionParameters | any",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DynamicComponent",
            "id": "interface-DynamicComponent-417b7397318b007b139d072bc712681f",
            "file": "src/app/shared/directives/dynamic.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, ViewContainerRef, EventEmitter } from '@angular/core';\n\n/**\n * @param name string required name action\n * @param data any\n */\nexport interface DynamicEvent {\n  name: string;\n  data?: any;\n}\n\nexport interface DynamicComponent {\n  event?: EventEmitter<any>;\n  model?: any;\n  onEnterKey?: () => void;\n}\n\n@Directive({\n  selector: '[appDynamic]',\n})\nexport class DynamicDirective {\n  constructor(public viewContainerRef: ViewContainerRef) {}\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onEnterKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DynamicEvent",
            "id": "interface-DynamicEvent-417b7397318b007b139d072bc712681f",
            "file": "src/app/shared/directives/dynamic.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, ViewContainerRef, EventEmitter } from '@angular/core';\n\n/**\n * @param name string required name action\n * @param data any\n */\nexport interface DynamicEvent {\n  name: string;\n  data?: any;\n}\n\nexport interface DynamicComponent {\n  event?: EventEmitter<any>;\n  model?: any;\n  onEnterKey?: () => void;\n}\n\n@Directive({\n  selector: '[appDynamic]',\n})\nexport class DynamicDirective {\n  constructor(public viewContainerRef: ViewContainerRef) {}\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "EmmitRow",
            "id": "interface-EmmitRow-48bdc39db9b8bb2237d76b204a2e01dc",
            "file": "src/app/core/types/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmmitRow {\n  cmd: string;\n  row: any;\n  item?: any;\n}\n\nexport interface SelectOption {\n  id: number | string;\n  name: string;\n}\n\nexport interface IError {\n  code: string;\n  desc: string;\n  level: string;\n}\n",
            "properties": [
                {
                    "name": "cmd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>For lists</p>\n",
            "rawdescription": "\n\nFor lists\n",
            "methods": []
        },
        {
            "name": "EventableService",
            "id": "interface-EventableService-70a6210b9e5b1aba1f56cd28e16d0494",
            "file": "src/app/models/eventable-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\n\nimport { EntityEvent, EventMessage } from '@app/core/store';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\nexport interface EventFilter {\n  events?: EntityEvent[];\n}\n\nexport interface ConcernEventFilter extends EventFilter {\n  types?: ConcernEventType[];\n}\n\nexport interface EventableService {\n\n  events(eventFilter?: EventFilter): Observable<EventMessage>;\n\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "eventFilter",
                            "type": "EventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EventMessage>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventFilter",
                            "type": "EventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "EventFilter",
            "id": "interface-EventFilter-70a6210b9e5b1aba1f56cd28e16d0494",
            "file": "src/app/models/eventable-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\n\nimport { EntityEvent, EventMessage } from '@app/core/store';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\nexport interface EventFilter {\n  events?: EntityEvent[];\n}\n\nexport interface ConcernEventFilter extends EventFilter {\n  types?: ConcernEventType[];\n}\n\nexport interface EventableService {\n\n  events(eventFilter?: EventFilter): Observable<EventMessage>;\n\n}\n",
            "properties": [
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityEvent[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "EventMessage",
            "id": "interface-EventMessage-ca14b9fd2a8ab6897860f58a705daf52",
            "file": "src/app/core/store/sockets/socket.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeName } from '@app/core/types';\nimport {\n  Action,\n  createAction,\n  createFeatureSelector,\n  createReducer,\n  createSelector,\n  on,\n  props,\n  select\n} from '@ngrx/store';\nimport { pipe } from 'rxjs';\nimport { skip } from 'rxjs/operators';\n\n/**\n * Event Message Object dispatched from socket\n */\nexport interface IEMObject {\n  type: TypeName;\n  id: number;\n  details: {\n    id?: number;\n    type: string;\n    value: any;\n  };\n}\n\nexport type EntityEvent =\n  | 'add'\n  | 'add_job_log'\n  | 'create'\n  | 'delete'\n  | 'remove'\n  | 'change_config'\n  | 'change_state'\n  | 'change_status'\n  | 'change_job_status'\n  | 'change_hostcomponentmap'\n  | 'upgrade'\n  | 'concern';\n\nexport interface EventMessage {\n  event: EntityEvent;\n  object?: IEMObject;\n}\n\nexport type StatusType = 'open' | 'close' | 're-open';\n\nexport const socketInit = createAction('[Socket] Init');\nexport const socketOpen = createAction('[Socket] Open', props<{ status: StatusType }>());\nexport const socketClose = createAction('[Socket] Close', props<{ status: StatusType }>());\nexport const socketResponse = createAction('[Socket] Response', props<{ message: EventMessage }>());\nexport const clearMessages = createAction('[Socket] Clear messages');\n\nexport interface SocketState {\n  status: StatusType;\n  message: EventMessage;\n}\n\nconst initialState: SocketState = {\n  status: null,\n  message: null,\n};\n\nconst reducer = createReducer(\n  initialState,\n  on(socketInit, (state) => ({ ...state })),\n  on(socketOpen, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketClose, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketResponse, (state, { message }) => ({\n    ...state,\n    message,\n  })),\n  on(clearMessages, (state) => ({ ...state, message: null }))\n);\n\nexport function socketReducer(state: SocketState, action: Action) {\n  return reducer(state, action);\n}\n\nexport const getSocketState = createFeatureSelector<SocketState>('socket');\nexport const getConnectStatus = createSelector(getSocketState, (state: SocketState) => state.status);\nexport const getMessage = createSelector(getSocketState, (state) => state.message);\nexport const selectMessage = pipe(\n  select(getMessage),\n  skip(1),\n);\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityEvent",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "object",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEMObject",
                    "optional": true,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ExampleFlatNode",
            "id": "interface-ExampleFlatNode-91f369d83e4defa92ad4e5e0aa366670",
            "file": "src/app/components/status-tree/status-tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\n\nimport { StatusTree, StatusTreeSubject } from '@app/models/status-tree';\n\ninterface ExampleFlatNode {\n  expandable: boolean;\n  subject: StatusTreeSubject;\n  level: number;\n}\n\ninterface Counts {\n  total: number;\n  succeed: number;\n}\n\ninterface CountedStatusTree extends StatusTree {\n  counts?: Counts;\n}\n\nexport enum Folding {\n  Collapsed,\n  Expanded,\n}\n\n@Component({\n  selector: 'app-status-tree',\n  templateUrl: './status-tree.component.html',\n  styleUrls: ['./status-tree.component.scss']\n})\nexport class StatusTreeComponent {\n\n  @ViewChild('treeNode', { static: true }) treeNode: any;\n\n  private calcCounts = (children: CountedStatusTree[]): Counts => {\n    return children.reduce((acc: Counts, child: CountedStatusTree) => {\n        acc.total++;\n        if ('status' in child.subject) {\n          if (child.subject.status === 0) {\n            acc.succeed++;\n          }\n        } else {\n          const childrenSucceed = child.children.reduce((accum, item) => item.subject.status === 0 ? accum + 1 : accum, 0);\n          if (childrenSucceed === child.children.length) {\n            acc.succeed++;\n          }\n        }\n        return acc;\n      },\n      { total: 0, succeed: 0 } as Counts,\n    ) as Counts;\n  }\n\n  private transformer = (node: StatusTree, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      subject: node.subject,\n      level: level,\n      counts: node.children ? this.calcCounts(node.children) : { total: 0, succeed: 0 },\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n  node => node.level,\n  node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this.transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  private ownTree: StatusTree[];\n  @Input() set tree(tree: StatusTree[]) {\n    this.ownTree = tree;\n    this.dataSource.data = tree;\n\n    if (this.folding === Folding.Expanded) {\n      this.treeControl.expandAll();\n    }\n\n    if (this.folding === Folding.Collapsed) {\n      this.treeControl.collapseAll();\n    }\n  }\n  get tree(): StatusTree[] {\n    return this.ownTree;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  private ownFolding: Folding;\n  @Input() set folding(folding: Folding) {\n    this.ownFolding = folding;\n    this.tree = this.tree;\n  }\n  get folding(): Folding {\n    return this.ownFolding;\n  }\n\n  expandAll() {\n    this.treeControl.expandAll();\n  }\n\n  collapseAll() {\n    this.treeControl.collapseAll();\n  }\n\n  hasCollapsed(): boolean {\n    for (const item of this.treeControl.dataNodes) {\n      if (!this.treeControl.isExpanded(item)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "expandable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusTreeSubject",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "FormModel",
            "id": "interface-FormModel-f3a9e248a30b8e9f987ceff03428a9ad",
            "file": "src/app/shared/add-component/add-service-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, InjectionToken, Type } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { Host, Service, StackBase, TypeName } from '@app/core/types';\nimport { Params } from '@angular/router';\nimport { BaseFormDirective } from '@app/shared/add-component/base-form.directive';\nimport { ICluster } from '@app/models/cluster';\nimport { ListResult } from '@app/models/list-result';\n\nexport const ADD_SERVICE_PROVIDER = new InjectionToken<IAddService>('AddService');\n\nexport interface FormModel {\n  name: string;\n  title?: string;\n  form?: FormGroup;\n  success?: EventEmitter<{ flag: boolean; obj: any }>;\n  component?: Type<BaseFormDirective>;\n}\n\nexport interface IAddService {\n  model(name?: string): FormModel;\n\n  Cluster: ICluster;\n\n  Current: any;\n\n  add?<T>(data: any, name?: TypeName, prototype?: StackBase): Observable<T>;\n\n  getList?<T>(type: TypeName, param: Params): Observable<T[]>;\n\n  addHost?(host: Partial<Host>): Observable<Host>;\n\n  genName?(form: FormGroup): Subscription;\n\n  addHostInCluster?(ids: number[]): Observable<unknown[]>;\n\n  getListResults?<T>(type: TypeName, param: Params): Observable<ListResult<T>>;\n\n  getProtoServiceForCurrentCluster?(): Observable<{ name: string, id: number, url: string, version: string, edition: string, description: string, display_name: string, license: 'unaccepted' | 'accepted' | 'absent', bundle_id: number, bundle_edition: string, selected: boolean }[]>;\n\n  addService?(data: { prototype_id: number }[]): Observable<Service[]>;\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<BaseFormDirective>",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Host",
            "id": "interface-Host-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "cluster_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "cluster_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "fqdn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "provider_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "BaseEntity"
        },
        {
            "name": "HostComponent",
            "id": "interface-HostComponent-50993353cad3d133a2be743502171874",
            "file": "src/app/core/types/host-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HostComponent {\n  id: number;\n  /** host name */\n  host: string;\n  host_id: number;\n  /** component name */\n  component: string;\n  component_display_name: string;\n  component_id: number;\n  service_id: number;\n  service_display_name: string;\n  service_name: string;\n  service_version: string;\n  state: string;\n  url: string;\n  host_url: string;\n  status: number;\n  monitoring: 'passive' | 'active';\n}\n\n/**\n * A service component that may be installed on hosts in a cluster.\n */\nexport interface IComponent {\n  id: number;\n  prototype_id: number;\n  service_id: number;\n  service_name: string;\n  service_state: string;\n  name: string;\n  display_name: string;\n  status: number;\n  constraint: any;\n  monitoring?: 'passive' | 'active'; // status page\n  requires?: IRequires[];\n}\n\nexport interface IRequires {\n  // id: number;\n  prototype_id: number;\n  name: string;\n  display_name: string;\n  components?: IRequires[];\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>component name</p>\n",
                    "line": 24,
                    "rawdescription": "\ncomponent name"
                },
                {
                    "name": "component_display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "component_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>host name</p>\n",
                    "line": 21,
                    "rawdescription": "\nhost name"
                },
                {
                    "name": "host_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "host_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "monitoring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"passive\" | \"active\"",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "service_display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "service_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "service_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "service_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Information about the installed service component on a specific host</p>\n",
            "rawdescription": "\n\nInformation about the installed service component on a specific host\n",
            "methods": []
        },
        {
            "name": "HostComponentStatusTree",
            "id": "interface-HostComponentStatusTree-c0578eccc6c0f17562e0f3175dee1006",
            "file": "src/app/models/status-tree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StatusTreeLinkFunc = (id: number, tree: StatusTree[]) => string[];\n\nexport interface StatusTreeSubject {\n  id?: number;\n  name: string;\n  status?: number;\n  link?: StatusTreeLinkFunc;\n}\n\nexport interface StatusTree {\n  subject: StatusTreeSubject;\n  children: StatusTree[];\n}\n\nexport interface ClusterStatusTree extends StatusTreeSubject {\n  chilren: {\n    hosts: StatusTreeSubject[];\n    services: ServiceStatusTree[];\n  };\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n\nexport interface HostComponentStatusTree extends StatusTreeSubject {\n  hosts: StatusTreeSubject[];\n}\n\nexport interface HostStatusTree extends StatusTreeSubject {\n  hc: StatusTreeSubject[];\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n",
            "properties": [
                {
                    "name": "hosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusTreeSubject[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "StatusTreeSubject"
        },
        {
            "name": "HostStatusTree",
            "id": "interface-HostStatusTree-c0578eccc6c0f17562e0f3175dee1006",
            "file": "src/app/models/status-tree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StatusTreeLinkFunc = (id: number, tree: StatusTree[]) => string[];\n\nexport interface StatusTreeSubject {\n  id?: number;\n  name: string;\n  status?: number;\n  link?: StatusTreeLinkFunc;\n}\n\nexport interface StatusTree {\n  subject: StatusTreeSubject;\n  children: StatusTree[];\n}\n\nexport interface ClusterStatusTree extends StatusTreeSubject {\n  chilren: {\n    hosts: StatusTreeSubject[];\n    services: ServiceStatusTree[];\n  };\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n\nexport interface HostComponentStatusTree extends StatusTreeSubject {\n  hosts: StatusTreeSubject[];\n}\n\nexport interface HostStatusTree extends StatusTreeSubject {\n  hc: StatusTreeSubject[];\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n",
            "properties": [
                {
                    "name": "hc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusTreeSubject[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "StatusTreeSubject"
        },
        {
            "name": "IAction",
            "id": "interface-IAction-a0c38196ca8bbe306182b7cac1b6764b",
            "file": "src/app/models/action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IActionConfig {\n  attr: any;\n  config: any[];\n}\n\nexport interface IAction {\n  button: any;\n  config: IActionConfig;\n  display_name: string;\n  hostcomponentmap: any[];\n  name: string;\n  run: string;\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IActionConfig",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "hostcomponentmap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "run",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IAction",
            "id": "interface-IAction-735f0912aeff33ab88d1ab8e400a23cb-1",
            "file": "src/app/core/types/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IConfig } from '@app/shared/configuration/types';\n\n/**\n * \n *```\n{\n    action: 'add' | 'remove';  \n    component: string;    // name of servise to work with  \n    service: string;      // name of component to work with\n}\n```\n *\n */\nexport interface IActionParameter {\n  action: 'add' | 'remove';\n  component: string;\n  service: string;\n}\n\nexport interface IUIOptions {\n  disclaimer?: string;\n}\n\nexport interface IAction {\n  name: string;\n  description: string;\n  display_name: string;\n  run: string;\n  config: IConfig;\n  hostcomponentmap: IActionParameter[];\n  button: 'create_host' | null;\n  ui_options: IUIOptions;\n  children?: IAction[];\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"create_host\" | null",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "hostcomponentmap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IActionParameter[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "run",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "ui_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUIOptions",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IAction-1"
        },
        {
            "name": "IActionConfig",
            "id": "interface-IActionConfig-a0c38196ca8bbe306182b7cac1b6764b",
            "file": "src/app/models/action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IActionConfig {\n  attr: any;\n  config: any[];\n}\n\nexport interface IAction {\n  button: any;\n  config: IActionConfig;\n  display_name: string;\n  hostcomponentmap: any[];\n  name: string;\n  run: string;\n}\n",
            "properties": [
                {
                    "name": "attr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IActionParameter",
            "id": "interface-IActionParameter-735f0912aeff33ab88d1ab8e400a23cb",
            "file": "src/app/core/types/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IConfig } from '@app/shared/configuration/types';\n\n/**\n * \n *```\n{\n    action: 'add' | 'remove';  \n    component: string;    // name of servise to work with  \n    service: string;      // name of component to work with\n}\n```\n *\n */\nexport interface IActionParameter {\n  action: 'add' | 'remove';\n  component: string;\n  service: string;\n}\n\nexport interface IUIOptions {\n  disclaimer?: string;\n}\n\nexport interface IAction {\n  name: string;\n  description: string;\n  display_name: string;\n  run: string;\n  config: IConfig;\n  hostcomponentmap: IActionParameter[];\n  button: 'create_host' | null;\n  ui_options: IUIOptions;\n  children?: IAction[];\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"add\" | \"remove\"",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\naction: &#39;add&#39; | &#39;remove&#39;;\ncomponent: string;    // name of servise to work with\nservice: string;      // name of component to work with\n}</code></pre></div>",
            "rawdescription": "\n\n\n```\n{\naction: 'add' | 'remove';\ncomponent: string;    // name of servise to work with\nservice: string;      // name of component to work with\n}\n```\n\n",
            "methods": []
        },
        {
            "name": "IAddService",
            "id": "interface-IAddService-f3a9e248a30b8e9f987ceff03428a9ad",
            "file": "src/app/shared/add-component/add-service-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, InjectionToken, Type } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { Host, Service, StackBase, TypeName } from '@app/core/types';\nimport { Params } from '@angular/router';\nimport { BaseFormDirective } from '@app/shared/add-component/base-form.directive';\nimport { ICluster } from '@app/models/cluster';\nimport { ListResult } from '@app/models/list-result';\n\nexport const ADD_SERVICE_PROVIDER = new InjectionToken<IAddService>('AddService');\n\nexport interface FormModel {\n  name: string;\n  title?: string;\n  form?: FormGroup;\n  success?: EventEmitter<{ flag: boolean; obj: any }>;\n  component?: Type<BaseFormDirective>;\n}\n\nexport interface IAddService {\n  model(name?: string): FormModel;\n\n  Cluster: ICluster;\n\n  Current: any;\n\n  add?<T>(data: any, name?: TypeName, prototype?: StackBase): Observable<T>;\n\n  getList?<T>(type: TypeName, param: Params): Observable<T[]>;\n\n  addHost?(host: Partial<Host>): Observable<Host>;\n\n  genName?(form: FormGroup): Subscription;\n\n  addHostInCluster?(ids: number[]): Observable<unknown[]>;\n\n  getListResults?<T>(type: TypeName, param: Params): Observable<ListResult<T>>;\n\n  getProtoServiceForCurrentCluster?(): Observable<{ name: string, id: number, url: string, version: string, edition: string, description: string, display_name: string, license: 'unaccepted' | 'accepted' | 'absent', bundle_id: number, bundle_edition: string, selected: boolean }[]>;\n\n  addService?(data: { prototype_id: number }[]): Observable<Service[]>;\n}\n",
            "properties": [
                {
                    "name": "Cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICluster",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "Current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "prototype",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": true,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prototype",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addHost",
                    "args": [
                        {
                            "name": "host",
                            "type": "Partial<Host>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Observable<Host>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "host",
                            "type": "Partial<Host>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addHostInCluster",
                    "args": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Observable<[]>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addService",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Observable<Service[]>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "genName",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListResults",
                    "args": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Observable<ListResult<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProtoServiceForCurrentCluster",
                    "args": [],
                    "optional": true,
                    "returnType": "Observable<literal type[]>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "model",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormModel",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IAllStatus",
            "id": "interface-IAllStatus-f4479ba0b2419eab84b2be3a638f7417",
            "file": "src/app/shared/components/status/status.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ApiService } from '@app/core/api';\nimport { IComponent, Host, HostComponent } from '@app/core/types';\nimport { ICluster } from '@app/models/cluster';\n\ninterface IStatus {\n  [key: number]: { status: number };\n}\n\nexport interface IAllStatus {\n  hosts: IStatus;\n  services: { details: [{ host: string | number; component: string | number; status: number }]; status: number }[];\n  components: IStatus;\n  status: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService {\n  constructor(private api: ApiService) { }\n\n  getStatusInfo(id: number, hostcomponent_link: string) {\n    const statuses$ = this.getAllClusterStatus(id),\n      host_components$ = this.getHostComponents(hostcomponent_link);\n    return combineLatest([statuses$, host_components$]);\n  }\n\n  getHostComponents(url: string): Observable<HostComponent[]> {\n    return this.api\n      .get<{ host: Host[]; hc: HostComponent[]; component: IComponent[] }>(url)\n      .pipe(map((a) => a.hc.map((hc) => ({ ...hc, monitoring: a.component.find((b) => b.id === hc.component_id).monitoring }))));\n  }\n\n  getServiceComponentsByCluster(cluster: ICluster, service_id?: number): Observable<IComponent[]> {\n    return this.api.get<IComponent[]>(cluster.status_url).pipe(map((s) => s.filter((se) => (service_id ? se.service_id === service_id : true))));\n  }\n\n  getHostcomponentStatus(k: HostComponent, all: IAllStatus) {\n    const c = all.services[k.service_id]?.details.find((e) => +e.host === k.host_id && +e.component === k.component_id);\n    return c ? c.status : null;\n  }\n\n  getComponentsOnly(a: [IAllStatus, HostComponent[]], host_id?: number) {\n    const all: IAllStatus = a[0],\n      hc: HostComponent[] = a[1];\n    return hc\n      .filter((h) => (host_id ? host_id === h.host_id : true))\n      .reduce((acc, cur) => (!acc.some((c) => c.host_id === cur.host_id && c.service_id === cur.service_id) ? [...acc, cur] : acc), [])\n      .map((k) => ({ ...k, status: this.getHostcomponentStatus(k, all) }))\n      .filter((b) => b.status !== 0);\n  }\n\n  getClusterById(id: number) {\n    return this.api.getOne<ICluster>('cluster', id);\n  }\n\n  getAllClusterStatus(id: number) {\n    return this.api.get<IAllStatus>(`/status/api/v1/cluster/${id}/`);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStatus",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "hosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStatus",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "services",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IBroadcast",
            "id": "interface-IBroadcast-74d64d1aba32ec1d01c0f425b85ec663",
            "file": "src/app/core/services/channel.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nexport enum keyChannelStrim {\n  'scroll',\n  'notifying',\n  'load_complete'\n}\n\nexport interface IBroadcast<TKey = keyChannelStrim> {\n  key: TKey;\n  value: any;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChannelService<TKey = keyChannelStrim> {\n  private event = new Subject<IBroadcast<TKey>>();\n\n  next<T>(key: TKey, value: T) {\n    this.event.next({ key, value });\n  }\n\n  on<T = any>(key: TKey): Observable<T> {\n    return this.event.asObservable().pipe(\n      filter((e) => e.key === key),\n      map<IBroadcast<TKey>, T>((a) => a.value)\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TKey",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IBundle",
            "id": "interface-IBundle-14a63993c33f6fefcc2d321ed9d1c399",
            "file": "src/app/models/bundle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AdcmEntity } from './entity';\n\nexport interface IBundle extends AdcmEntity {\n  adcm_min_version: string;\n  date: string;\n  description: string;\n  edition: string;\n  hash: string;\n  license: string;\n  license_hash: any;\n  license_path: any;\n  license_url: string;\n  name: string;\n  update: string;\n  url: string;\n  version: string;\n}\n",
            "properties": [
                {
                    "name": "adcm_min_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "license",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "license_hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "license_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "license_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "update",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "AdcmEntity"
        },
        {
            "name": "ICanGroup",
            "id": "interface-ICanGroup-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 172
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICluster",
            "id": "interface-ICluster-02d66359bf89ff72a6106d0bf26393d7",
            "file": "src/app/models/cluster.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from '@app/core/types';\n\nexport interface ICluster extends BaseEntity {\n  bind: string;\n  edition: string;\n  host: string;\n  hostcomponent: string;\n  imports: string;\n  license: string;\n  name: string;\n  prototype: string;\n  service: string;\n  serviceprototype: string;\n  status_url: string;\n  upgradable: boolean;\n  upgrade: string;\n  group_config: string;\n}\n",
            "properties": [
                {
                    "name": "bind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "group_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hostcomponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "license",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "prototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "serviceprototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "status_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "upgradable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "upgrade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "BaseEntity"
        },
        {
            "name": "IClusterService",
            "id": "interface-IClusterService-f8899584d3dd5452c7417e7f5ca0f1fb",
            "file": "src/app/models/cluster-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IComponent } from './component';\nimport { BaseEntity } from '@app/core/types';\n\nexport interface IClusterService extends BaseEntity {\n  bind: string;\n  cluster_id: number;\n  component: string;\n  components: IComponent[];\n  imports: string;\n  monitoring: string;\n  prototype: string;\n  version: string;\n}\n",
            "properties": [
                {
                    "name": "bind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "cluster_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "imports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "monitoring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "prototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "BaseEntity"
        },
        {
            "name": "ICompare",
            "id": "interface-ICompare-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 157
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IComponent",
            "id": "interface-IComponent-a7191288c15d96f4122bd712c71ca797",
            "file": "src/app/models/component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AdcmEntity } from './entity';\n\nexport interface IComponent extends AdcmEntity {\n  action: string;\n  bound_to: any;\n  config: string;\n  constraint: Array<number | string>;\n  description: string;\n  monitoring: string;\n  prototype_id: number;\n  requires: any[];\n  status: number;\n  url: string;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "bound_to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "constraint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number | string>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "monitoring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "requires",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "AdcmEntity"
        },
        {
            "name": "IComponent",
            "id": "interface-IComponent-50993353cad3d133a2be743502171874-1",
            "file": "src/app/core/types/host-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HostComponent {\n  id: number;\n  /** host name */\n  host: string;\n  host_id: number;\n  /** component name */\n  component: string;\n  component_display_name: string;\n  component_id: number;\n  service_id: number;\n  service_display_name: string;\n  service_name: string;\n  service_version: string;\n  state: string;\n  url: string;\n  host_url: string;\n  status: number;\n  monitoring: 'passive' | 'active';\n}\n\n/**\n * A service component that may be installed on hosts in a cluster.\n */\nexport interface IComponent {\n  id: number;\n  prototype_id: number;\n  service_id: number;\n  service_name: string;\n  service_state: string;\n  name: string;\n  display_name: string;\n  status: number;\n  constraint: any;\n  monitoring?: 'passive' | 'active'; // status page\n  requires?: IRequires[];\n}\n\nexport interface IRequires {\n  // id: number;\n  prototype_id: number;\n  name: string;\n  display_name: string;\n  components?: IRequires[];\n}\n",
            "properties": [
                {
                    "name": "constraint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "monitoring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"passive\" | \"active\"",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "requires",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRequires[]",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "service_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "service_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "service_state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>A service component that may be installed on hosts in a cluster.</p>\n",
            "rawdescription": "\n\nA service component that may be installed on hosts in a cluster.\n",
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IComponent-1"
        },
        {
            "name": "IComposite",
            "id": "interface-IComposite-3c17dd4f9160f4d8db43f357e0ec37f1",
            "file": "src/app/shared/components/import/import.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { ChannelService } from '@app/core/services';\nimport { keyChannelStrim } from '@app/core/services';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { IExport, IImport } from '@app/core/types';\n\ninterface IComposite {\n  [key: string]: number;\n}\n\nconst trueOnly = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (control.value ? null : { trueOnly: !control.value });\n\nconst requiredObject = (): ValidatorFn => (control: AbstractControl): { [key: string]: boolean } | null =>\n  Object.keys(control.value).some((key) => control.value[key]) ? null : { requiered: true };\n\n@Component({\n  selector: 'app-exports',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <ng-container [formGroupName]=\"getKey({ import_id: import.id })\">\n        <div *ngFor=\"let item of import.exports\" class=\"component\">\n          <mat-checkbox [checked]=\"item.binded\" [formControlName]=\"getKey(item.id)\" (change)=\"change($event, item)\"> {{ item.obj_name }}</mat-checkbox>\n          <div>{{ item.bundle_name }} {{ item.bundle_version }}</div>\n        </div>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: ['.component {padding: 6px 8px; margin-bottom: 18px; font-size: 18px;}', '.component div {font-size: 12px;margin-left: 24px; margin-top: 4px;}'],\n})\nexport class ExportComponent {\n  @Input() form: FormGroup;\n  @Input() import: IImport;\n\n  getKey(id: IComposite) {\n    return JSON.stringify(id);\n  }\n\n  change(e: MatCheckboxChange, item: IExport) {\n    if (!this.import.multibind) {\n      const group = this.form.controls[this.getKey({ import_id: this.import.id })] as FormGroup;\n\n      if (e.checked)\n        Object.keys(group.controls)\n          .map((key) => {\n            group.controls[key].clearValidators();\n            return key;\n          })\n          .filter((key) => key !== this.getKey(item.id))\n          .map((key) => group.controls[key].setValue(false));\n      else if (this.import.required) {\n        Object.keys(group.controls).map((key) => {\n          const c = group.controls[key];\n          c.setValidators(trueOnly());\n          c.updateValueAndValidity();\n        });\n      }\n    }\n  }\n}\n\n@Component({\n  selector: 'app-import',\n  template: `\n    <p class=\"controls\" *ngIf=\"asIs\">\n      <button mat-raised-button color=\"accent\" (click)=\"go()\" [disabled]=\"form.invalid\">Save</button>\n    </p>\n    <div class=\"items\">\n      <div *ngFor=\"let item of data$ | async\" class=\"group\">\n        <h3>\n          {{ item.name }}\n          <mat-error *ngIf=\"hasError(item.id)\">This import is required!</mat-error>\n        </h3>\n        <app-exports [import]=\"item\" [form]=\"form\"></app-exports>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./import.component.scss'],\n})\nexport class ImportComponent implements OnInit {\n  form = new FormGroup({});\n  data$: Observable<IImport[]>;\n  asIs = false;\n\n  constructor(private current: ClusterService, private channel: ChannelService) {}\n\n  getKey(id: IComposite) {\n    return JSON.stringify(id);\n  }\n\n  hasError(id: number) {\n    return this.form.get(this.getKey({ import_id: id })).invalid;\n  }\n\n  ngOnInit() {\n    this.data$ = this.current.getImportData().pipe(\n      tap((a) => (this.asIs = !!a.length)),\n      tap((a) =>\n        a.map((i: IImport) => {\n          const validFlag = i.required && !i.multibind && i.exports.every((e) => !e.binded);\n          const exportGroup = i.exports.reduce((p, c) => {\n            const fc = {};\n            fc[`${this.getKey(c.id)}`] = new FormControl(c.binded, validFlag ? trueOnly() : null);\n            return { ...p, ...fc };\n          }, {});\n          const import_id = this.getKey({ import_id: i.id });\n          this.form.addControl(import_id, new FormGroup(exportGroup, i.required ? requiredObject() : null));\n        })\n      )\n    );\n  }\n\n  go() {\n    if (!this.form.invalid) {\n      let bind = [];\n      Object.keys(this.form.controls)\n        .filter((a) => Object.keys(this.form.controls[a].value).length)\n        .map((key) => {\n          const obj = JSON.parse(key);\n          const value = this.form.controls[key].value;\n          const items = Object.keys(value)\n            .filter((a) => value[a] === true)\n            .map((a) => ({ ...obj, export_id: JSON.parse(a) }));\n          bind = [...bind, ...items];\n        });\n      this.current.bindImport({ bind }).subscribe((_) => this.channel.next(keyChannelStrim.notifying, 'Successfully saved'));\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3c17dd4f9160f4d8db43f357e0ec37f1",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "IConfig",
            "id": "interface-IConfig-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "attr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfigAttr",
                    "optional": true,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFieldStack[]",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "obj_ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 99
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>The object for config for backend</p>\n",
            "rawdescription": "\n\nThe object for config for backend\n",
            "methods": []
        },
        {
            "name": "IConfigAttr",
            "id": "interface-IConfigAttr-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "custom_group_keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "group_keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 112
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-312293bd783a3bdacb9b6b1a75808e99",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\n[group: string]: { active: boolean };\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\n[group: string]: { active: boolean };\n}\n```\n",
            "methods": []
        },
        {
            "name": "IConfigListResponse",
            "id": "interface-IConfigListResponse-22030f6a941975f09576eee3ff38c576",
            "file": "src/app/shared/configuration/services/config.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CompareConfig, IConfig } from '../types';\nimport { map, switchMap } from 'rxjs/operators';\nimport { getRandomColor } from '@app/core/types';\nimport { ApiService } from '@app/core/api';\n\nexport interface IConfigResponse {\n  current: string;\n  history: string;\n  previous: string;\n}\n\nexport interface IConfigListResponse {\n  count: 1;\n  next: null;\n  previous: null;\n  results: IConfig[];\n}\n\n\nexport interface IConfigService {\n  getConfig(url: string): Observable<IConfig>;\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]>;\n\n  send(url: string, data: any): Observable<IConfig>;\n\n  changeVersion(id: number, url?: string): Observable<IConfig>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService implements IConfigService {\n  constructor(private api: ApiService) { }\n\n  changeVersion(id: number, url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}history/${id}/`);\n  }\n\n  getConfig(url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}current/`);\n  }\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]> {\n    return this.api.get<IConfigResponse>(url).pipe(\n      switchMap((config) => this.api.get<IConfigListResponse | IConfig[]>(config.history)),\n      // ToDo remove it when API will be consistent\n      map((value) => Array.isArray(value) ? value as IConfig[] : value.results),\n      map((h) => h.filter((a) => a.id !== currentVersionId).map((b) => ({\n        ...b,\n        color: getRandomColor()\n      }))));\n  }\n\n  send(url: string, data: any): Observable<IConfig> {\n    return this.api.post<IConfig>(`${url}history/`, data);\n  }\n}\n",
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "next",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "previous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IConfigResponse",
            "id": "interface-IConfigResponse-22030f6a941975f09576eee3ff38c576",
            "file": "src/app/shared/configuration/services/config.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CompareConfig, IConfig } from '../types';\nimport { map, switchMap } from 'rxjs/operators';\nimport { getRandomColor } from '@app/core/types';\nimport { ApiService } from '@app/core/api';\n\nexport interface IConfigResponse {\n  current: string;\n  history: string;\n  previous: string;\n}\n\nexport interface IConfigListResponse {\n  count: 1;\n  next: null;\n  previous: null;\n  results: IConfig[];\n}\n\n\nexport interface IConfigService {\n  getConfig(url: string): Observable<IConfig>;\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]>;\n\n  send(url: string, data: any): Observable<IConfig>;\n\n  changeVersion(id: number, url?: string): Observable<IConfig>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService implements IConfigService {\n  constructor(private api: ApiService) { }\n\n  changeVersion(id: number, url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}history/${id}/`);\n  }\n\n  getConfig(url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}current/`);\n  }\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]> {\n    return this.api.get<IConfigResponse>(url).pipe(\n      switchMap((config) => this.api.get<IConfigListResponse | IConfig[]>(config.history)),\n      // ToDo remove it when API will be consistent\n      map((value) => Array.isArray(value) ? value as IConfig[] : value.results),\n      map((h) => h.filter((a) => a.id !== currentVersionId).map((b) => ({\n        ...b,\n        color: getRandomColor()\n      }))));\n  }\n\n  send(url: string, data: any): Observable<IConfig> {\n    return this.api.post<IConfig>(`${url}history/`, data);\n  }\n}\n",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "history",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "previous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IConfigService",
            "id": "interface-IConfigService-22030f6a941975f09576eee3ff38c576",
            "file": "src/app/shared/configuration/services/config.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CompareConfig, IConfig } from '../types';\nimport { map, switchMap } from 'rxjs/operators';\nimport { getRandomColor } from '@app/core/types';\nimport { ApiService } from '@app/core/api';\n\nexport interface IConfigResponse {\n  current: string;\n  history: string;\n  previous: string;\n}\n\nexport interface IConfigListResponse {\n  count: 1;\n  next: null;\n  previous: null;\n  results: IConfig[];\n}\n\n\nexport interface IConfigService {\n  getConfig(url: string): Observable<IConfig>;\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]>;\n\n  send(url: string, data: any): Observable<IConfig>;\n\n  changeVersion(id: number, url?: string): Observable<IConfig>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService implements IConfigService {\n  constructor(private api: ApiService) { }\n\n  changeVersion(id: number, url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}history/${id}/`);\n  }\n\n  getConfig(url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}current/`);\n  }\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]> {\n    return this.api.get<IConfigResponse>(url).pipe(\n      switchMap((config) => this.api.get<IConfigListResponse | IConfig[]>(config.history)),\n      // ToDo remove it when API will be consistent\n      map((value) => Array.isArray(value) ? value as IConfig[] : value.results),\n      map((h) => h.filter((a) => a.id !== currentVersionId).map((b) => ({\n        ...b,\n        color: getRandomColor()\n      }))));\n  }\n\n  send(url: string, data: any): Observable<IConfig> {\n    return this.api.post<IConfig>(`${url}history/`, data);\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHistoryList",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CompareConfig[]>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IControl",
            "id": "interface-IControl-19b19308484527efdbe79aeeb38c9a3d",
            "file": "src/app/shared/configuration/scheme/scheme.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { isObject } from '@app/core/types/func';\n\nimport { FieldService } from '../services/field.service';\nimport { IFieldOptions, TNForm, TNReq, TValue } from '../types';\nimport { IYContainer, IYField } from '../yspec/yspec.service';\n\nexport interface IValue {\n  [key: string]: TValue;\n}\n\nexport interface IControl {\n  name: string;\n  type: TNForm;\n  rules: IYField | IYContainer | (IYField | IYContainer)[];\n  form: FormGroup | FormArray;\n  value: IValue | TValue;\n  parent: TNReq;\n}\n\n@Injectable()\nexport class SchemeService {\n  constructor(private service: FieldService) {}\n\n  emptyValidator() {\n    // const isEmptyArray = (v: any) => (Array.isArray(v) && v.length ? v.some((a) => isEmptyValue(a)) : false);\n    // const isEmptyObj = (v: any) => (isObject(v) && Object.keys(v).length ? Object.keys(v).some((a) => isEmptyValue(v[a])) : false);\n    const isEmptyValue = (v: any) => !v || (Array.isArray(v) && !v.length) || (isObject(v) && !Object.keys(v).length);\n    return (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (isEmptyValue(control.value) ? { isEmpty: true } : null);\n  }\n\n  setCurrentForm(type: TNForm, parent: FormGroup, field: IFieldOptions) {\n    const v = field.required ? this.emptyValidator()() : null;\n    const current = type === 'list' || type === 'dict' ? (type === 'list' ? new FormArray([], v) : new FormGroup({}, v)) : new FormControl('', v);\n    parent.setControl(field.name, current);\n    return current;\n  }\n\n  addControlsDict(name: string, source: TValue | IValue, currentForm: FormArray, rules: IYContainer[]): IControl {\n    const value = !source ? rules.reduce((p, c) => ({ ...p, [c.name]: '' }), {}) : source;\n\n    const checkValue = () => {\n      if (Array.isArray(rules)) {\n        if (Array.isArray(value)) {\n          return rules.some((a) => a.name === value[0]);\n        } else if (typeof value === 'object') {\n          return Object.keys(value).every((x) => rules.some((a) => a.name === x));\n        }\n      }\n    };\n\n    if (checkValue()) {\n      const form = new FormGroup({});\n      currentForm.push(form);\n      return { name, value, type: 'dict', rules, form, parent: 'list' };\n    }\n  }\n\n  addControls(name: string, value: TValue | IValue, currentForm: FormGroup | FormArray, opt: IYContainer | IYField | (IYContainer | IYField)[], type: TNReq): IControl {\n    const rules = Array.isArray(opt) ? opt.find((a) => a.name === name) : opt;\n    if (!rules) return;\n    let form = currentForm;\n    if (rules.type !== 'list' && rules.type !== 'dict') {\n      const { validator, controlType } = rules as IYField;\n      if (Array.isArray(currentForm.controls)) {\n        name = currentForm.controls.length.toString();\n        (currentForm as FormArray).push(new FormControl(value || '', this.service.setValidator({ validator, controlType })));\n      } else (currentForm as FormGroup).addControl(rules.name, new FormControl(rules.type !== 'bool' ? value || '' : value, this.service.setValidator({ validator, controlType })));\n    } else {\n      form = rules.type === 'list' ? new FormArray([]) : new FormGroup({});\n      (currentForm as FormGroup).addControl(rules.name, form);\n    }\n\n    return { name, value, type: rules.type, rules, form, parent: type };\n  }\n}\n",
            "properties": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup | FormArray",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TNReq",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYField | IYContainer | (IYField | IYContainer)[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TNForm",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IValue | TValue",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IDetails",
            "id": "interface-IDetails-39eefd83a4c8cabaa98c367c8d80a8a1",
            "file": "src/app/models/details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICluster } from './cluster';\nimport { IAction, JobObject, LogFile, TypeName } from '../core/types';\nimport { IIssues } from './issue';\nimport { AdcmTypedEntity } from './entity';\n\nexport interface IDetails {\n  parent?: ICluster;\n  typeName: TypeName;\n  id: number;\n  name: string;\n  upgradable: boolean;\n  upgrade: string;\n  status: string | number;\n  /** link to actionss */\n  action: string;\n  actions: IAction[];\n  issue: IIssues;\n  log_files?: LogFile[];\n  objects: JobObject[];\n  prototype_name: string;\n  prototype_display_name: string;\n  prototype_version: string;\n  provider_id: number;\n  bundle_id: number;\n  hostcomponent: string;\n  state: string;\n}\n\nexport interface INavItem {\n  id?: number;\n  title: string;\n  url: string;\n  issue?: string;\n  status?: number;\n  statusMessage?: string;\n  action?: () => void;\n}\n\nexport interface IStyledNavItem {\n  class?: string;\n  entity?: AdcmTypedEntity;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>link to actionss</p>\n",
                    "line": 15,
                    "rawdescription": "\nlink to actionss"
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "bundle_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hostcomponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIssues",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "log_files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LogFile[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "objects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobObject[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICluster",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "prototype_display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "prototype_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "prototype_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "provider_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "upgradable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "upgrade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IEMObject",
            "id": "interface-IEMObject-ca14b9fd2a8ab6897860f58a705daf52",
            "file": "src/app/core/store/sockets/socket.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeName } from '@app/core/types';\nimport {\n  Action,\n  createAction,\n  createFeatureSelector,\n  createReducer,\n  createSelector,\n  on,\n  props,\n  select\n} from '@ngrx/store';\nimport { pipe } from 'rxjs';\nimport { skip } from 'rxjs/operators';\n\n/**\n * Event Message Object dispatched from socket\n */\nexport interface IEMObject {\n  type: TypeName;\n  id: number;\n  details: {\n    id?: number;\n    type: string;\n    value: any;\n  };\n}\n\nexport type EntityEvent =\n  | 'add'\n  | 'add_job_log'\n  | 'create'\n  | 'delete'\n  | 'remove'\n  | 'change_config'\n  | 'change_state'\n  | 'change_status'\n  | 'change_job_status'\n  | 'change_hostcomponentmap'\n  | 'upgrade'\n  | 'concern';\n\nexport interface EventMessage {\n  event: EntityEvent;\n  object?: IEMObject;\n}\n\nexport type StatusType = 'open' | 'close' | 're-open';\n\nexport const socketInit = createAction('[Socket] Init');\nexport const socketOpen = createAction('[Socket] Open', props<{ status: StatusType }>());\nexport const socketClose = createAction('[Socket] Close', props<{ status: StatusType }>());\nexport const socketResponse = createAction('[Socket] Response', props<{ message: EventMessage }>());\nexport const clearMessages = createAction('[Socket] Clear messages');\n\nexport interface SocketState {\n  status: StatusType;\n  message: EventMessage;\n}\n\nconst initialState: SocketState = {\n  status: null,\n  message: null,\n};\n\nconst reducer = createReducer(\n  initialState,\n  on(socketInit, (state) => ({ ...state })),\n  on(socketOpen, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketClose, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketResponse, (state, { message }) => ({\n    ...state,\n    message,\n  })),\n  on(clearMessages, (state) => ({ ...state, message: null }))\n);\n\nexport function socketReducer(state: SocketState, action: Action) {\n  return reducer(state, action);\n}\n\nexport const getSocketState = createFeatureSelector<SocketState>('socket');\nexport const getConnectStatus = createSelector(getSocketState, (state: SocketState) => state.status);\nexport const getMessage = createSelector(getSocketState, (state) => state.message);\nexport const selectMessage = pipe(\n  select(getMessage),\n  skip(1),\n);\n",
            "properties": [
                {
                    "name": "details",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Event Message Object dispatched from socket</p>\n",
            "rawdescription": "\n\nEvent Message Object dispatched from socket\n",
            "methods": []
        },
        {
            "name": "IError",
            "id": "interface-IError-48bdc39db9b8bb2237d76b204a2e01dc",
            "file": "src/app/core/types/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmmitRow {\n  cmd: string;\n  row: any;\n  item?: any;\n}\n\nexport interface SelectOption {\n  id: number | string;\n  name: string;\n}\n\nexport interface IError {\n  code: string;\n  desc: string;\n  level: string;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IExport",
            "id": "interface-IExport-7a91966a6c85b1069e53ba02065de454",
            "file": "src/app/core/types/import-export.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IExport {\n  id: { [key: string]: number };\n  bind_id: number | null;\n  obj_name: string;\n  bundle_name: string;\n  bundle_version: string;\n  binded: boolean;\n}\n\n/** Model for import the configuration of cluster or service */\nexport interface IImport {\n  id: number;\n  name: string;\n  required: boolean;\n  multibind: boolean;\n  exports: IExport[];\n}\n",
            "properties": [
                {
                    "name": "bind_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "binded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "bundle_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "bundle_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "obj_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IFieldOptions",
            "id": "interface-IFieldOptions-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "compare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICompare[]",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "controlType",
                    "optional": false,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IValidator",
                    "optional": false,
                    "description": "",
                    "line": 177
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IFormOptions"
        },
        {
            "name": "IFieldStack",
            "id": "interface-IFieldStack-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "activatable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TValue",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "limits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILimits",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "read_only",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "subname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TNForm",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "ui_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUIoptions",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TValue",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Property config object from backend</p>\n",
            "rawdescription": "\n\nProperty config object from backend\n",
            "methods": []
        },
        {
            "name": "IFormOptions",
            "id": "interface-IFormOptions-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 162
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IFieldStack"
        },
        {
            "name": "IHost",
            "id": "interface-IHost-eb2188e7e91204407f369b63cefcc28d",
            "file": "src/app/models/host.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from '@app/core/types';\n\nexport interface IHost extends BaseEntity {\n  cluster_id?: number;\n  cluster_url?: string;\n  cluster_name?: string;\n  clusters: any[];\n  fqdn: string;\n  host_id: number;\n  host_url: string;\n  monitoring: string;\n  provider_id: number;\n  provider_name: number;\n  upgradable: boolean;\n}\n",
            "properties": [
                {
                    "name": "cluster_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "cluster_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cluster_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "clusters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fqdn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "host_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "host_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "monitoring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "provider_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "provider_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "upgradable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "BaseEntity"
        },
        {
            "name": "IImport",
            "id": "interface-IImport-7a91966a6c85b1069e53ba02065de454",
            "file": "src/app/core/types/import-export.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IExport {\n  id: { [key: string]: number };\n  bind_id: number | null;\n  obj_name: string;\n  bundle_name: string;\n  bundle_version: string;\n  binded: boolean;\n}\n\n/** Model for import the configuration of cluster or service */\nexport interface IImport {\n  id: number;\n  name: string;\n  required: boolean;\n  multibind: boolean;\n  exports: IExport[];\n}\n",
            "properties": [
                {
                    "name": "exports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExport[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "multibind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Model for import the configuration of cluster or service</p>\n",
            "rawdescription": "\nModel for import the configuration of cluster or service",
            "methods": []
        },
        {
            "name": "IIssueInfo",
            "id": "interface-IIssueInfo-aa24c13e7e5ce20ee9dbfb0bcd56e06c",
            "file": "src/app/shared/components/issue-info.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\nimport { ComponentData } from './tooltip/tooltip.service';\nimport { IIssues } from '@app/models/issue';\n\nexport interface IIssueInfo {\n  id: number;\n  issue: IIssues;\n  cluster_id?: number;\n  name?: string;\n  path?: string;\n}\n\n@Component({\n  selector: 'app-issue-info',\n  template: `\n    <div>{{ intro }}</div>\n    <div *ngFor=\"let name of namesIssue\">\n      <ng-container *ngIf=\"isArray(current.issue[name]); else item_tpl\">\n        <div class=\"item-step\">\n          {{ name }}:\n          <span *ngFor=\"let o of current.issue[name]\">\n            <b>{{ o.name }}</b> <app-issue-info [current]=\"o\" [path]=\"name\" [intro]=\"''\" [parent]=\"current\"></app-issue-info>\n          </span>\n        </div>\n      </ng-container>\n      <ng-template #item_tpl>\n        <a [routerLink]=\"[Path, current.id, IssuePatch[name] || name]\">{{ IssueNames[name] || name }}</a>\n      </ng-template>\n    </div>\n  `,\n  styles: ['a, .item-step { display: block; margin: 6px 0 8px 12px; white-space: nowrap;}'],\n})\nexport class IssueInfoComponent implements OnInit {\n\n  @Input() intro = 'Issues in:';\n  @Input() path: string;\n  @Input() current: IIssueInfo;\n  @Input() parent: IIssueInfo;\n\n  IssuePatch = {\n    required_service: 'service',\n    required_import: 'import',\n  };\n\n  IssueNames = {\n    config: 'Configuration',\n    host_component: 'Host - Components',\n    required_service: 'Required a service',\n    required_import: 'Required a import',\n  };\n\n  constructor(private componentData: ComponentData) {}\n\n  ngOnInit(): void {\n    this.current = this.current || this.componentData.current;\n    this.path = this.path || this.componentData.path;\n    this.current.path = this.path;\n    this.componentData.emitter.emit('Done');\n  }\n\n  get Path() {\n    return this.parent && this.parent.cluster_id !== this.current.id ? `${this.parent.path}/${this.parent.id}/${this.path}` : this.path;\n  }\n\n  isArray(issue: [] | false): boolean {\n    return Array.isArray(issue);\n  }\n\n  get namesIssue() {\n    return Object.keys(this.current.issue || {});\n  }\n}\n",
            "properties": [
                {
                    "name": "cluster_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIssues",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IIssues",
            "id": "interface-IIssues-0f92d1325e593762aa0c9547bc0fbddf",
            "file": "src/app/models/issue.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AdcmEntity } from '@app/models/entity';\n\nexport type IssueType = 'cluster' | 'service' | 'servicecomponent' | 'component';\n\nexport interface IssueEntity extends AdcmEntity {\n  issue: IIssues;\n}\n\nexport interface IIssues {\n  config?: boolean;\n  required_import?: boolean;\n  host_component?: false;\n  cluster?: IssueEntity[];\n  service?: IssueEntity[];\n}\n",
            "properties": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IssueEntity[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "host_component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "required_import",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IssueEntity[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ILimits",
            "id": "interface-ILimits-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "option",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "read_only",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "stateType[]",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IVariantSet",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "yspec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYspec",
                    "optional": true,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IListService",
            "id": "interface-IListService-3c12cd1c1b7e9c952df7e5ee215ece55",
            "file": "src/app/shared/components/list/list-service-token.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\nimport { TypeName } from '@app/core/types';\nimport { ParamMap } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ListResult } from '@app/models/list-result';\n\nexport const LIST_SERVICE_PROVIDER = new InjectionToken<IListService<any>>('ListService');\n\nexport interface ListInstance {\n  typeName: TypeName;\n  columns: string[];\n}\n\nexport interface IListService<T> {\n  current: ListInstance;\n\n  initInstance(typeName?: TypeName): ListInstance;\n\n  getList(p: ParamMap, typeName?: string): Observable<ListResult<T>>\n\n  delete(row: T): Observable<Object>;\n}\n",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListInstance",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListResult<T>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initInstance",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ListInstance",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IMasterData",
            "id": "interface-IMasterData-4cd1f32b2d3db5ce944b66105c7f592e",
            "file": "src/app/shared/components/actions/master/master.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApiService } from '@app/core/api';\nimport { IAction } from '@app/core/types';\nimport { FieldService } from '@app/shared/configuration/services/field.service';\nimport { ConfigFieldsComponent } from '@app/shared/configuration/fields/fields.component';\nimport { ServiceHostComponent } from '@app/shared/host-components-map/services2hosts/service-host.component';\nimport { Post } from '@app/shared/host-components-map/types';\nimport { IConfigAttr } from '@app/shared/configuration/types';\nimport { IOutput } from '@app/shared/configuration/services/field.service';\n\nexport interface IValue {\n  config?: ConfigFieldsComponent;\n  hostmap?: ServiceHostComponent;\n}\n\nexport enum whatShow {\n  none = 'none',\n  config = 'config',\n  hostMap = 'hostmap',\n  stepper = 'stepper',\n}\n\nexport interface IMasterData {\n  attr: IConfigAttr;\n  config: IOutput;\n  hc: Post[];\n  verbose?: boolean;\n}\n\n@Injectable()\nexport class MasterService {\n  constructor(private api: ApiService, private configService: FieldService) {}\n\n  spotShow(action: IAction): whatShow {\n    const config = action.config?.config?.length;\n    const hm = action.hostcomponentmap?.length;\n    return config ? (hm ? whatShow.stepper : whatShow.config) : hm ? whatShow.hostMap : whatShow.none;\n  }\n\n  parseData(v: IValue): IMasterData {\n    const getData = (attr: IConfigAttr, c: ConfigFieldsComponent, h: ServiceHostComponent) => {\n      const config = c ? this.configService.parseValue(c.form.value, c.rawConfig.config) : undefined;\n      const hc = h?.statePost.data;\n      return { attr, config, hc };\n    };\n    return v ? getData(v.config?.attr, v.config, v.hostmap) : undefined;\n  }\n\n  send(url: string, value: { config: any; hc: Post[] }) {\n    return this.api.post(url, value);\n  }\n}\n",
            "properties": [
                {
                    "name": "attr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfigAttr",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IOutput",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "hc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "verbose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IMPlaceholder",
            "id": "interface-IMPlaceholder-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-e0274bfcdeb483b95ff4b27fb1e2b7af",
                    "args": [
                        {
                            "name": "itemKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IMPlaceholderItem",
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "IMPlaceholderActionRun",
            "id": "interface-IMPlaceholderActionRun-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.ComponentActionRun",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "IMPlaceholderCluster",
            "id": "interface-IMPlaceholderCluster-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.Cluster",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "IMPlaceholderComponent",
            "id": "interface-IMPlaceholderComponent-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.Component",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "IMPlaceholderComponentConfig",
            "id": "interface-IMPlaceholderComponentConfig-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.ComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "IMPlaceholderHost",
            "id": "interface-IMPlaceholderHost-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.Host",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "IMPlaceholderHostProvider",
            "id": "interface-IMPlaceholderHostProvider-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.HostProvider",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "IMPlaceholderItem",
            "id": "interface-IMPlaceholderItem-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IMPlaceholderJob",
            "id": "interface-IMPlaceholderJob-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.Job",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "IMPlaceholderService",
            "id": "interface-IMPlaceholderService-e0274bfcdeb483b95ff4b27fb1e2b7af",
            "file": "src/app/models/concern/concern-reason.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum ConcernEventType {\n  Cluster = 'cluster-concerns',\n  Service = 'cluster-object-concerns',\n  Host = 'host-concerns',\n  HostProvider = 'host-provider-concerns',\n  ServiceComponent = 'service-component-concerns',\n}\n\nexport enum IMPlaceholderItemType {\n  ComponentActionRun = 'component_action_run',\n  ComponentConfig = 'component_config',\n  Cluster = 'cluster',\n  Service = 'service',\n  Component = 'component',\n  HostProvider = 'provider',\n  Host = 'host',\n  Job = 'job',\n}\n\nexport interface IMPlaceholderItem {\n  type?: IMPlaceholderItemType;\n  name: string;\n  ids: { [id: string]: number } | number;\n}\n\nexport interface IMPlaceholderActionRun extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentActionRun;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n    action: number;\n  };\n}\n\nexport interface IMPlaceholderComponentConfig extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.ComponentConfig;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderCluster extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Cluster;\n  ids: {\n    cluster: number;\n  };\n}\n\nexport interface IMPlaceholderService extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Service;\n  ids: {\n    cluster: number;\n    service: number;\n  };\n}\n\nexport interface IMPlaceholderComponent extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Component;\n  ids: {\n    cluster: number;\n    service: number;\n    component: number;\n  };\n}\n\nexport interface IMPlaceholderHostProvider extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.HostProvider;\n  ids: {\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderHost extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Host;\n  ids: {\n    host: number;\n    provider: number;\n  };\n}\n\nexport interface IMPlaceholderJob extends IMPlaceholderItem {\n  type: IMPlaceholderItemType.Job;\n  ids: number;\n}\n\nexport interface IMPlaceholder {\n  [itemKey: string]: IMPlaceholderItem;\n}\n\nexport interface ConcernReason {\n  message: string;\n  placeholder: IMPlaceholder;\n}\n",
            "properties": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMPlaceholderItemType.Service",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IMPlaceholderItem"
        },
        {
            "name": "INavItem",
            "id": "interface-INavItem-39eefd83a4c8cabaa98c367c8d80a8a1",
            "file": "src/app/models/details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICluster } from './cluster';\nimport { IAction, JobObject, LogFile, TypeName } from '../core/types';\nimport { IIssues } from './issue';\nimport { AdcmTypedEntity } from './entity';\n\nexport interface IDetails {\n  parent?: ICluster;\n  typeName: TypeName;\n  id: number;\n  name: string;\n  upgradable: boolean;\n  upgrade: string;\n  status: string | number;\n  /** link to actionss */\n  action: string;\n  actions: IAction[];\n  issue: IIssues;\n  log_files?: LogFile[];\n  objects: JobObject[];\n  prototype_name: string;\n  prototype_display_name: string;\n  prototype_version: string;\n  provider_id: number;\n  bundle_id: number;\n  hostcomponent: string;\n  state: string;\n}\n\nexport interface INavItem {\n  id?: number;\n  title: string;\n  url: string;\n  issue?: string;\n  status?: number;\n  statusMessage?: string;\n  action?: () => void;\n}\n\nexport interface IStyledNavItem {\n  class?: string;\n  entity?: AdcmTypedEntity;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "statusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IOutput",
            "id": "interface-IOutput-d78cb6aa832432b3e07848b2b3bbd66d",
            "file": "src/app/shared/configuration/services/field.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { isEmptyObject } from '@app/core/types';\n\nimport { ISearchParam } from '../main/main.service';\nimport {\n  controlType,\n  IConfig,\n  IConfigAttr,\n  IFieldOptions,\n  IFieldStack,\n  ILimits,\n  IPanelOptions,\n  IValidator,\n  resultTypes,\n  TNBase,\n  TNForm\n} from '../types';\nimport { AttributeService } from '@app/shared/configuration/attributes/attribute.service';\n\nexport type TFormOptions = IFieldOptions | IPanelOptions;\n\nexport interface IOutput {\n  [key: string]: resultTypes;\n}\n\nexport interface ISource {\n  name: string;\n  subname: string;\n  type: TNForm;\n  read_only: boolean;\n  limits?: ILimits;\n  value: any;\n}\n\nexport interface IToolsEvent {\n  name: string;\n  conditions?: { advanced: boolean; search: string } | boolean;\n}\n\nconst isVisibleField = (a: TFormOptions) => !a.ui_options?.invisible;\nconst isAdvancedField = (a: TFormOptions) => isVisibleField(a) && a.ui_options?.advanced;\nconst isHidden = (a: IFieldStack) => !!(a.ui_options?.invisible || a.ui_options?.advanced);\n\nconst typeToControl: Partial<{ [key in TNForm | controlType]: controlType }> = {\n  bool: 'boolean',\n  int: 'textbox',\n  integer: 'textbox',\n  float: 'textbox',\n  string: 'textbox',\n  file: 'textarea',\n  text: 'textarea',\n};\n\nexport const getControlType = (t: TNForm): controlType => typeToControl[t] || (t as controlType);\n\nconst intPattern = () => new RegExp(/^[-]?\\d+$/);\nconst patternFn = {\n  integer: intPattern,\n  int: intPattern,\n  float: () => new RegExp(/^[-]?[0-9]+(\\.[0-9]+)?$/),\n};\n\nexport const getPattern = (t: TNForm): RegExp => (patternFn[t] ? patternFn[t]() : null);\n\nconst fn = {\n  boolean: (v: boolean | null, d: boolean | null, r: boolean): boolean | null => (String(v) === 'true' || String(v) === 'false' || String(v) === 'null' ? v : r ? d : null),\n  json: (v: string): string => (v === null ? '' : JSON.stringify(v, undefined, 4)),\n  map: (v: object, d: object): object => (!v ? d : v),\n  list: (v: string[], d: string[]): string[] => (!v ? d : v),\n  structure: (v: any): any => v,\n};\n\nexport const getValue = (t: TNForm) => {\n  const def = (value: number | string) => (value === null || value === undefined ? '' : String(value));\n  return fn[t] ? fn[t] : def;\n};\n\nexport const getKey = (name: string, subname: string): string => (subname ? `${subname}/${name}` : name);\n\nexport const getValidator = (required: boolean, min: number, max: number, type: TNForm) => ({\n  required,\n  min,\n  max,\n  pattern: getPattern(type),\n});\n\nconst getField = (item: IFieldStack): IFieldOptions => {\n  return {\n    ...item,\n    key: getKey(item.name, item.subname),\n    value: getValue(item.type)(item.value, item.default, item.required),\n    validator: getValidator(item.required, item.limits?.min, item.limits?.max, item.type),\n    controlType: getControlType(item.type),\n    hidden: item.name === '__main_info' || isHidden(item),\n    compare: []\n  };\n};\n\nconst fo = (n: string) => (b: IFieldStack) => b.type !== 'group' && b.subname && b.name === n;\nconst isActive = (a: IConfigAttr, n: string) => a[n]?.active;\nexport const getOptions = (a: IFieldStack, d: IConfig) =>\n  d.config\n    .filter(fo(a.name))\n    .map((f) => getField(f))\n    // switch off validation for field if !(activatable: true && active: false) - line: 146\n    .map((c) => ({ ...c, name: c.subname, activatable: a.activatable && !isActive(d.attr, a.name) }));\n\nconst getPanel = (a: IFieldStack, d: IConfig): IPanelOptions => ({\n  ...a,\n  hidden: isHidden(a),\n  active: a.activatable ? isActive(d.attr, a.name) : true,\n  options: getOptions(a, d),\n});\n\nconst handleTree = (c: ISearchParam): ((a: TFormOptions) => TFormOptions) => (a: TFormOptions): TFormOptions => {\n  if ('options' in a) {\n    a.options = a.options.map(handleTree(c));\n    if (c.search) a.hidden = a.options.filter((b) => !b.hidden).length === 0;\n    else a.hidden = isAdvancedField(a) ? !c.advanced : false;\n  } else if (isVisibleField(a)) {\n    a.hidden = !(a.display_name.toLowerCase().includes(c.search.toLowerCase()) || String(a.value).toLocaleLowerCase().includes(c.search.toLocaleLowerCase()));\n    if (!a.hidden && isAdvancedField(a)) a.hidden = !c.advanced;\n  }\n  return a;\n};\n\nconst findAttrValue = <T extends object>(obj: T, key: string): boolean => {\n  let value;\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    if (typeof obj[i] === 'object') {\n      value = findAttrValue<Object>(obj[i], key);\n    } else if (i === key) {\n      value = obj[i];\n    }\n  }\n  return value;\n};\n\n@Injectable()\nexport class FieldService {\n  attributesService: AttributeService | undefined;\n\n  constructor(public fb: FormBuilder) {}\n\n  /**\n   * Parse and prepare source data from backend\n   */\n  public getPanels(data: IConfig): TFormOptions[] {\n    return data?.config\n      ?.filter((a) => a.name !== '__main_info')\n      .reduce((p, c) => {\n        if (c.subname) return p;\n        if (c.type !== 'group') return [...p, getField(c)];\n        else return [...p, getPanel(c, data)];\n      }, []);\n  }\n\n  /**\n   * Generate FormGroup\n   * @param options\n   */\n  public toFormGroup(options: TFormOptions[] = []): FormGroup {\n    const check = (a: TFormOptions): boolean =>\n      'options' in a\n        ? a.activatable\n          ? isVisibleField(a) // if group.activatable - only visible\n          : isVisibleField(a) && !a.read_only // else visible an not read_only\n            ? a.options.some((b) => check(b)) // check inner fields\n            : false\n        : isVisibleField(a) && !a.read_only; // for fields in group\n\n    return this.fb.group(\n      options.reduce((p, c) => this.runByTree(c, p), {}),\n      {\n        validator: () => (options.filter(check).length === 0 ? { error: 'Form is empty' } : null),\n      }\n    );\n  }\n\n  // TODO:\n  private runByTree(field: TFormOptions, controls: { [key: string]: {} }): { [key: string]: {} } {\n    if ('options' in field) {\n      controls[field.name] = this.fb.group(\n        field.options.reduce((p, a) => {\n          if ('options' in a) this.fb.group(this.runByTree(a, p));\n          else this.fillForm(a, p);\n          return p;\n        }, {})\n      );\n      return controls;\n    } else {\n      return this.fillForm(field, controls);\n    }\n  }\n\n  private fillForm(field: IFieldOptions, controls: {}) {\n    const name = field.subname || field.name;\n    controls[name] = this.fb.control(field.value, field.activatable ? [] : this.setValidator(field));\n    return controls;\n  }\n\n  /**\n   * External use (scheme.service) to set validator for FormControl by type\n   * @param field Partial<FieldOptions>{ ValidatorInfo, controlType }\n   * @param controlToCompare\n   */\n  public setValidator(field: { validator: IValidator; controlType: controlType }, controlToCompare?: AbstractControl) {\n    const v: ValidatorFn[] = [];\n\n    if (field.validator.required) v.push(Validators.required);\n    if (field.validator.pattern) v.push(Validators.pattern(field.validator.pattern));\n    //if (field.validator.max !== null)\n    v.push(Validators.max(field.validator.max));\n    //if (field.validator.min !== null)\n    v.push(Validators.min(field.validator.min));\n\n    if (field.controlType === 'password') {\n      const passwordConfirm = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (controlToCompare && controlToCompare.value !== control.value) return { notEqual: true };\n        return null;\n      };\n      v.push(passwordConfirm());\n    }\n\n    if (field.controlType === 'json') {\n      const jsonParse = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (control.value) {\n          try {\n            JSON.parse(control.value);\n            return null;\n          } catch (e) {\n            return { jsonParseError: { value: control.value } };\n          }\n        } else return null;\n      };\n\n      v.push(jsonParse());\n    }\n\n    if (field.controlType === 'map') {\n      const parseKey = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null =>\n        control.value && Object.keys(control.value).length && Object.keys(control.value).some((a) => !a) ? { parseKey: true } : null;\n      v.push(parseKey());\n    }\n    return v;\n  }\n\n  /**\n   * Filter by group and all fields\n   */\n  public filterApply(options: TFormOptions[], c: ISearchParam): TFormOptions[] {\n    return options.filter((a) => isVisibleField(a)).map(handleTree(c));\n  }\n\n  /**\n   * Output form, cast to source type\n   */\n  public parseValue(output: IOutput, source: ISource[]): IOutput {\n    const findField = (name: string, p?: string): Partial<IFieldStack> => source.find((a) => (p ? a.name === p && a.subname === name : a.name === name));\n\n    const runYspecParse = (v: any, f: Partial<IFieldOptions>) => ((!v || !Object.keys(v).length) && !f.value ? f.value : this.runYspec(v, f.limits.rules));\n\n    const runParse = (v: IOutput, parentName?: string): IOutput => {\n      const runByValue = (p: IOutput, c: string) => {\n        const checkType = (data: resultTypes | IOutput, field: Partial<IFieldStack>): resultTypes => {\n          const { type } = field;\n          if (type === 'structure') return runYspecParse(data, field);\n          else if (type === 'group') return this.checkValue(runParse(data as IOutput, field.name), type);\n          else return this.checkValue(data, type);\n        };\n\n        const f = findField(c, parentName);\n        if (f) {\n          const result = checkType(v[c], f);\n          return f.type !== 'group' || result ? { ...p, [c]: result } : p;\n        }\n        return p;\n      };\n\n      return Object.keys(v).reduce(runByValue, {});\n    };\n\n    const __main_info = findField('__main_info');\n    return runParse(__main_info?.required ? { ...output, __main_info: __main_info.value } : { ...output });\n  }\n\n  private runYspec(value: resultTypes, rules: any) {\n    switch (rules?.type) {\n      case 'list': {\n        return (value as Array<TNBase>).filter((a) => !!a).map((a) => this.runYspec(a, rules.options));\n      }\n      case 'dict': {\n        return Object.keys(value).reduce((p, c) => {\n          const r = rules.options.find((b: any) => b.name === c);\n          const v = r ? this.runYspec(value[c], r) : null;\n          return v !== null ? { ...p, [c]: v } : { ...p };\n        }, {});\n      }\n      default: {\n        return this.checkValue(value, rules?.type);\n      }\n    }\n  }\n\n  checkValue(value: resultTypes, type: TNForm): resultTypes {\n    if ((value === '' || isEmptyObject(value)) && type === 'map') return {};\n\n    if ((value === '' || isEmptyObject(value)) && type === 'list') return [];\n\n    if (value === '' || value === null || isEmptyObject(value)) return null;\n\n    if (typeof value === 'boolean') return value;\n    else if (typeof value === 'string')\n      switch (type) {\n        case 'option':\n          return !isNaN(+value) ? parseInt(value, 10) : value;\n        case 'integer':\n        case 'int':\n          return parseInt(value, 10);\n        case 'float':\n          return parseFloat(value);\n        case 'json':\n          return JSON.parse(value);\n      }\n    else\n      switch (type) {\n        case 'map':\n          return Object.keys(value)\n            .filter((a) => !!a)\n            .reduce((p, c) => ({ ...p, [c]: value[c] }), {});\n\n        case 'list':\n          return Array.isArray(value) ? (value as Array<string>).filter((a) => !!a) : null;\n      }\n\n    return value;\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-d78cb6aa832432b3e07848b2b3bbd66d",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "resultTypes",
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "IPanelOptions",
            "id": "interface-IPanelOptions-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TFormOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 167
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IFormOptions"
        },
        {
            "name": "IProfile",
            "id": "interface-IProfile-c3fd6c62e5104c98cb26311a52248a16",
            "file": "src/app/core/store/profile/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { Observable, throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { AuthService } from '@app/core/auth/auth.service';\n\nconst PROFILE_LINK = `${environment.apiRoot}profile/`;\n\nexport interface LastViewedTask {\n  id: number;\n}\n\nexport interface IProfile {\n  textarea: { [key: string]: number };\n  settingsSaved: boolean;\n  lastViewedTask?: LastViewedTask;\n}\n\nexport interface IUser {\n  username: string;\n  change_password: string;\n  profile: IProfile;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private user: IUser;\n\n  constructor(private http: HttpClient, private auth: AuthService) {}\n\n  public getProfile(): Observable<IUser> {\n    const source$ = this.http.get<IUser>(`${PROFILE_LINK}${this.auth.auth.login}/`).pipe(\n      map(user => (!user.profile ? { ...user, profile: this.emptyProfile() } : user)),\n      tap(user => (this.user = user))\n    );\n    return this.auth.auth.login ? source$ : throwError('Not authorized!');\n  }\n\n  emptyProfile() {\n    return { textarea: {}, settingsSaved: false };\n  }\n\n  setUser(key: string, value: string | boolean | { [key: string]: number }) {\n    const profile = { ...this.user.profile };\n    profile[key] = value;\n    this.user = { ...this.user, profile };\n  }\n\n  setProfile(): Observable<IUser> {\n    const { username, profile } = { ...this.user };\n    return this.http.patch<IUser>(`${PROFILE_LINK}${this.user.username}/`, { username, profile });\n  }\n\n  setTextareaProfile(data: { key: string; value: number }): Observable<IUser> {\n    const textarea = { ...this.user.profile.textarea };\n    textarea[data.key] = data.value;\n    this.setUser('textarea', textarea);\n    return this.setProfile();\n  }\n\n  setLastViewedTask(id: number): Observable<IUser> {\n    this.setUser('lastViewedTask', { id });\n    return this.setProfile();\n  }\n\n  addUser(user: { username: string; profile: string }): Observable<IUser> {\n    return this.http.post<IUser>(`${PROFILE_LINK}`, user);\n  }\n\n  setPassword(password: string) {\n    return this.http.patch(this.user.change_password, { password });\n  }\n}\n",
            "properties": [
                {
                    "name": "lastViewedTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LastViewedTask",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "settingsSaved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "textarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRawHosComponent",
            "id": "interface-IRawHosComponent-a875bd9ec8a9450bd7b364337c366dfb",
            "file": "src/app/shared/host-components-map/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IComponent, Host, IRequires } from '@app/core/types';\n\nexport type ActionParam = 'add' | 'remove';\nexport type TConstraintValue = number | '+' | 'odd' | 'depend';\nexport type TConstraint = TConstraintValue[];\n\nexport interface IRawHosComponent {\n  component: IComponent[];\n  host: Partial<Host>[];\n  hc: Post[];\n}\n\nexport interface Post {\n  id?: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class Post implements Post {\n  constructor(public host_id: number, public service_id: number, public component_id: number, public id?: number) {}\n}\n\n/**\n *```\n  {\n    id: number;\n    name: string;\n    relations: Tile[] = [];\n    isSelected?: boolean;\n    isLink?: boolean;\n    limit?: Constraint;\n    disabled: boolean;\n    actions?: ActionParam[];\n    color?: 'none' | 'white' | 'gray' | 'yellow';\n    notification?: string;\n  }\n ```\n * @class Tile\n */\nexport class Tile {\n  id: number;\n  name: string;\n  relations: Tile[] = [];\n  isSelected?: boolean;\n  isLink?: boolean;\n  limit?: TConstraint;\n  disabled: boolean;\n  actions?: ActionParam[];\n  color?: 'none' | 'white' | 'gray' | 'yellow';\n  notification?: string;\n}\n\nexport class HostTile extends Tile {\n  constructor(rawHost: Partial<Host>) {\n    super();\n    this.id = rawHost.id;\n    this.name = rawHost.fqdn;\n  }\n}\n\nexport class CompTile extends Tile {\n  prototype_id: number;\n  service_id: number;\n  component: string;\n  requires: IRequires[];\n  constructor(rawComponent: IComponent, public actions?: ActionParam[]) {\n    super();\n    this.id = rawComponent.id;\n    this.service_id = rawComponent.service_id;\n    this.component = `${rawComponent.service_name}/${rawComponent.name}`;\n    this.name = rawComponent.display_name;\n    this.disabled = rawComponent.service_state !== 'created';\n    this.limit = rawComponent.constraint;\n    this.requires = rawComponent.requires;\n    this.prototype_id = rawComponent.prototype_id;\n  }\n}\n\n/**\n * State user selection\n *\n * @class StatePost\n */\nexport class StatePost {\n  private _data: Post[];\n\n  constructor() {\n    this._data = [];\n  }\n\n  private _compare(a: Post, b: Post) {\n    return a.host_id === b.host_id && a.service_id === b.service_id && a.component_id === b.component_id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  add(post: Post) {\n    const f = this._data.find((p) => this._compare(p, post));\n    if (!f) this._data.push(post);\n    else if (!f.id) f.id = post.id;\n  }\n\n  delete(post: Post) {\n    this._data = this._data.filter((p) => !this._compare(p, post));\n  }\n\n  clear() {\n    this._data = [];\n  }\n\n  update(data: Post[]) {\n    data.forEach((a) => this.add(new Post(a.host_id, a.service_id, a.component_id, a.id)));\n  }\n}\n/**\n *```\n  {\n    link: Tile;\n    linkSource: Tile[];\n    selected: Tile;\n  }\n  *```\n */\nexport interface IStream {\n  link: Tile;\n  linkSource: Tile[];\n  selected: Tile;\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Host>[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRequires",
            "id": "interface-IRequires-50993353cad3d133a2be743502171874",
            "file": "src/app/core/types/host-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HostComponent {\n  id: number;\n  /** host name */\n  host: string;\n  host_id: number;\n  /** component name */\n  component: string;\n  component_display_name: string;\n  component_id: number;\n  service_id: number;\n  service_display_name: string;\n  service_name: string;\n  service_version: string;\n  state: string;\n  url: string;\n  host_url: string;\n  status: number;\n  monitoring: 'passive' | 'active';\n}\n\n/**\n * A service component that may be installed on hosts in a cluster.\n */\nexport interface IComponent {\n  id: number;\n  prototype_id: number;\n  service_id: number;\n  service_name: string;\n  service_state: string;\n  name: string;\n  display_name: string;\n  status: number;\n  constraint: any;\n  monitoring?: 'passive' | 'active'; // status page\n  requires?: IRequires[];\n}\n\nexport interface IRequires {\n  // id: number;\n  prototype_id: number;\n  name: string;\n  display_name: string;\n  components?: IRequires[];\n}\n",
            "properties": [
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRequires[]",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRoot",
            "id": "interface-IRoot-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-0cbb246102564bc134c66dc61b2dabe6",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\n[key: string]: string;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\n[key: string]: string;\n}\n```\n",
            "methods": []
        },
        {
            "name": "IRowHost",
            "id": "interface-IRowHost-8686b2996dc23fd6b135de183a41f1f3",
            "file": "src/app/shared/components/list/base-list.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MatDialog } from '@angular/material/dialog';\nimport { ParamMap } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { filter, mergeMap, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport { IListResult } from '@adwp-ui/widgets';\nimport { Sort } from '@angular/material/sort';\nimport { Observable, Subject } from 'rxjs';\n\nimport { clearMessages, EventMessage, getMessage, SocketState } from '@app/core/store';\nimport { Bundle, EmmitRow, Entities, Host as AdcmHost, TypeName } from '@app/core/types';\nimport { DialogComponent } from '@app/shared/components';\nimport { ListResult } from '@app/models/list-result';\nimport { ListService } from './list.service';\nimport { ListDirective } from '@app/abstract-directives/list.directive';\nimport { ICluster } from '@app/models/cluster';\n\n\nconst TemporaryEntityNameConverter = (currentName: Partial<TypeName>): string => {\n\n  if (currentName === 'group_config') return 'group-config';\n  if (currentName === 'group_config_hosts') return 'group-config-hosts';\n\n  return currentName;\n};\n\ninterface IRowHost extends AdcmHost {\n  clusters: Partial<ICluster>[];\n  page: number;\n}\n\nexport class BaseListDirective {\n\n  socket$: Observable<any>;\n  destroy$ = new Subject();\n\n  row: Entities;\n  listParams: ParamMap;\n  limit = 10;\n  typeName: TypeName;\n\n  reload: (result: ListResult<Entities>) => void;\n\n  constructor(\n    protected parent: ListDirective,\n    protected service: ListService,\n    protected store: Store<SocketState>,\n  ) {}\n\n  takeUntil<T>() {\n    return takeUntil<T>(this.destroy$);\n  }\n\n  startListenSocket(): void {\n    this.socket$.pipe(tap(m => this.socketListener(m))).subscribe();\n  }\n\n  initSocket() {\n    this.socket$ = this.store.pipe(\n      this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object));\n  }\n\n  initColumns() {\n    this.parent.columns = this.service.initInstance(this.typeName).columns;\n  }\n\n  initListItemEvent() {\n    this.parent.listItemEvt\n      .pipe(this.takeUntil())\n      .subscribe({ next: (event: EmmitRow) => this.listEvents(event) });\n  }\n\n  calcSort(ordering: string): Sort {\n    let sort: Sort;\n    if (ordering) {\n      sort = {\n        direction: ordering[0] === '-' ? 'desc' : 'asc',\n        active: ordering[0] === '-' ? ordering.substr(1) : ordering,\n      };\n    }\n\n    return sort;\n  }\n\n  routeListener(limit: number, page: number, ordering: string, params: ParamMap) {\n\n    this.parent.paginator.pageSize = limit;\n    if (page === 0) {\n      this.parent.paginator.firstPage();\n    } else {\n      this.parent.paginator.pageIndex = page;\n    }\n    if (ordering && !this.parent.sort.active) {\n      this.parent.sort.direction = ordering[0] === '-' ? 'desc' : 'asc';\n      this.parent.sort.active = ordering[0] === '-' ? ordering.substr(1) : ordering;\n      this.parent.sortParam = ordering;\n    }\n\n    this.listParams = params;\n    this.refresh();\n  }\n\n  initRouteListener() {\n    this.parent.route.paramMap\n      .pipe(\n        this.takeUntil(),\n        filter((p) => this.checkParam(p))\n      )\n      .subscribe((p) => this.routeListener(+p.get('limit') || 10, +p.get('page'), p.get('ordering'), p));\n  }\n\n  init(): void {\n    this.initSocket();\n    this.initColumns();\n    this.initListItemEvent();\n    this.initRouteListener();\n    this.startListenSocket();\n  }\n\n  destroy() {\n    this.parent.listItemEvt.complete();\n\n    this.destroy$.next();\n    this.destroy$.complete();\n\n    this.store.dispatch(clearMessages());\n  }\n\n  checkParam(p: ParamMap): boolean {\n    const listParamStr = localStorage.getItem('list:param');\n    if (!p.keys.length && listParamStr) {\n      const json = JSON.parse(listParamStr);\n      if (json[this.typeName]) {\n        this.parent.router.navigate(['./', json[this.typeName]], { relativeTo: this.parent.route });\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkType(typeName: string, referenceTypeName: TypeName): boolean {\n    return (referenceTypeName ? referenceTypeName.split('2')[0] : referenceTypeName) === typeName;\n  }\n\n  socketListener(m: EventMessage): void {\n    const stype = (x: string) => `${m.object.type}${m.object.details.type ? `2${m.object.details.type}` : ''}` === x;\n\n    const checkUpgradable = () => (m.event === 'create' || m.event === 'delete') && m.object.type === 'bundle' && this.typeName === 'cluster';\n    const changeList = (name?: string) => stype(name ?? this.typeName) && (m.event === 'create' || m.event === 'delete' || m.event === 'add' || m.event === 'remove');\n    const createHostPro = () => stype('host2provider') && m.event === 'create';\n    const jobComplete = () => (m.event === 'change_job_status') && m.object.type === 'task' && m.object.details.value === 'success';\n    const rewriteRow = (row: Entities) => this.service.checkItem(row).subscribe((item) => Object.keys(row).map((a) => (row[a] = item[a])));\n\n    if (checkUpgradable() || changeList(TemporaryEntityNameConverter(this.typeName)) || createHostPro() || jobComplete()) {\n      this.refresh(m.object.id);\n      return;\n    }\n\n    // events for the row of list\n    if (this.parent.data.data.length) {\n      const row = this.parent.data.data.find((a) => a.id === m.object.id);\n      if (!row) return;\n\n      if (m.event === 'add' && stype('host2cluster')) rewriteRow(row);\n\n      if (this.checkType(m.object.type, this.typeName)) {\n        if (m.event === 'change_state') row.state = m.object.details.value;\n        if (m.event === 'change_status') row.status = +m.object.details.value;\n        if (m.event === 'change_job_status') row.status = m.object.details.value;\n        if (m.event === 'upgrade') rewriteRow(row);\n      }\n    }\n  }\n\n  refresh(id?: number) {\n    if (id) this.parent.current = { id };\n    this.service.getList(this.listParams, this.typeName).subscribe((list: IListResult<Entities>) => {\n      if (this.reload) {\n        this.reload(list);\n      }\n      this.parent.dataSource = list;\n    });\n  }\n\n  listEvents(event: EmmitRow) {\n    const createUrl = (a: string[]) => this.parent.router.createUrlTree(['./', this.row.id, ...a], { relativeTo: this.parent.route });\n    const nav = (a: string[]) => this.parent.router.navigateByUrl(createUrl(a));\n\n    this.row = event.row;\n    const { cmd, row, item } = event;\n\n    if (['title', 'status', 'config', 'import'].includes(cmd)) {\n      nav(cmd === 'title' ? [] : [cmd]);\n    } else if (cmd === 'new-tab') {\n      const url = this.parent.router.serializeUrl(createUrl([]));\n      window.open(url, '_blank');\n    } else {\n      this[cmd](row || item);\n    }\n  }\n\n  onLoad() {}\n\n  license() {\n    const row = this.row as Bundle;\n\n    const closedDialog$ = (text: string, dialog: MatDialog) =>\n      dialog\n        .open(DialogComponent, {\n          data: {\n            title: `Accept license agreement`,\n            text,\n            controls: { label: 'Do you accept the license agreement?', buttons: ['Yes', 'No'] },\n          },\n        })\n        .beforeClosed();\n\n    const showDialog = (info: { text: string }) =>\n      closedDialog$(info.text, this.parent.dialog).pipe(\n        filter((yes) => yes),\n        switchMap(() => this.service.acceptLicense(`${row.license_url}accept/`).pipe(tap((_) => (row.license = 'accepted'))))\n      );\n\n    this.service.getLicenseInfo(row.license_url).pipe(this.takeUntil(), mergeMap(showDialog)).subscribe();\n  }\n\n  delete(item?: Entities) {\n    this.service\n      .delete(item ?? this.row)\n      .pipe(this.takeUntil())\n      .subscribe(() => (this.parent.current = null));\n  }\n\n  // host\n  getClusters() {\n    const row = this.row as IRowHost;\n    if (!row.clusters) {\n      row.page = 0;\n      this.service\n        .getClustersForHost({ limit: this.limit, page: 0 })\n        .pipe(this.takeUntil())\n        .subscribe((list) => (row.clusters = list));\n    }\n  }\n\n  getNextPageCluster() {\n    const row = this.row as IRowHost;\n    const count = row.clusters.length;\n    if (count === (row.page + 1) * this.limit) {\n      row.page++;\n      this.service\n        .getClustersForHost({ limit: this.limit, page: row.page })\n        .pipe(this.takeUntil())\n        .subscribe((list) => (row.clusters = [...row.clusters, ...list]));\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "clusters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<ICluster>[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "AdcmHost"
        },
        {
            "name": "ISearchParam",
            "id": "interface-ISearchParam-bfe1187b2f621020ae1b5f2e70d5b6f1",
            "file": "src/app/shared/configuration/main/main.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { isObject, TypeName } from '@app/core/types';\nimport { FieldService, IOutput, TFormOptions } from '../services/field.service';\nimport { CompareConfig, IFieldOptions, IFieldStack } from '../types';\nimport { ConfigService, IConfigService } from '@app/shared/configuration/services/config.service';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ConfigGroupService } from '@app/config-groups/service/config-group.service';\n\n/**\n *```\n advanced: boolean;\n search: string;\n ```\n */\nexport interface ISearchParam {\n  advanced: boolean;\n  search: string;\n}\n\nexport const historyAnime = [\n  trigger('history', [\n    state('hide', style({ top: '70px' })),\n    state('show', style({ top: '134px' })),\n    state('hideTools', style({ opacity: 0 })),\n    state('showTools', style({ opacity: 0.8 })),\n    transition('hideTools => showTools', animate('.5s .3s ease-in')),\n    transition('showTools => hideTools', animate('.2s ease-out')),\n    transition('hide <=> show', animate('.3s')),\n  ]),\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MainService {\n  configService: IConfigService;\n\n  constructor(private fields: FieldService,\n              public cluster: ClusterService,\n              injector: Injector) {\n    const current: TypeName | undefined = cluster.Current?.typeName;\n    if (current === 'group_config') {\n      this.configService = injector.get(ConfigGroupService);\n    } else {\n      this.configService = injector.get(ConfigService);\n    }\n  }\n\n  get worker$() {\n    return this.cluster.worker$;\n  }\n\n  get Current() {\n    return this.cluster.Current;\n  }\n\n  getConfig(url: string) {\n    return this.configService.getConfig(url);\n  }\n\n  changeVersion(url: string, id: number) {\n    return this.configService.changeVersion(id, url);\n  }\n\n  filterApply(options: TFormOptions[], search: ISearchParam) {\n    this.fields.filterApply(options, search);\n  }\n\n  parseValue(output: IOutput, source: IFieldStack[]) {\n    return this.fields.parseValue(output, source);\n  }\n\n  send(url: string, data: any) {\n    return this.configService.send(url, data);\n  }\n\n  getHistoryList(url: string, currentVersionId: number) {\n    return this.configService.getHistoryList(url, currentVersionId);\n  }\n\n  compareConfig(ids: number[], dataOptions: TFormOptions[], compareConfig: CompareConfig[]) {\n    dataOptions.map((a) => this.runClear(a, ids));\n    const cc = ids.map((id) => compareConfig.find((a) => a.id === id));\n    dataOptions.map((a) => this.runCheck(a, cc));\n  }\n\n  runClear(a: TFormOptions, ids: number[]) {\n    if ('options' in a) a.options.map((b) => this.runClear(b, ids));\n    else if (a.compare.length) a.compare = a.compare.filter((b) => ids.includes(b.id));\n    return a;\n  }\n\n  runCheck(a: TFormOptions, configs: CompareConfig[]) {\n    if ('options' in a) a.options.map((b) => this.runCheck(b, configs));\n    else this.checkField(a, configs);\n    return a;\n  }\n\n  checkField(a: IFieldOptions, configs: CompareConfig[]) {\n    configs\n      .filter((b) => a.compare.every((e) => e.id !== b.id))\n      .map((c) => {\n        const co = this.findFieldiCompare(a.key, c);\n        if (!co) {\n          if (String(a.value) && String(a.value) !== 'null') a.compare.push({\n            id: c.id,\n            date: c.date,\n            color: c.color,\n            value: 'null'\n          });\n        } else {\n          if (isObject(co.value)) {\n            if (isObject(a.value)) {\n              if (JSON.stringify(a.value) !== JSON.stringify(co.value)) a.compare.push({\n                ...co,\n                value: JSON.stringify(co.value)\n              });\n            } else if (typeof a.value === 'string') {\n              if (JSON.stringify(JSON.parse(a.value)) !== JSON.stringify(co.value)) a.compare.push({\n                ...co,\n                value: JSON.stringify(co.value)\n              });\n            }\n          } else if (String(co.value) !== String(a.value)) a.compare.push(co);\n        }\n      });\n    return a;\n  }\n\n  findFieldiCompare(key: string, cc: CompareConfig) {\n    const value = key\n      .split('/')\n      .reverse()\n      .reduce((p, c) => p[c], cc.config);\n    if (value !== null && value !== undefined && String(value)) {\n      const { id, date, color } = { ...cc };\n      return { id, date, color, value };\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "advanced",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">advanced: boolean;\nsearch: string;</code></pre></div>",
            "rawdescription": "\n\n```\nadvanced: boolean;\nsearch: string;\n```\n",
            "methods": []
        },
        {
            "name": "IServiceComponent",
            "id": "interface-IServiceComponent-776e0b50a5c5634d7986c19f4e57aaad",
            "file": "src/app/models/service-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IssueEntity } from '@app/models/issue';\nimport { IAction } from '@app/models/action';\n\nexport interface IServiceComponent extends IssueEntity {\n  cluster_id: number;\n  service_id: number;\n  description: string;\n  constraint: Array<number | string>;\n  monitoring: string;\n  prototype_id: number;\n  requires: Array<any>;\n  bound_to: any;\n  status: number;\n  url: string;\n  state: string;\n  action: string;\n  config: string;\n  prototype: string;\n  actions: IAction[];\n  version: string;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "bound_to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "cluster_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "constraint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number | string>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "monitoring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "prototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "requires",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "service_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IssueEntity"
        },
        {
            "name": "ISocketListener",
            "id": "interface-ISocketListener-7f95d972aa2e0bf28838c5beb72bc3dc",
            "file": "src/app/shared/directives/base.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, OnDestroy } from '@angular/core';\nimport { EventMessage } from '@app/core/store';\nimport { MonoTypeOperatorFunction, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[appBase]'\n})\nexport class BaseDirective implements OnDestroy {\n  destroy$ = new Subject();\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  takeUntil<T>(): MonoTypeOperatorFunction<T> {\n    return takeUntil<T>(this.destroy$);\n  }\n}\nexport interface ISocketListener {\n  socketListener: (m: EventMessage) => void;\n}\n",
            "properties": [
                {
                    "name": "socketListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ISource",
            "id": "interface-ISource-d78cb6aa832432b3e07848b2b3bbd66d",
            "file": "src/app/shared/configuration/services/field.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { isEmptyObject } from '@app/core/types';\n\nimport { ISearchParam } from '../main/main.service';\nimport {\n  controlType,\n  IConfig,\n  IConfigAttr,\n  IFieldOptions,\n  IFieldStack,\n  ILimits,\n  IPanelOptions,\n  IValidator,\n  resultTypes,\n  TNBase,\n  TNForm\n} from '../types';\nimport { AttributeService } from '@app/shared/configuration/attributes/attribute.service';\n\nexport type TFormOptions = IFieldOptions | IPanelOptions;\n\nexport interface IOutput {\n  [key: string]: resultTypes;\n}\n\nexport interface ISource {\n  name: string;\n  subname: string;\n  type: TNForm;\n  read_only: boolean;\n  limits?: ILimits;\n  value: any;\n}\n\nexport interface IToolsEvent {\n  name: string;\n  conditions?: { advanced: boolean; search: string } | boolean;\n}\n\nconst isVisibleField = (a: TFormOptions) => !a.ui_options?.invisible;\nconst isAdvancedField = (a: TFormOptions) => isVisibleField(a) && a.ui_options?.advanced;\nconst isHidden = (a: IFieldStack) => !!(a.ui_options?.invisible || a.ui_options?.advanced);\n\nconst typeToControl: Partial<{ [key in TNForm | controlType]: controlType }> = {\n  bool: 'boolean',\n  int: 'textbox',\n  integer: 'textbox',\n  float: 'textbox',\n  string: 'textbox',\n  file: 'textarea',\n  text: 'textarea',\n};\n\nexport const getControlType = (t: TNForm): controlType => typeToControl[t] || (t as controlType);\n\nconst intPattern = () => new RegExp(/^[-]?\\d+$/);\nconst patternFn = {\n  integer: intPattern,\n  int: intPattern,\n  float: () => new RegExp(/^[-]?[0-9]+(\\.[0-9]+)?$/),\n};\n\nexport const getPattern = (t: TNForm): RegExp => (patternFn[t] ? patternFn[t]() : null);\n\nconst fn = {\n  boolean: (v: boolean | null, d: boolean | null, r: boolean): boolean | null => (String(v) === 'true' || String(v) === 'false' || String(v) === 'null' ? v : r ? d : null),\n  json: (v: string): string => (v === null ? '' : JSON.stringify(v, undefined, 4)),\n  map: (v: object, d: object): object => (!v ? d : v),\n  list: (v: string[], d: string[]): string[] => (!v ? d : v),\n  structure: (v: any): any => v,\n};\n\nexport const getValue = (t: TNForm) => {\n  const def = (value: number | string) => (value === null || value === undefined ? '' : String(value));\n  return fn[t] ? fn[t] : def;\n};\n\nexport const getKey = (name: string, subname: string): string => (subname ? `${subname}/${name}` : name);\n\nexport const getValidator = (required: boolean, min: number, max: number, type: TNForm) => ({\n  required,\n  min,\n  max,\n  pattern: getPattern(type),\n});\n\nconst getField = (item: IFieldStack): IFieldOptions => {\n  return {\n    ...item,\n    key: getKey(item.name, item.subname),\n    value: getValue(item.type)(item.value, item.default, item.required),\n    validator: getValidator(item.required, item.limits?.min, item.limits?.max, item.type),\n    controlType: getControlType(item.type),\n    hidden: item.name === '__main_info' || isHidden(item),\n    compare: []\n  };\n};\n\nconst fo = (n: string) => (b: IFieldStack) => b.type !== 'group' && b.subname && b.name === n;\nconst isActive = (a: IConfigAttr, n: string) => a[n]?.active;\nexport const getOptions = (a: IFieldStack, d: IConfig) =>\n  d.config\n    .filter(fo(a.name))\n    .map((f) => getField(f))\n    // switch off validation for field if !(activatable: true && active: false) - line: 146\n    .map((c) => ({ ...c, name: c.subname, activatable: a.activatable && !isActive(d.attr, a.name) }));\n\nconst getPanel = (a: IFieldStack, d: IConfig): IPanelOptions => ({\n  ...a,\n  hidden: isHidden(a),\n  active: a.activatable ? isActive(d.attr, a.name) : true,\n  options: getOptions(a, d),\n});\n\nconst handleTree = (c: ISearchParam): ((a: TFormOptions) => TFormOptions) => (a: TFormOptions): TFormOptions => {\n  if ('options' in a) {\n    a.options = a.options.map(handleTree(c));\n    if (c.search) a.hidden = a.options.filter((b) => !b.hidden).length === 0;\n    else a.hidden = isAdvancedField(a) ? !c.advanced : false;\n  } else if (isVisibleField(a)) {\n    a.hidden = !(a.display_name.toLowerCase().includes(c.search.toLowerCase()) || String(a.value).toLocaleLowerCase().includes(c.search.toLocaleLowerCase()));\n    if (!a.hidden && isAdvancedField(a)) a.hidden = !c.advanced;\n  }\n  return a;\n};\n\nconst findAttrValue = <T extends object>(obj: T, key: string): boolean => {\n  let value;\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    if (typeof obj[i] === 'object') {\n      value = findAttrValue<Object>(obj[i], key);\n    } else if (i === key) {\n      value = obj[i];\n    }\n  }\n  return value;\n};\n\n@Injectable()\nexport class FieldService {\n  attributesService: AttributeService | undefined;\n\n  constructor(public fb: FormBuilder) {}\n\n  /**\n   * Parse and prepare source data from backend\n   */\n  public getPanels(data: IConfig): TFormOptions[] {\n    return data?.config\n      ?.filter((a) => a.name !== '__main_info')\n      .reduce((p, c) => {\n        if (c.subname) return p;\n        if (c.type !== 'group') return [...p, getField(c)];\n        else return [...p, getPanel(c, data)];\n      }, []);\n  }\n\n  /**\n   * Generate FormGroup\n   * @param options\n   */\n  public toFormGroup(options: TFormOptions[] = []): FormGroup {\n    const check = (a: TFormOptions): boolean =>\n      'options' in a\n        ? a.activatable\n          ? isVisibleField(a) // if group.activatable - only visible\n          : isVisibleField(a) && !a.read_only // else visible an not read_only\n            ? a.options.some((b) => check(b)) // check inner fields\n            : false\n        : isVisibleField(a) && !a.read_only; // for fields in group\n\n    return this.fb.group(\n      options.reduce((p, c) => this.runByTree(c, p), {}),\n      {\n        validator: () => (options.filter(check).length === 0 ? { error: 'Form is empty' } : null),\n      }\n    );\n  }\n\n  // TODO:\n  private runByTree(field: TFormOptions, controls: { [key: string]: {} }): { [key: string]: {} } {\n    if ('options' in field) {\n      controls[field.name] = this.fb.group(\n        field.options.reduce((p, a) => {\n          if ('options' in a) this.fb.group(this.runByTree(a, p));\n          else this.fillForm(a, p);\n          return p;\n        }, {})\n      );\n      return controls;\n    } else {\n      return this.fillForm(field, controls);\n    }\n  }\n\n  private fillForm(field: IFieldOptions, controls: {}) {\n    const name = field.subname || field.name;\n    controls[name] = this.fb.control(field.value, field.activatable ? [] : this.setValidator(field));\n    return controls;\n  }\n\n  /**\n   * External use (scheme.service) to set validator for FormControl by type\n   * @param field Partial<FieldOptions>{ ValidatorInfo, controlType }\n   * @param controlToCompare\n   */\n  public setValidator(field: { validator: IValidator; controlType: controlType }, controlToCompare?: AbstractControl) {\n    const v: ValidatorFn[] = [];\n\n    if (field.validator.required) v.push(Validators.required);\n    if (field.validator.pattern) v.push(Validators.pattern(field.validator.pattern));\n    //if (field.validator.max !== null)\n    v.push(Validators.max(field.validator.max));\n    //if (field.validator.min !== null)\n    v.push(Validators.min(field.validator.min));\n\n    if (field.controlType === 'password') {\n      const passwordConfirm = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (controlToCompare && controlToCompare.value !== control.value) return { notEqual: true };\n        return null;\n      };\n      v.push(passwordConfirm());\n    }\n\n    if (field.controlType === 'json') {\n      const jsonParse = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (control.value) {\n          try {\n            JSON.parse(control.value);\n            return null;\n          } catch (e) {\n            return { jsonParseError: { value: control.value } };\n          }\n        } else return null;\n      };\n\n      v.push(jsonParse());\n    }\n\n    if (field.controlType === 'map') {\n      const parseKey = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null =>\n        control.value && Object.keys(control.value).length && Object.keys(control.value).some((a) => !a) ? { parseKey: true } : null;\n      v.push(parseKey());\n    }\n    return v;\n  }\n\n  /**\n   * Filter by group and all fields\n   */\n  public filterApply(options: TFormOptions[], c: ISearchParam): TFormOptions[] {\n    return options.filter((a) => isVisibleField(a)).map(handleTree(c));\n  }\n\n  /**\n   * Output form, cast to source type\n   */\n  public parseValue(output: IOutput, source: ISource[]): IOutput {\n    const findField = (name: string, p?: string): Partial<IFieldStack> => source.find((a) => (p ? a.name === p && a.subname === name : a.name === name));\n\n    const runYspecParse = (v: any, f: Partial<IFieldOptions>) => ((!v || !Object.keys(v).length) && !f.value ? f.value : this.runYspec(v, f.limits.rules));\n\n    const runParse = (v: IOutput, parentName?: string): IOutput => {\n      const runByValue = (p: IOutput, c: string) => {\n        const checkType = (data: resultTypes | IOutput, field: Partial<IFieldStack>): resultTypes => {\n          const { type } = field;\n          if (type === 'structure') return runYspecParse(data, field);\n          else if (type === 'group') return this.checkValue(runParse(data as IOutput, field.name), type);\n          else return this.checkValue(data, type);\n        };\n\n        const f = findField(c, parentName);\n        if (f) {\n          const result = checkType(v[c], f);\n          return f.type !== 'group' || result ? { ...p, [c]: result } : p;\n        }\n        return p;\n      };\n\n      return Object.keys(v).reduce(runByValue, {});\n    };\n\n    const __main_info = findField('__main_info');\n    return runParse(__main_info?.required ? { ...output, __main_info: __main_info.value } : { ...output });\n  }\n\n  private runYspec(value: resultTypes, rules: any) {\n    switch (rules?.type) {\n      case 'list': {\n        return (value as Array<TNBase>).filter((a) => !!a).map((a) => this.runYspec(a, rules.options));\n      }\n      case 'dict': {\n        return Object.keys(value).reduce((p, c) => {\n          const r = rules.options.find((b: any) => b.name === c);\n          const v = r ? this.runYspec(value[c], r) : null;\n          return v !== null ? { ...p, [c]: v } : { ...p };\n        }, {});\n      }\n      default: {\n        return this.checkValue(value, rules?.type);\n      }\n    }\n  }\n\n  checkValue(value: resultTypes, type: TNForm): resultTypes {\n    if ((value === '' || isEmptyObject(value)) && type === 'map') return {};\n\n    if ((value === '' || isEmptyObject(value)) && type === 'list') return [];\n\n    if (value === '' || value === null || isEmptyObject(value)) return null;\n\n    if (typeof value === 'boolean') return value;\n    else if (typeof value === 'string')\n      switch (type) {\n        case 'option':\n          return !isNaN(+value) ? parseInt(value, 10) : value;\n        case 'integer':\n        case 'int':\n          return parseInt(value, 10);\n        case 'float':\n          return parseFloat(value);\n        case 'json':\n          return JSON.parse(value);\n      }\n    else\n      switch (type) {\n        case 'map':\n          return Object.keys(value)\n            .filter((a) => !!a)\n            .reduce((p, c) => ({ ...p, [c]: value[c] }), {});\n\n        case 'list':\n          return Array.isArray(value) ? (value as Array<string>).filter((a) => !!a) : null;\n      }\n\n    return value;\n  }\n}\n",
            "properties": [
                {
                    "name": "limits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILimits",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "read_only",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "subname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TNForm",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IssueEntity",
            "id": "interface-IssueEntity-0f92d1325e593762aa0c9547bc0fbddf",
            "file": "src/app/models/issue.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AdcmEntity } from '@app/models/entity';\n\nexport type IssueType = 'cluster' | 'service' | 'servicecomponent' | 'component';\n\nexport interface IssueEntity extends AdcmEntity {\n  issue: IIssues;\n}\n\nexport interface IIssues {\n  config?: boolean;\n  required_import?: boolean;\n  host_component?: false;\n  cluster?: IssueEntity[];\n  service?: IssueEntity[];\n}\n",
            "properties": [
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIssues",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "AdcmEntity"
        },
        {
            "name": "IssueState",
            "id": "interface-IssueState-a6605e20804c67a3c80aae8f5f6181fc",
            "file": "src/app/core/store/issue.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action, createAction, createFeatureSelector, createReducer, createSelector, on, props, Store } from '@ngrx/store';\nimport { exhaustMap, filter, map, withLatestFrom } from 'rxjs/operators';\n\nimport { ApiService } from '../api';\nimport { State } from '../store';\nimport { BaseEntity } from '../types';\nimport { IIssues } from '@app/models/issue';\n\nexport interface IssueState {\n  value: IIssues;\n  url: string;\n}\n\nconst InitState = {\n  value: null,\n  url: '',\n};\n\nexport const loadIssue = createAction('[Issue] LoadIssue');\nexport const fillIssue = createAction('[Issue] FillIssue', props<{ value: IIssues; url: string }>());\n\nconst reducer = createReducer(InitState, on(loadIssue, state => ({ ...state })), on(fillIssue, (state, { value, url }) => ({ value, url })));\n\nexport function issueReducer(state: IssueState, action: Action) {\n  return reducer(state, action);\n}\n\n@Injectable()\nexport class IssueEffect {\n  load$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadIssue),\n      withLatestFrom(this.store, (action, state) => state.issue.url),\n      filter(url => !!url),\n      exhaustMap(url => this.api.get<BaseEntity>(url).pipe(map(o => fillIssue({ value: o.issue, url: o.url }))))\n    )\n  );\n\n  constructor(private actions$: Actions, private api: ApiService, private store: Store<State>) {}\n}\n\nexport const getIssueSelector = createFeatureSelector<IssueState>('issue');\n\nexport const checkIssue = createSelector(\n  getIssueSelector,\n  state => state\n);\n",
            "properties": [
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIssues",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IStatus",
            "id": "interface-IStatus-f4479ba0b2419eab84b2be3a638f7417",
            "file": "src/app/shared/components/status/status.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ApiService } from '@app/core/api';\nimport { IComponent, Host, HostComponent } from '@app/core/types';\nimport { ICluster } from '@app/models/cluster';\n\ninterface IStatus {\n  [key: number]: { status: number };\n}\n\nexport interface IAllStatus {\n  hosts: IStatus;\n  services: { details: [{ host: string | number; component: string | number; status: number }]; status: number }[];\n  components: IStatus;\n  status: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService {\n  constructor(private api: ApiService) { }\n\n  getStatusInfo(id: number, hostcomponent_link: string) {\n    const statuses$ = this.getAllClusterStatus(id),\n      host_components$ = this.getHostComponents(hostcomponent_link);\n    return combineLatest([statuses$, host_components$]);\n  }\n\n  getHostComponents(url: string): Observable<HostComponent[]> {\n    return this.api\n      .get<{ host: Host[]; hc: HostComponent[]; component: IComponent[] }>(url)\n      .pipe(map((a) => a.hc.map((hc) => ({ ...hc, monitoring: a.component.find((b) => b.id === hc.component_id).monitoring }))));\n  }\n\n  getServiceComponentsByCluster(cluster: ICluster, service_id?: number): Observable<IComponent[]> {\n    return this.api.get<IComponent[]>(cluster.status_url).pipe(map((s) => s.filter((se) => (service_id ? se.service_id === service_id : true))));\n  }\n\n  getHostcomponentStatus(k: HostComponent, all: IAllStatus) {\n    const c = all.services[k.service_id]?.details.find((e) => +e.host === k.host_id && +e.component === k.component_id);\n    return c ? c.status : null;\n  }\n\n  getComponentsOnly(a: [IAllStatus, HostComponent[]], host_id?: number) {\n    const all: IAllStatus = a[0],\n      hc: HostComponent[] = a[1];\n    return hc\n      .filter((h) => (host_id ? host_id === h.host_id : true))\n      .reduce((acc, cur) => (!acc.some((c) => c.host_id === cur.host_id && c.service_id === cur.service_id) ? [...acc, cur] : acc), [])\n      .map((k) => ({ ...k, status: this.getHostcomponentStatus(k, all) }))\n      .filter((b) => b.status !== 0);\n  }\n\n  getClusterById(id: number) {\n    return this.api.getOne<ICluster>('cluster', id);\n  }\n\n  getAllClusterStatus(id: number) {\n    return this.api.get<IAllStatus>(`/status/api/v1/cluster/${id}/`);\n  }\n\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-f4479ba0b2419eab84b2be3a638f7417",
                    "args": [
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "IStream",
            "id": "interface-IStream-a875bd9ec8a9450bd7b364337c366dfb",
            "file": "src/app/shared/host-components-map/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IComponent, Host, IRequires } from '@app/core/types';\n\nexport type ActionParam = 'add' | 'remove';\nexport type TConstraintValue = number | '+' | 'odd' | 'depend';\nexport type TConstraint = TConstraintValue[];\n\nexport interface IRawHosComponent {\n  component: IComponent[];\n  host: Partial<Host>[];\n  hc: Post[];\n}\n\nexport interface Post {\n  id?: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class Post implements Post {\n  constructor(public host_id: number, public service_id: number, public component_id: number, public id?: number) {}\n}\n\n/**\n *```\n  {\n    id: number;\n    name: string;\n    relations: Tile[] = [];\n    isSelected?: boolean;\n    isLink?: boolean;\n    limit?: Constraint;\n    disabled: boolean;\n    actions?: ActionParam[];\n    color?: 'none' | 'white' | 'gray' | 'yellow';\n    notification?: string;\n  }\n ```\n * @class Tile\n */\nexport class Tile {\n  id: number;\n  name: string;\n  relations: Tile[] = [];\n  isSelected?: boolean;\n  isLink?: boolean;\n  limit?: TConstraint;\n  disabled: boolean;\n  actions?: ActionParam[];\n  color?: 'none' | 'white' | 'gray' | 'yellow';\n  notification?: string;\n}\n\nexport class HostTile extends Tile {\n  constructor(rawHost: Partial<Host>) {\n    super();\n    this.id = rawHost.id;\n    this.name = rawHost.fqdn;\n  }\n}\n\nexport class CompTile extends Tile {\n  prototype_id: number;\n  service_id: number;\n  component: string;\n  requires: IRequires[];\n  constructor(rawComponent: IComponent, public actions?: ActionParam[]) {\n    super();\n    this.id = rawComponent.id;\n    this.service_id = rawComponent.service_id;\n    this.component = `${rawComponent.service_name}/${rawComponent.name}`;\n    this.name = rawComponent.display_name;\n    this.disabled = rawComponent.service_state !== 'created';\n    this.limit = rawComponent.constraint;\n    this.requires = rawComponent.requires;\n    this.prototype_id = rawComponent.prototype_id;\n  }\n}\n\n/**\n * State user selection\n *\n * @class StatePost\n */\nexport class StatePost {\n  private _data: Post[];\n\n  constructor() {\n    this._data = [];\n  }\n\n  private _compare(a: Post, b: Post) {\n    return a.host_id === b.host_id && a.service_id === b.service_id && a.component_id === b.component_id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  add(post: Post) {\n    const f = this._data.find((p) => this._compare(p, post));\n    if (!f) this._data.push(post);\n    else if (!f.id) f.id = post.id;\n  }\n\n  delete(post: Post) {\n    this._data = this._data.filter((p) => !this._compare(p, post));\n  }\n\n  clear() {\n    this._data = [];\n  }\n\n  update(data: Post[]) {\n    data.forEach((a) => this.add(new Post(a.host_id, a.service_id, a.component_id, a.id)));\n  }\n}\n/**\n *```\n  {\n    link: Tile;\n    linkSource: Tile[];\n    selected: Tile;\n  }\n  *```\n */\nexport interface IStream {\n  link: Tile;\n  linkSource: Tile[];\n  selected: Tile;\n}\n",
            "properties": [
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "linkSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile",
                    "optional": false,
                    "description": "",
                    "line": 141
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\nlink: Tile;\nlinkSource: Tile[];\nselected: Tile;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\nlink: Tile;\nlinkSource: Tile[];\nselected: Tile;\n}\n```\n",
            "methods": []
        },
        {
            "name": "IStructure",
            "id": "interface-IStructure-236ea186c68ad07c4fefea3b5504940f",
            "file": "src/app/shared/configuration/yspec/yspec.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IRoot } from '@app/core/types';\n\nimport { IFieldOptions, controlType, IValidator, TNBase, TNReq } from '../types';\nimport { getControlType, getPattern } from '../services/field.service';\n\nexport type TMatch = TNBase | TNReq;\n\n/**\n *```\n {\n    match: matchType;\n    selector?: string;\n    variants?: { [key: string]: string };\n    item?: string;\n    items?: IRoot;        // { [key: string]: string; }\n    required_items?: string[];\n    default_item?: string;\n }\n ```\n */\ninterface IYRoot {\n  match: TMatch;\n  selector?: string;\n  variants?: { [key: string]: string };\n  item?: string;\n  items?: IRoot;\n  required_items?: string[];\n  default_item?: string;\n}\n\n/**\n *```\n {\n    [key: string]: IYRoot;\n }\n ```\n */\nexport interface IYspec {\n  [key: string]: IYRoot;\n}\n\n/**\n *```\n{\n    name:         string;\n    path:         string[];\n    type:         simpleType;\n    controlType:  controlType;\n    validator:    ValidatorInfo;\n}\n *```\n */\nexport interface IYField {\n  name: string;\n  path: string[];\n  type: TNBase;\n  controlType: controlType;\n  validator: IValidator;\n}\n\n/**\n * ```\n * {\n *   name:      string;\n *   type:      reqursionType;    // 'list' | 'dict'\n *   options:   IYContainer | IYField | (IYContainer | IYField)[];\n * }\n *```\n */\nexport interface IYContainer {\n  name: string;\n  type: TNReq;\n  options: IYContainer | IYField | (IYContainer | IYField)[];\n}\n\nexport interface IStructure extends IFieldOptions {\n  rules: { options: any; type: string; name: string };\n}\n\n@Injectable()\nexport class YspecService {\n  private root: IYspec;\n\n  set Root(yspec: IYspec) {\n    this.root = yspec;\n  }\n\n  get Root() {\n    return this.root;\n  }\n\n  build(rule = 'root', path: string[] = []): IYContainer | IYField {\n    const { match, item, items } = this.Root[rule];\n\n    switch (match) {\n      case 'list':\n        return this.list(item, path);\n      case 'dict':\n        return this.dict(items, path);\n      // case 'one_of':\n      //   return this.one_of();\n      // case 'dict_key_selection':\n      //   return this.dict_key_selection();\n      default:\n        return this.field({ type: match, path });\n    }\n  }\n\n  field(field: { type: TNBase; path: string[] }): IYField {\n    const name = field.path.reverse()[0];\n    return {\n      name,\n      type: field.type,\n      path: field.path,\n      controlType: getControlType(field.type),\n      validator: {\n        required: this.findRule(field.path, 'required_items'),\n        pattern: getPattern(field.type),\n      },\n    };\n  }\n\n  findRule(path: string[], name: string): boolean {\n    const [field, parent] = path;\n    const rule = this.Root[parent];\n    return !!(rule && rule[name] && Array.isArray(rule[name]) && rule[name].includes(field));\n  }\n\n  list(item: string, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return { type: 'list', name, options: this.build(item, [...path, item]) };\n  }\n\n  dict(items: IRoot, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return {\n      type: 'dict',\n      name,\n      options: Object.keys(items).map((item_name: string) => this.build(items[item_name], [...path, item_name])),\n    };\n  }\n\n  one_of() {}\n\n  dict_key_selection() {}\n}\n",
            "properties": [
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "IFieldOptions"
        },
        {
            "name": "IStyledNavItem",
            "id": "interface-IStyledNavItem-39eefd83a4c8cabaa98c367c8d80a8a1",
            "file": "src/app/models/details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICluster } from './cluster';\nimport { IAction, JobObject, LogFile, TypeName } from '../core/types';\nimport { IIssues } from './issue';\nimport { AdcmTypedEntity } from './entity';\n\nexport interface IDetails {\n  parent?: ICluster;\n  typeName: TypeName;\n  id: number;\n  name: string;\n  upgradable: boolean;\n  upgrade: string;\n  status: string | number;\n  /** link to actionss */\n  action: string;\n  actions: IAction[];\n  issue: IIssues;\n  log_files?: LogFile[];\n  objects: JobObject[];\n  prototype_name: string;\n  prototype_display_name: string;\n  prototype_version: string;\n  provider_id: number;\n  bundle_id: number;\n  hostcomponent: string;\n  state: string;\n}\n\nexport interface INavItem {\n  id?: number;\n  title: string;\n  url: string;\n  issue?: string;\n  status?: number;\n  statusMessage?: string;\n  action?: () => void;\n}\n\nexport interface IStyledNavItem {\n  class?: string;\n  entity?: AdcmTypedEntity;\n}\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdcmTypedEntity",
                    "optional": true,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ITimeInfo",
            "id": "interface-ITimeInfo-a4ca3857c8a3fa9637042e138d2d1c95",
            "file": "src/app/entry/job/log/log.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { Job, JobStatus, LogFile } from '@app/core/types';\nimport { TextComponent } from './text.component';\nimport { JobService } from '@app/services/job.service';\nimport { EventMessage } from '@app/core/store';\n\nexport interface ITimeInfo {\n  start: string;\n  end: string;\n  time: string;\n}\n\n@Component({\n  selector: 'app-job-log',\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex: 1;\n        padding: 10px 20px;\n      }\n\n      div.wrap {\n        display: flex;\n        flex: 1;\n      }\n\n      .accordion {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n      }\n    `,\n  ],\n  template: `\n    <ng-container *ngIf=\"job\">\n      <app-job-info [timeInfo]=\"timeInfo\" [status]=\"job.status\"></app-job-info>\n      <div class=\"wrap\" *ngIf=\"currentLog$ | async as log\">\n        <app-log-text *ngIf=\"log.type !== 'check'\" [content]=\"log.content\" [status]=\"job.status\" (refresh)=\"refresh()\"></app-log-text>\n        <mat-accordion *ngIf=\"log.type === 'check'\" class=\"accordion\">\n          <app-log-check [content]=\"log.content\"></app-log-check>\n        </mat-accordion>\n      </div>\n    </ng-container>\n  `,\n})\nexport class LogComponent extends BaseDirective implements OnInit {\n  currentLog$ = new Subject<LogFile>();\n  timeInfo: ITimeInfo;\n  logUrl: string;\n\n  job: Job;\n\n  @ViewChild(TextComponent, { static: true }) textComp: TextComponent;\n\n  constructor(\n    private service: ClusterService,\n    private route: ActivatedRoute,\n    private jobService: JobService,\n  ) {\n    super();\n  }\n\n  socketListener(event: EventMessage) {\n    if (event.event === 'change_job_status') {\n      this.job.status = event.object.details.value as JobStatus;\n      this.job.finish_date = new Date().toISOString();\n      this.timeInfo = this.service.getOperationTimeData(this.job);\n      if (this.textComp) this.textComp.update(this.job.status);\n    }\n    this.refresh();\n  }\n\n  startListenSocket() {\n    this.jobService.events().pipe(\n      this.takeUntil(),\n      filter(event => event?.object?.id === this.job.id),\n    ).subscribe((event) => this.socketListener(event));\n  }\n\n  ngOnInit() {\n    this.route.paramMap.pipe(\n      this.takeUntil(),\n      switchMap(() => this.jobService.get(+this.route.parent.snapshot.paramMap.get('job'))),\n    ).subscribe((job) => {\n      this.job = job;\n      this.timeInfo = this.service.getOperationTimeData(this.job);\n      this.logUrl = this.job.log_files.find((a) => a.id === +this.route.snapshot.paramMap.get('log')).url;\n      this.refresh();\n    });\n    this.startListenSocket();\n  }\n\n  refresh() {\n    if (!this.logUrl) return;\n    this.service.getLog(this.logUrl).subscribe((a) => this.currentLog$.next(a));\n  }\n\n}\n",
            "properties": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IToolsEvent",
            "id": "interface-IToolsEvent-d78cb6aa832432b3e07848b2b3bbd66d",
            "file": "src/app/shared/configuration/services/field.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { isEmptyObject } from '@app/core/types';\n\nimport { ISearchParam } from '../main/main.service';\nimport {\n  controlType,\n  IConfig,\n  IConfigAttr,\n  IFieldOptions,\n  IFieldStack,\n  ILimits,\n  IPanelOptions,\n  IValidator,\n  resultTypes,\n  TNBase,\n  TNForm\n} from '../types';\nimport { AttributeService } from '@app/shared/configuration/attributes/attribute.service';\n\nexport type TFormOptions = IFieldOptions | IPanelOptions;\n\nexport interface IOutput {\n  [key: string]: resultTypes;\n}\n\nexport interface ISource {\n  name: string;\n  subname: string;\n  type: TNForm;\n  read_only: boolean;\n  limits?: ILimits;\n  value: any;\n}\n\nexport interface IToolsEvent {\n  name: string;\n  conditions?: { advanced: boolean; search: string } | boolean;\n}\n\nconst isVisibleField = (a: TFormOptions) => !a.ui_options?.invisible;\nconst isAdvancedField = (a: TFormOptions) => isVisibleField(a) && a.ui_options?.advanced;\nconst isHidden = (a: IFieldStack) => !!(a.ui_options?.invisible || a.ui_options?.advanced);\n\nconst typeToControl: Partial<{ [key in TNForm | controlType]: controlType }> = {\n  bool: 'boolean',\n  int: 'textbox',\n  integer: 'textbox',\n  float: 'textbox',\n  string: 'textbox',\n  file: 'textarea',\n  text: 'textarea',\n};\n\nexport const getControlType = (t: TNForm): controlType => typeToControl[t] || (t as controlType);\n\nconst intPattern = () => new RegExp(/^[-]?\\d+$/);\nconst patternFn = {\n  integer: intPattern,\n  int: intPattern,\n  float: () => new RegExp(/^[-]?[0-9]+(\\.[0-9]+)?$/),\n};\n\nexport const getPattern = (t: TNForm): RegExp => (patternFn[t] ? patternFn[t]() : null);\n\nconst fn = {\n  boolean: (v: boolean | null, d: boolean | null, r: boolean): boolean | null => (String(v) === 'true' || String(v) === 'false' || String(v) === 'null' ? v : r ? d : null),\n  json: (v: string): string => (v === null ? '' : JSON.stringify(v, undefined, 4)),\n  map: (v: object, d: object): object => (!v ? d : v),\n  list: (v: string[], d: string[]): string[] => (!v ? d : v),\n  structure: (v: any): any => v,\n};\n\nexport const getValue = (t: TNForm) => {\n  const def = (value: number | string) => (value === null || value === undefined ? '' : String(value));\n  return fn[t] ? fn[t] : def;\n};\n\nexport const getKey = (name: string, subname: string): string => (subname ? `${subname}/${name}` : name);\n\nexport const getValidator = (required: boolean, min: number, max: number, type: TNForm) => ({\n  required,\n  min,\n  max,\n  pattern: getPattern(type),\n});\n\nconst getField = (item: IFieldStack): IFieldOptions => {\n  return {\n    ...item,\n    key: getKey(item.name, item.subname),\n    value: getValue(item.type)(item.value, item.default, item.required),\n    validator: getValidator(item.required, item.limits?.min, item.limits?.max, item.type),\n    controlType: getControlType(item.type),\n    hidden: item.name === '__main_info' || isHidden(item),\n    compare: []\n  };\n};\n\nconst fo = (n: string) => (b: IFieldStack) => b.type !== 'group' && b.subname && b.name === n;\nconst isActive = (a: IConfigAttr, n: string) => a[n]?.active;\nexport const getOptions = (a: IFieldStack, d: IConfig) =>\n  d.config\n    .filter(fo(a.name))\n    .map((f) => getField(f))\n    // switch off validation for field if !(activatable: true && active: false) - line: 146\n    .map((c) => ({ ...c, name: c.subname, activatable: a.activatable && !isActive(d.attr, a.name) }));\n\nconst getPanel = (a: IFieldStack, d: IConfig): IPanelOptions => ({\n  ...a,\n  hidden: isHidden(a),\n  active: a.activatable ? isActive(d.attr, a.name) : true,\n  options: getOptions(a, d),\n});\n\nconst handleTree = (c: ISearchParam): ((a: TFormOptions) => TFormOptions) => (a: TFormOptions): TFormOptions => {\n  if ('options' in a) {\n    a.options = a.options.map(handleTree(c));\n    if (c.search) a.hidden = a.options.filter((b) => !b.hidden).length === 0;\n    else a.hidden = isAdvancedField(a) ? !c.advanced : false;\n  } else if (isVisibleField(a)) {\n    a.hidden = !(a.display_name.toLowerCase().includes(c.search.toLowerCase()) || String(a.value).toLocaleLowerCase().includes(c.search.toLocaleLowerCase()));\n    if (!a.hidden && isAdvancedField(a)) a.hidden = !c.advanced;\n  }\n  return a;\n};\n\nconst findAttrValue = <T extends object>(obj: T, key: string): boolean => {\n  let value;\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    if (typeof obj[i] === 'object') {\n      value = findAttrValue<Object>(obj[i], key);\n    } else if (i === key) {\n      value = obj[i];\n    }\n  }\n  return value;\n};\n\n@Injectable()\nexport class FieldService {\n  attributesService: AttributeService | undefined;\n\n  constructor(public fb: FormBuilder) {}\n\n  /**\n   * Parse and prepare source data from backend\n   */\n  public getPanels(data: IConfig): TFormOptions[] {\n    return data?.config\n      ?.filter((a) => a.name !== '__main_info')\n      .reduce((p, c) => {\n        if (c.subname) return p;\n        if (c.type !== 'group') return [...p, getField(c)];\n        else return [...p, getPanel(c, data)];\n      }, []);\n  }\n\n  /**\n   * Generate FormGroup\n   * @param options\n   */\n  public toFormGroup(options: TFormOptions[] = []): FormGroup {\n    const check = (a: TFormOptions): boolean =>\n      'options' in a\n        ? a.activatable\n          ? isVisibleField(a) // if group.activatable - only visible\n          : isVisibleField(a) && !a.read_only // else visible an not read_only\n            ? a.options.some((b) => check(b)) // check inner fields\n            : false\n        : isVisibleField(a) && !a.read_only; // for fields in group\n\n    return this.fb.group(\n      options.reduce((p, c) => this.runByTree(c, p), {}),\n      {\n        validator: () => (options.filter(check).length === 0 ? { error: 'Form is empty' } : null),\n      }\n    );\n  }\n\n  // TODO:\n  private runByTree(field: TFormOptions, controls: { [key: string]: {} }): { [key: string]: {} } {\n    if ('options' in field) {\n      controls[field.name] = this.fb.group(\n        field.options.reduce((p, a) => {\n          if ('options' in a) this.fb.group(this.runByTree(a, p));\n          else this.fillForm(a, p);\n          return p;\n        }, {})\n      );\n      return controls;\n    } else {\n      return this.fillForm(field, controls);\n    }\n  }\n\n  private fillForm(field: IFieldOptions, controls: {}) {\n    const name = field.subname || field.name;\n    controls[name] = this.fb.control(field.value, field.activatable ? [] : this.setValidator(field));\n    return controls;\n  }\n\n  /**\n   * External use (scheme.service) to set validator for FormControl by type\n   * @param field Partial<FieldOptions>{ ValidatorInfo, controlType }\n   * @param controlToCompare\n   */\n  public setValidator(field: { validator: IValidator; controlType: controlType }, controlToCompare?: AbstractControl) {\n    const v: ValidatorFn[] = [];\n\n    if (field.validator.required) v.push(Validators.required);\n    if (field.validator.pattern) v.push(Validators.pattern(field.validator.pattern));\n    //if (field.validator.max !== null)\n    v.push(Validators.max(field.validator.max));\n    //if (field.validator.min !== null)\n    v.push(Validators.min(field.validator.min));\n\n    if (field.controlType === 'password') {\n      const passwordConfirm = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (controlToCompare && controlToCompare.value !== control.value) return { notEqual: true };\n        return null;\n      };\n      v.push(passwordConfirm());\n    }\n\n    if (field.controlType === 'json') {\n      const jsonParse = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (control.value) {\n          try {\n            JSON.parse(control.value);\n            return null;\n          } catch (e) {\n            return { jsonParseError: { value: control.value } };\n          }\n        } else return null;\n      };\n\n      v.push(jsonParse());\n    }\n\n    if (field.controlType === 'map') {\n      const parseKey = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null =>\n        control.value && Object.keys(control.value).length && Object.keys(control.value).some((a) => !a) ? { parseKey: true } : null;\n      v.push(parseKey());\n    }\n    return v;\n  }\n\n  /**\n   * Filter by group and all fields\n   */\n  public filterApply(options: TFormOptions[], c: ISearchParam): TFormOptions[] {\n    return options.filter((a) => isVisibleField(a)).map(handleTree(c));\n  }\n\n  /**\n   * Output form, cast to source type\n   */\n  public parseValue(output: IOutput, source: ISource[]): IOutput {\n    const findField = (name: string, p?: string): Partial<IFieldStack> => source.find((a) => (p ? a.name === p && a.subname === name : a.name === name));\n\n    const runYspecParse = (v: any, f: Partial<IFieldOptions>) => ((!v || !Object.keys(v).length) && !f.value ? f.value : this.runYspec(v, f.limits.rules));\n\n    const runParse = (v: IOutput, parentName?: string): IOutput => {\n      const runByValue = (p: IOutput, c: string) => {\n        const checkType = (data: resultTypes | IOutput, field: Partial<IFieldStack>): resultTypes => {\n          const { type } = field;\n          if (type === 'structure') return runYspecParse(data, field);\n          else if (type === 'group') return this.checkValue(runParse(data as IOutput, field.name), type);\n          else return this.checkValue(data, type);\n        };\n\n        const f = findField(c, parentName);\n        if (f) {\n          const result = checkType(v[c], f);\n          return f.type !== 'group' || result ? { ...p, [c]: result } : p;\n        }\n        return p;\n      };\n\n      return Object.keys(v).reduce(runByValue, {});\n    };\n\n    const __main_info = findField('__main_info');\n    return runParse(__main_info?.required ? { ...output, __main_info: __main_info.value } : { ...output });\n  }\n\n  private runYspec(value: resultTypes, rules: any) {\n    switch (rules?.type) {\n      case 'list': {\n        return (value as Array<TNBase>).filter((a) => !!a).map((a) => this.runYspec(a, rules.options));\n      }\n      case 'dict': {\n        return Object.keys(value).reduce((p, c) => {\n          const r = rules.options.find((b: any) => b.name === c);\n          const v = r ? this.runYspec(value[c], r) : null;\n          return v !== null ? { ...p, [c]: v } : { ...p };\n        }, {});\n      }\n      default: {\n        return this.checkValue(value, rules?.type);\n      }\n    }\n  }\n\n  checkValue(value: resultTypes, type: TNForm): resultTypes {\n    if ((value === '' || isEmptyObject(value)) && type === 'map') return {};\n\n    if ((value === '' || isEmptyObject(value)) && type === 'list') return [];\n\n    if (value === '' || value === null || isEmptyObject(value)) return null;\n\n    if (typeof value === 'boolean') return value;\n    else if (typeof value === 'string')\n      switch (type) {\n        case 'option':\n          return !isNaN(+value) ? parseInt(value, 10) : value;\n        case 'integer':\n        case 'int':\n          return parseInt(value, 10);\n        case 'float':\n          return parseFloat(value);\n        case 'json':\n          return JSON.parse(value);\n      }\n    else\n      switch (type) {\n        case 'map':\n          return Object.keys(value)\n            .filter((a) => !!a)\n            .reduce((p, c) => ({ ...p, [c]: value[c] }), {});\n\n        case 'list':\n          return Array.isArray(value) ? (value as Array<string>).filter((a) => !!a) : null;\n      }\n\n    return value;\n  }\n}\n",
            "properties": [
                {
                    "name": "conditions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | boolean",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IUIOptions",
            "id": "interface-IUIOptions-735f0912aeff33ab88d1ab8e400a23cb",
            "file": "src/app/core/types/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IConfig } from '@app/shared/configuration/types';\n\n/**\n * \n *```\n{\n    action: 'add' | 'remove';  \n    component: string;    // name of servise to work with  \n    service: string;      // name of component to work with\n}\n```\n *\n */\nexport interface IActionParameter {\n  action: 'add' | 'remove';\n  component: string;\n  service: string;\n}\n\nexport interface IUIOptions {\n  disclaimer?: string;\n}\n\nexport interface IAction {\n  name: string;\n  description: string;\n  display_name: string;\n  run: string;\n  config: IConfig;\n  hostcomponentmap: IActionParameter[];\n  button: 'create_host' | null;\n  ui_options: IUIOptions;\n  children?: IAction[];\n}\n",
            "properties": [
                {
                    "name": "disclaimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IUIoptions",
            "id": "interface-IUIoptions-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "advanced",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "invisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "no_confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\ninvisible?: boolean;\nno_confirm?: boolean;\nadvanced?: boolean;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\ninvisible?: boolean;\nno_confirm?: boolean;\nadvanced?: boolean;\n}\n```\n\n",
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-c3fd6c62e5104c98cb26311a52248a16",
            "file": "src/app/core/store/profile/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { Observable, throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { AuthService } from '@app/core/auth/auth.service';\n\nconst PROFILE_LINK = `${environment.apiRoot}profile/`;\n\nexport interface LastViewedTask {\n  id: number;\n}\n\nexport interface IProfile {\n  textarea: { [key: string]: number };\n  settingsSaved: boolean;\n  lastViewedTask?: LastViewedTask;\n}\n\nexport interface IUser {\n  username: string;\n  change_password: string;\n  profile: IProfile;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private user: IUser;\n\n  constructor(private http: HttpClient, private auth: AuthService) {}\n\n  public getProfile(): Observable<IUser> {\n    const source$ = this.http.get<IUser>(`${PROFILE_LINK}${this.auth.auth.login}/`).pipe(\n      map(user => (!user.profile ? { ...user, profile: this.emptyProfile() } : user)),\n      tap(user => (this.user = user))\n    );\n    return this.auth.auth.login ? source$ : throwError('Not authorized!');\n  }\n\n  emptyProfile() {\n    return { textarea: {}, settingsSaved: false };\n  }\n\n  setUser(key: string, value: string | boolean | { [key: string]: number }) {\n    const profile = { ...this.user.profile };\n    profile[key] = value;\n    this.user = { ...this.user, profile };\n  }\n\n  setProfile(): Observable<IUser> {\n    const { username, profile } = { ...this.user };\n    return this.http.patch<IUser>(`${PROFILE_LINK}${this.user.username}/`, { username, profile });\n  }\n\n  setTextareaProfile(data: { key: string; value: number }): Observable<IUser> {\n    const textarea = { ...this.user.profile.textarea };\n    textarea[data.key] = data.value;\n    this.setUser('textarea', textarea);\n    return this.setProfile();\n  }\n\n  setLastViewedTask(id: number): Observable<IUser> {\n    this.setUser('lastViewedTask', { id });\n    return this.setProfile();\n  }\n\n  addUser(user: { username: string; profile: string }): Observable<IUser> {\n    return this.http.post<IUser>(`${PROFILE_LINK}`, user);\n  }\n\n  setPassword(password: string) {\n    return this.http.patch(this.user.change_password, { password });\n  }\n}\n",
            "properties": [
                {
                    "name": "change_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfile",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IValidator",
            "id": "interface-IValidator-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 147
                },
                {
                    "name": "pattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | RegExp",
                    "optional": true,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 145
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">pattern?: string | RegExp;\nrequired?: boolean;\nmax?: number;\nmin?: number;</code></pre></div>",
            "rawdescription": "\n\n```\npattern?: string | RegExp;\nrequired?: boolean;\nmax?: number;\nmin?: number;\n```\n",
            "methods": []
        },
        {
            "name": "IValue",
            "id": "interface-IValue-19b19308484527efdbe79aeeb38c9a3d",
            "file": "src/app/shared/configuration/scheme/scheme.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { isObject } from '@app/core/types/func';\n\nimport { FieldService } from '../services/field.service';\nimport { IFieldOptions, TNForm, TNReq, TValue } from '../types';\nimport { IYContainer, IYField } from '../yspec/yspec.service';\n\nexport interface IValue {\n  [key: string]: TValue;\n}\n\nexport interface IControl {\n  name: string;\n  type: TNForm;\n  rules: IYField | IYContainer | (IYField | IYContainer)[];\n  form: FormGroup | FormArray;\n  value: IValue | TValue;\n  parent: TNReq;\n}\n\n@Injectable()\nexport class SchemeService {\n  constructor(private service: FieldService) {}\n\n  emptyValidator() {\n    // const isEmptyArray = (v: any) => (Array.isArray(v) && v.length ? v.some((a) => isEmptyValue(a)) : false);\n    // const isEmptyObj = (v: any) => (isObject(v) && Object.keys(v).length ? Object.keys(v).some((a) => isEmptyValue(v[a])) : false);\n    const isEmptyValue = (v: any) => !v || (Array.isArray(v) && !v.length) || (isObject(v) && !Object.keys(v).length);\n    return (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (isEmptyValue(control.value) ? { isEmpty: true } : null);\n  }\n\n  setCurrentForm(type: TNForm, parent: FormGroup, field: IFieldOptions) {\n    const v = field.required ? this.emptyValidator()() : null;\n    const current = type === 'list' || type === 'dict' ? (type === 'list' ? new FormArray([], v) : new FormGroup({}, v)) : new FormControl('', v);\n    parent.setControl(field.name, current);\n    return current;\n  }\n\n  addControlsDict(name: string, source: TValue | IValue, currentForm: FormArray, rules: IYContainer[]): IControl {\n    const value = !source ? rules.reduce((p, c) => ({ ...p, [c.name]: '' }), {}) : source;\n\n    const checkValue = () => {\n      if (Array.isArray(rules)) {\n        if (Array.isArray(value)) {\n          return rules.some((a) => a.name === value[0]);\n        } else if (typeof value === 'object') {\n          return Object.keys(value).every((x) => rules.some((a) => a.name === x));\n        }\n      }\n    };\n\n    if (checkValue()) {\n      const form = new FormGroup({});\n      currentForm.push(form);\n      return { name, value, type: 'dict', rules, form, parent: 'list' };\n    }\n  }\n\n  addControls(name: string, value: TValue | IValue, currentForm: FormGroup | FormArray, opt: IYContainer | IYField | (IYContainer | IYField)[], type: TNReq): IControl {\n    const rules = Array.isArray(opt) ? opt.find((a) => a.name === name) : opt;\n    if (!rules) return;\n    let form = currentForm;\n    if (rules.type !== 'list' && rules.type !== 'dict') {\n      const { validator, controlType } = rules as IYField;\n      if (Array.isArray(currentForm.controls)) {\n        name = currentForm.controls.length.toString();\n        (currentForm as FormArray).push(new FormControl(value || '', this.service.setValidator({ validator, controlType })));\n      } else (currentForm as FormGroup).addControl(rules.name, new FormControl(rules.type !== 'bool' ? value || '' : value, this.service.setValidator({ validator, controlType })));\n    } else {\n      form = rules.type === 'list' ? new FormArray([]) : new FormGroup({});\n      (currentForm as FormGroup).addControl(rules.name, form);\n    }\n\n    return { name, value, type: rules.type, rules, form, parent: type };\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-19b19308484527efdbe79aeeb38c9a3d",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TValue",
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "IValue",
            "id": "interface-IValue-4cd1f32b2d3db5ce944b66105c7f592e-1",
            "file": "src/app/shared/components/actions/master/master.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApiService } from '@app/core/api';\nimport { IAction } from '@app/core/types';\nimport { FieldService } from '@app/shared/configuration/services/field.service';\nimport { ConfigFieldsComponent } from '@app/shared/configuration/fields/fields.component';\nimport { ServiceHostComponent } from '@app/shared/host-components-map/services2hosts/service-host.component';\nimport { Post } from '@app/shared/host-components-map/types';\nimport { IConfigAttr } from '@app/shared/configuration/types';\nimport { IOutput } from '@app/shared/configuration/services/field.service';\n\nexport interface IValue {\n  config?: ConfigFieldsComponent;\n  hostmap?: ServiceHostComponent;\n}\n\nexport enum whatShow {\n  none = 'none',\n  config = 'config',\n  hostMap = 'hostmap',\n  stepper = 'stepper',\n}\n\nexport interface IMasterData {\n  attr: IConfigAttr;\n  config: IOutput;\n  hc: Post[];\n  verbose?: boolean;\n}\n\n@Injectable()\nexport class MasterService {\n  constructor(private api: ApiService, private configService: FieldService) {}\n\n  spotShow(action: IAction): whatShow {\n    const config = action.config?.config?.length;\n    const hm = action.hostcomponentmap?.length;\n    return config ? (hm ? whatShow.stepper : whatShow.config) : hm ? whatShow.hostMap : whatShow.none;\n  }\n\n  parseData(v: IValue): IMasterData {\n    const getData = (attr: IConfigAttr, c: ConfigFieldsComponent, h: ServiceHostComponent) => {\n      const config = c ? this.configService.parseValue(c.form.value, c.rawConfig.config) : undefined;\n      const hc = h?.statePost.data;\n      return { attr, config, hc };\n    };\n    return v ? getData(v.config?.attr, v.config, v.hostmap) : undefined;\n  }\n\n  send(url: string, value: { config: any; hc: Post[] }) {\n    return this.api.post(url, value);\n  }\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigFieldsComponent",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hostmap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServiceHostComponent",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IValue-1"
        },
        {
            "name": "IVariantSet",
            "id": "interface-IVariantSet-312293bd783a3bdacb9b6b1a75808e99",
            "file": "src/app/shared/configuration/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IYspec } from './yspec/yspec.service';\nimport { TFormOptions } from './services/field.service';\n\nexport type stateType = 'created' | 'locked';\n\nexport type TNBase = 'string' | 'integer' | 'int' | 'boolean' | 'bool' | 'float';\nexport type TNReq = 'dict' | 'list';\nexport type TNSpec = 'structure' | 'group' | 'option' | 'json' | 'map' | 'file' | 'text' | 'password' | 'secrettext' | 'variant';\nexport type TNForm = TNBase | TNReq | TNSpec;\nexport type simpleTypes = string | number | boolean;\nexport type resultTypes = simpleTypes | simpleTypes[] | object;\nexport type TValue = string | number | boolean | object | any[];\n\n/**\n *```\n {\n    invisible?: boolean;\n    no_confirm?: boolean;\n    advanced?: boolean;\n }\n ```\n *\n */\nexport interface IUIoptions {\n  invisible?: boolean;\n  no_confirm?: boolean;\n  advanced?: boolean;\n}\n\n/**\n * ```\n {\n    min?: number;\n    max?: number;\n    option?: any;\n    read_only?: stateType[];   // created | locked\n    yspec?: IYspec;\n    rules?: any;\n    active?: boolean;\n}\n * ```\n */\nexport interface IVariantSet {\n  name?: string;\n  strict: boolean;\n  type: 'config' | 'inline';\n  value: string[];\n}\n\nexport interface ILimits {\n  min?: number;\n  max?: number;\n  option?: any;\n  read_only?: stateType[];\n  yspec?: IYspec;\n  rules?: any;\n  active?: boolean;\n  source?: IVariantSet;\n}\n\n/**\n * Property config object from backend\n */\nexport interface IFieldStack {\n  name: string;\n  subname: string;\n  display_name: string;\n  type: TNForm;\n  default: TValue;\n  value: TValue;\n  required: boolean;\n  activatable: boolean;\n  read_only: boolean;\n  description?: string;\n  limits?: ILimits;\n  ui_options?: IUIoptions;\n}\n\n/**\n * The object for config for backend\n */\nexport interface IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  config: IFieldStack[];\n  attr?: IConfigAttr;\n  obj_ref?: number;\n}\n\n/**\n *```\n {\n    [group: string]: { active: boolean };\n}\n ```\n */\nexport interface IConfigAttr {\n  [group: string]: { active?: boolean };\n\n  group_keys?: { [key: string]: boolean };\n  custom_group_keys?: { [key: string]: boolean };\n}\n\n//#region Modified data for ngForm build\n\n/**\n * Mark for rendering required component\n */\nexport type controlType =\n  'boolean'\n  | 'textbox'\n  | 'textarea'\n  | 'json'\n  | 'password'\n  | 'list'\n  | 'map'\n  | 'dropdown'\n  | 'file'\n  | 'text'\n  | 'structure'\n  | 'secrettext';\n\n/**\n *```\n pattern?: string | RegExp;\n required?: boolean;\n max?: number;\n min?: number;\n ```\n */\nexport interface IValidator {\n  pattern?: string | RegExp;\n  required?: boolean;\n  max?: number;\n  min?: number;\n}\n\nexport interface CompareConfig extends IConfig {\n  color: string;\n}\n\nexport interface ICompare {\n  id: number;\n  date: string;\n  value: string;\n  color: string;\n}\n\nexport interface IFormOptions extends IFieldStack {\n  key?: string;\n  hidden: boolean;\n}\n\nexport interface IPanelOptions extends IFormOptions {\n  options: TFormOptions[];\n  active: boolean;\n}\n\nexport interface ICanGroup {\n  group?: boolean;\n}\n\nexport interface IFieldOptions extends IFormOptions, ICanGroup {\n  controlType: controlType;\n  validator: IValidator;\n  compare: ICompare[];\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"config\" | \"inline\"",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\nmin?: number;\nmax?: number;\noption?: any;\nread_only?: stateType[];   // created | locked\nyspec?: IYspec;\nrules?: any;\nactive?: boolean;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\nmin?: number;\nmax?: number;\noption?: any;\nread_only?: stateType[];   // created | locked\nyspec?: IYspec;\nrules?: any;\nactive?: boolean;\n}\n```\n",
            "methods": []
        },
        {
            "name": "IVersionInfo",
            "id": "interface-IVersionInfo-7ae880838369c63d70d654bd977c19c3",
            "file": "src/app/core/services/config.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst CONFIG_URL = '/assets/config.json';\nexport interface IVersionInfo {\n  version: string;\n  commit_id: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigService {\n  appConfig$: Observable<IVersionInfo>;\n\n  constructor(private http: HttpClient) {}\n\n  get version() {\n    return localStorage.getItem('adcm:version') || '';\n  }\n\n  set version(version: string) {\n    localStorage.setItem('adcm:version', version);\n  }\n\n  checkVersion(c: IVersionInfo): IVersionInfo {\n    const version = `${c.version}-${c.commit_id}`;\n    if (!this.version) this.version = version;\n    else if (this.version !== version) {\n      this.version = version;\n      return null;\n    }\n    return c;\n  }\n\n  load() {\n    return this.http.get<IVersionInfo>(`${CONFIG_URL}?nocache=${Date.now()}`).pipe(map((c) => this.checkVersion(c)));\n  }\n}\n",
            "properties": [
                {
                    "name": "commit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IYContainer",
            "id": "interface-IYContainer-236ea186c68ad07c4fefea3b5504940f",
            "file": "src/app/shared/configuration/yspec/yspec.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IRoot } from '@app/core/types';\n\nimport { IFieldOptions, controlType, IValidator, TNBase, TNReq } from '../types';\nimport { getControlType, getPattern } from '../services/field.service';\n\nexport type TMatch = TNBase | TNReq;\n\n/**\n *```\n {\n    match: matchType;\n    selector?: string;\n    variants?: { [key: string]: string };\n    item?: string;\n    items?: IRoot;        // { [key: string]: string; }\n    required_items?: string[];\n    default_item?: string;\n }\n ```\n */\ninterface IYRoot {\n  match: TMatch;\n  selector?: string;\n  variants?: { [key: string]: string };\n  item?: string;\n  items?: IRoot;\n  required_items?: string[];\n  default_item?: string;\n}\n\n/**\n *```\n {\n    [key: string]: IYRoot;\n }\n ```\n */\nexport interface IYspec {\n  [key: string]: IYRoot;\n}\n\n/**\n *```\n{\n    name:         string;\n    path:         string[];\n    type:         simpleType;\n    controlType:  controlType;\n    validator:    ValidatorInfo;\n}\n *```\n */\nexport interface IYField {\n  name: string;\n  path: string[];\n  type: TNBase;\n  controlType: controlType;\n  validator: IValidator;\n}\n\n/**\n * ```\n * {\n *   name:      string;\n *   type:      reqursionType;    // 'list' | 'dict'\n *   options:   IYContainer | IYField | (IYContainer | IYField)[];\n * }\n *```\n */\nexport interface IYContainer {\n  name: string;\n  type: TNReq;\n  options: IYContainer | IYField | (IYContainer | IYField)[];\n}\n\nexport interface IStructure extends IFieldOptions {\n  rules: { options: any; type: string; name: string };\n}\n\n@Injectable()\nexport class YspecService {\n  private root: IYspec;\n\n  set Root(yspec: IYspec) {\n    this.root = yspec;\n  }\n\n  get Root() {\n    return this.root;\n  }\n\n  build(rule = 'root', path: string[] = []): IYContainer | IYField {\n    const { match, item, items } = this.Root[rule];\n\n    switch (match) {\n      case 'list':\n        return this.list(item, path);\n      case 'dict':\n        return this.dict(items, path);\n      // case 'one_of':\n      //   return this.one_of();\n      // case 'dict_key_selection':\n      //   return this.dict_key_selection();\n      default:\n        return this.field({ type: match, path });\n    }\n  }\n\n  field(field: { type: TNBase; path: string[] }): IYField {\n    const name = field.path.reverse()[0];\n    return {\n      name,\n      type: field.type,\n      path: field.path,\n      controlType: getControlType(field.type),\n      validator: {\n        required: this.findRule(field.path, 'required_items'),\n        pattern: getPattern(field.type),\n      },\n    };\n  }\n\n  findRule(path: string[], name: string): boolean {\n    const [field, parent] = path;\n    const rule = this.Root[parent];\n    return !!(rule && rule[name] && Array.isArray(rule[name]) && rule[name].includes(field));\n  }\n\n  list(item: string, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return { type: 'list', name, options: this.build(item, [...path, item]) };\n  }\n\n  dict(items: IRoot, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return {\n      type: 'dict',\n      name,\n      options: Object.keys(items).map((item_name: string) => this.build(items[item_name], [...path, item_name])),\n    };\n  }\n\n  one_of() {}\n\n  dict_key_selection() {}\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYContainer | IYField | (IYContainer | IYField)[]",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TNReq",
                    "optional": false,
                    "description": "",
                    "line": 84
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\n  name:      string;\n  type:      reqursionType;    // &#39;list&#39; | &#39;dict&#39;\n  options:   IYContainer | IYField | (IYContainer | IYField)[];\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\n  name:      string;\n  type:      reqursionType;    // 'list' | 'dict'\n  options:   IYContainer | IYField | (IYContainer | IYField)[];\n}\n```\n",
            "methods": []
        },
        {
            "name": "IYField",
            "id": "interface-IYField-236ea186c68ad07c4fefea3b5504940f",
            "file": "src/app/shared/configuration/yspec/yspec.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IRoot } from '@app/core/types';\n\nimport { IFieldOptions, controlType, IValidator, TNBase, TNReq } from '../types';\nimport { getControlType, getPattern } from '../services/field.service';\n\nexport type TMatch = TNBase | TNReq;\n\n/**\n *```\n {\n    match: matchType;\n    selector?: string;\n    variants?: { [key: string]: string };\n    item?: string;\n    items?: IRoot;        // { [key: string]: string; }\n    required_items?: string[];\n    default_item?: string;\n }\n ```\n */\ninterface IYRoot {\n  match: TMatch;\n  selector?: string;\n  variants?: { [key: string]: string };\n  item?: string;\n  items?: IRoot;\n  required_items?: string[];\n  default_item?: string;\n}\n\n/**\n *```\n {\n    [key: string]: IYRoot;\n }\n ```\n */\nexport interface IYspec {\n  [key: string]: IYRoot;\n}\n\n/**\n *```\n{\n    name:         string;\n    path:         string[];\n    type:         simpleType;\n    controlType:  controlType;\n    validator:    ValidatorInfo;\n}\n *```\n */\nexport interface IYField {\n  name: string;\n  path: string[];\n  type: TNBase;\n  controlType: controlType;\n  validator: IValidator;\n}\n\n/**\n * ```\n * {\n *   name:      string;\n *   type:      reqursionType;    // 'list' | 'dict'\n *   options:   IYContainer | IYField | (IYContainer | IYField)[];\n * }\n *```\n */\nexport interface IYContainer {\n  name: string;\n  type: TNReq;\n  options: IYContainer | IYField | (IYContainer | IYField)[];\n}\n\nexport interface IStructure extends IFieldOptions {\n  rules: { options: any; type: string; name: string };\n}\n\n@Injectable()\nexport class YspecService {\n  private root: IYspec;\n\n  set Root(yspec: IYspec) {\n    this.root = yspec;\n  }\n\n  get Root() {\n    return this.root;\n  }\n\n  build(rule = 'root', path: string[] = []): IYContainer | IYField {\n    const { match, item, items } = this.Root[rule];\n\n    switch (match) {\n      case 'list':\n        return this.list(item, path);\n      case 'dict':\n        return this.dict(items, path);\n      // case 'one_of':\n      //   return this.one_of();\n      // case 'dict_key_selection':\n      //   return this.dict_key_selection();\n      default:\n        return this.field({ type: match, path });\n    }\n  }\n\n  field(field: { type: TNBase; path: string[] }): IYField {\n    const name = field.path.reverse()[0];\n    return {\n      name,\n      type: field.type,\n      path: field.path,\n      controlType: getControlType(field.type),\n      validator: {\n        required: this.findRule(field.path, 'required_items'),\n        pattern: getPattern(field.type),\n      },\n    };\n  }\n\n  findRule(path: string[], name: string): boolean {\n    const [field, parent] = path;\n    const rule = this.Root[parent];\n    return !!(rule && rule[name] && Array.isArray(rule[name]) && rule[name].includes(field));\n  }\n\n  list(item: string, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return { type: 'list', name, options: this.build(item, [...path, item]) };\n  }\n\n  dict(items: IRoot, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return {\n      type: 'dict',\n      name,\n      options: Object.keys(items).map((item_name: string) => this.build(items[item_name], [...path, item_name])),\n    };\n  }\n\n  one_of() {}\n\n  dict_key_selection() {}\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "controlType",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TNBase",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IValidator",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\nname:         string;\npath:         string[];\ntype:         simpleType;\ncontrolType:  controlType;\nvalidator:    ValidatorInfo;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\nname:         string;\npath:         string[];\ntype:         simpleType;\ncontrolType:  controlType;\nvalidator:    ValidatorInfo;\n}\n```\n",
            "methods": []
        },
        {
            "name": "IYRoot",
            "id": "interface-IYRoot-236ea186c68ad07c4fefea3b5504940f",
            "file": "src/app/shared/configuration/yspec/yspec.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IRoot } from '@app/core/types';\n\nimport { IFieldOptions, controlType, IValidator, TNBase, TNReq } from '../types';\nimport { getControlType, getPattern } from '../services/field.service';\n\nexport type TMatch = TNBase | TNReq;\n\n/**\n *```\n {\n    match: matchType;\n    selector?: string;\n    variants?: { [key: string]: string };\n    item?: string;\n    items?: IRoot;        // { [key: string]: string; }\n    required_items?: string[];\n    default_item?: string;\n }\n ```\n */\ninterface IYRoot {\n  match: TMatch;\n  selector?: string;\n  variants?: { [key: string]: string };\n  item?: string;\n  items?: IRoot;\n  required_items?: string[];\n  default_item?: string;\n}\n\n/**\n *```\n {\n    [key: string]: IYRoot;\n }\n ```\n */\nexport interface IYspec {\n  [key: string]: IYRoot;\n}\n\n/**\n *```\n{\n    name:         string;\n    path:         string[];\n    type:         simpleType;\n    controlType:  controlType;\n    validator:    ValidatorInfo;\n}\n *```\n */\nexport interface IYField {\n  name: string;\n  path: string[];\n  type: TNBase;\n  controlType: controlType;\n  validator: IValidator;\n}\n\n/**\n * ```\n * {\n *   name:      string;\n *   type:      reqursionType;    // 'list' | 'dict'\n *   options:   IYContainer | IYField | (IYContainer | IYField)[];\n * }\n *```\n */\nexport interface IYContainer {\n  name: string;\n  type: TNReq;\n  options: IYContainer | IYField | (IYContainer | IYField)[];\n}\n\nexport interface IStructure extends IFieldOptions {\n  rules: { options: any; type: string; name: string };\n}\n\n@Injectable()\nexport class YspecService {\n  private root: IYspec;\n\n  set Root(yspec: IYspec) {\n    this.root = yspec;\n  }\n\n  get Root() {\n    return this.root;\n  }\n\n  build(rule = 'root', path: string[] = []): IYContainer | IYField {\n    const { match, item, items } = this.Root[rule];\n\n    switch (match) {\n      case 'list':\n        return this.list(item, path);\n      case 'dict':\n        return this.dict(items, path);\n      // case 'one_of':\n      //   return this.one_of();\n      // case 'dict_key_selection':\n      //   return this.dict_key_selection();\n      default:\n        return this.field({ type: match, path });\n    }\n  }\n\n  field(field: { type: TNBase; path: string[] }): IYField {\n    const name = field.path.reverse()[0];\n    return {\n      name,\n      type: field.type,\n      path: field.path,\n      controlType: getControlType(field.type),\n      validator: {\n        required: this.findRule(field.path, 'required_items'),\n        pattern: getPattern(field.type),\n      },\n    };\n  }\n\n  findRule(path: string[], name: string): boolean {\n    const [field, parent] = path;\n    const rule = this.Root[parent];\n    return !!(rule && rule[name] && Array.isArray(rule[name]) && rule[name].includes(field));\n  }\n\n  list(item: string, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return { type: 'list', name, options: this.build(item, [...path, item]) };\n  }\n\n  dict(items: IRoot, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return {\n      type: 'dict',\n      name,\n      options: Object.keys(items).map((item_name: string) => this.build(items[item_name], [...path, item_name])),\n    };\n  }\n\n  one_of() {}\n\n  dict_key_selection() {}\n}\n",
            "properties": [
                {
                    "name": "default_item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRoot",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "match",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TMatch",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "required_items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "variants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\nmatch: matchType;\nselector?: string;\nvariants?: { [key: string]: string };\nitem?: string;\nitems?: IRoot;        // { [key: string]: string; }\nrequired_items?: string[];\ndefault_item?: string;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\nmatch: matchType;\nselector?: string;\nvariants?: { [key: string]: string };\nitem?: string;\nitems?: IRoot;        // { [key: string]: string; }\nrequired_items?: string[];\ndefault_item?: string;\n}\n```\n",
            "methods": []
        },
        {
            "name": "IYspec",
            "id": "interface-IYspec-236ea186c68ad07c4fefea3b5504940f",
            "file": "src/app/shared/configuration/yspec/yspec.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IRoot } from '@app/core/types';\n\nimport { IFieldOptions, controlType, IValidator, TNBase, TNReq } from '../types';\nimport { getControlType, getPattern } from '../services/field.service';\n\nexport type TMatch = TNBase | TNReq;\n\n/**\n *```\n {\n    match: matchType;\n    selector?: string;\n    variants?: { [key: string]: string };\n    item?: string;\n    items?: IRoot;        // { [key: string]: string; }\n    required_items?: string[];\n    default_item?: string;\n }\n ```\n */\ninterface IYRoot {\n  match: TMatch;\n  selector?: string;\n  variants?: { [key: string]: string };\n  item?: string;\n  items?: IRoot;\n  required_items?: string[];\n  default_item?: string;\n}\n\n/**\n *```\n {\n    [key: string]: IYRoot;\n }\n ```\n */\nexport interface IYspec {\n  [key: string]: IYRoot;\n}\n\n/**\n *```\n{\n    name:         string;\n    path:         string[];\n    type:         simpleType;\n    controlType:  controlType;\n    validator:    ValidatorInfo;\n}\n *```\n */\nexport interface IYField {\n  name: string;\n  path: string[];\n  type: TNBase;\n  controlType: controlType;\n  validator: IValidator;\n}\n\n/**\n * ```\n * {\n *   name:      string;\n *   type:      reqursionType;    // 'list' | 'dict'\n *   options:   IYContainer | IYField | (IYContainer | IYField)[];\n * }\n *```\n */\nexport interface IYContainer {\n  name: string;\n  type: TNReq;\n  options: IYContainer | IYField | (IYContainer | IYField)[];\n}\n\nexport interface IStructure extends IFieldOptions {\n  rules: { options: any; type: string; name: string };\n}\n\n@Injectable()\nexport class YspecService {\n  private root: IYspec;\n\n  set Root(yspec: IYspec) {\n    this.root = yspec;\n  }\n\n  get Root() {\n    return this.root;\n  }\n\n  build(rule = 'root', path: string[] = []): IYContainer | IYField {\n    const { match, item, items } = this.Root[rule];\n\n    switch (match) {\n      case 'list':\n        return this.list(item, path);\n      case 'dict':\n        return this.dict(items, path);\n      // case 'one_of':\n      //   return this.one_of();\n      // case 'dict_key_selection':\n      //   return this.dict_key_selection();\n      default:\n        return this.field({ type: match, path });\n    }\n  }\n\n  field(field: { type: TNBase; path: string[] }): IYField {\n    const name = field.path.reverse()[0];\n    return {\n      name,\n      type: field.type,\n      path: field.path,\n      controlType: getControlType(field.type),\n      validator: {\n        required: this.findRule(field.path, 'required_items'),\n        pattern: getPattern(field.type),\n      },\n    };\n  }\n\n  findRule(path: string[], name: string): boolean {\n    const [field, parent] = path;\n    const rule = this.Root[parent];\n    return !!(rule && rule[name] && Array.isArray(rule[name]) && rule[name].includes(field));\n  }\n\n  list(item: string, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return { type: 'list', name, options: this.build(item, [...path, item]) };\n  }\n\n  dict(items: IRoot, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return {\n      type: 'dict',\n      name,\n      options: Object.keys(items).map((item_name: string) => this.build(items[item_name], [...path, item_name])),\n    };\n  }\n\n  one_of() {}\n\n  dict_key_selection() {}\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-236ea186c68ad07c4fefea3b5504940f",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IYRoot",
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\n[key: string]: IYRoot;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\n[key: string]: IYRoot;\n}\n```\n",
            "methods": []
        },
        {
            "name": "JobAction",
            "id": "interface-JobAction-a25a180383c9eab0fd04d0bffbe4860c",
            "file": "src/app/core/types/task-job.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from './api';\nimport { Entity } from '@adwp-ui/widgets';\n\nexport type JobStatus = 'created' | 'running' | 'failed' | 'success' | 'aborted';\n\nexport type JobType = 'component' | 'service' | 'cluster' | 'host' | 'provider';\n\nexport interface JobObject {\n  id: number;\n  name: string;\n  type: JobType;\n  url?: string[];\n}\n\ninterface TaskBase extends Entity {\n  start_date: string;\n  finish_date: string;\n  objects: JobObject[];\n  status: JobStatus;\n  action: JobAction;\n  terminatable: boolean;\n  cancel: string;\n}\n\nexport interface JobAction {\n  prototype_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  display_name: string;\n}\ninterface JobRaw extends TaskBase {\n  log_files: LogFile[];\n  start_date: string;\n  finish_date: string;\n}\n\nexport interface TaskRaw extends TaskBase {\n  jobs: Job[];\n}\n\nexport type Job = JobRaw & BaseEntity;\nexport type Task = TaskRaw & BaseEntity;\n\nexport interface LogFile {\n  id: number;\n  url: string;\n  name: string;\n  type: string;\n  format: 'txt' | 'json';\n  download_url: string;\n  content: string | CheckLog[];\n}\n\nexport interface CheckLog {\n  title: string;\n  message: string;\n  result: boolean;\n  type: 'group' | 'check';\n  content?: CheckLog[];\n}\n",
            "properties": [
                {
                    "name": "bundle_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "prototype_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "prototype_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "JobObject",
            "id": "interface-JobObject-a25a180383c9eab0fd04d0bffbe4860c",
            "file": "src/app/core/types/task-job.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from './api';\nimport { Entity } from '@adwp-ui/widgets';\n\nexport type JobStatus = 'created' | 'running' | 'failed' | 'success' | 'aborted';\n\nexport type JobType = 'component' | 'service' | 'cluster' | 'host' | 'provider';\n\nexport interface JobObject {\n  id: number;\n  name: string;\n  type: JobType;\n  url?: string[];\n}\n\ninterface TaskBase extends Entity {\n  start_date: string;\n  finish_date: string;\n  objects: JobObject[];\n  status: JobStatus;\n  action: JobAction;\n  terminatable: boolean;\n  cancel: string;\n}\n\nexport interface JobAction {\n  prototype_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  display_name: string;\n}\ninterface JobRaw extends TaskBase {\n  log_files: LogFile[];\n  start_date: string;\n  finish_date: string;\n}\n\nexport interface TaskRaw extends TaskBase {\n  jobs: Job[];\n}\n\nexport type Job = JobRaw & BaseEntity;\nexport type Task = TaskRaw & BaseEntity;\n\nexport interface LogFile {\n  id: number;\n  url: string;\n  name: string;\n  type: string;\n  format: 'txt' | 'json';\n  download_url: string;\n  content: string | CheckLog[];\n}\n\nexport interface CheckLog {\n  title: string;\n  message: string;\n  result: boolean;\n  type: 'group' | 'check';\n  content?: CheckLog[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobType",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "JobRaw",
            "id": "interface-JobRaw-a25a180383c9eab0fd04d0bffbe4860c",
            "file": "src/app/core/types/task-job.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from './api';\nimport { Entity } from '@adwp-ui/widgets';\n\nexport type JobStatus = 'created' | 'running' | 'failed' | 'success' | 'aborted';\n\nexport type JobType = 'component' | 'service' | 'cluster' | 'host' | 'provider';\n\nexport interface JobObject {\n  id: number;\n  name: string;\n  type: JobType;\n  url?: string[];\n}\n\ninterface TaskBase extends Entity {\n  start_date: string;\n  finish_date: string;\n  objects: JobObject[];\n  status: JobStatus;\n  action: JobAction;\n  terminatable: boolean;\n  cancel: string;\n}\n\nexport interface JobAction {\n  prototype_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  display_name: string;\n}\ninterface JobRaw extends TaskBase {\n  log_files: LogFile[];\n  start_date: string;\n  finish_date: string;\n}\n\nexport interface TaskRaw extends TaskBase {\n  jobs: Job[];\n}\n\nexport type Job = JobRaw & BaseEntity;\nexport type Task = TaskRaw & BaseEntity;\n\nexport interface LogFile {\n  id: number;\n  url: string;\n  name: string;\n  type: string;\n  format: 'txt' | 'json';\n  download_url: string;\n  content: string | CheckLog[];\n}\n\nexport interface CheckLog {\n  title: string;\n  message: string;\n  result: boolean;\n  type: 'group' | 'check';\n  content?: CheckLog[];\n}\n",
            "properties": [
                {
                    "name": "finish_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "log_files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LogFile[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "start_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "TaskBase"
        },
        {
            "name": "LastViewedTask",
            "id": "interface-LastViewedTask-c3fd6c62e5104c98cb26311a52248a16",
            "file": "src/app/core/store/profile/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { Observable, throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { AuthService } from '@app/core/auth/auth.service';\n\nconst PROFILE_LINK = `${environment.apiRoot}profile/`;\n\nexport interface LastViewedTask {\n  id: number;\n}\n\nexport interface IProfile {\n  textarea: { [key: string]: number };\n  settingsSaved: boolean;\n  lastViewedTask?: LastViewedTask;\n}\n\nexport interface IUser {\n  username: string;\n  change_password: string;\n  profile: IProfile;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private user: IUser;\n\n  constructor(private http: HttpClient, private auth: AuthService) {}\n\n  public getProfile(): Observable<IUser> {\n    const source$ = this.http.get<IUser>(`${PROFILE_LINK}${this.auth.auth.login}/`).pipe(\n      map(user => (!user.profile ? { ...user, profile: this.emptyProfile() } : user)),\n      tap(user => (this.user = user))\n    );\n    return this.auth.auth.login ? source$ : throwError('Not authorized!');\n  }\n\n  emptyProfile() {\n    return { textarea: {}, settingsSaved: false };\n  }\n\n  setUser(key: string, value: string | boolean | { [key: string]: number }) {\n    const profile = { ...this.user.profile };\n    profile[key] = value;\n    this.user = { ...this.user, profile };\n  }\n\n  setProfile(): Observable<IUser> {\n    const { username, profile } = { ...this.user };\n    return this.http.patch<IUser>(`${PROFILE_LINK}${this.user.username}/`, { username, profile });\n  }\n\n  setTextareaProfile(data: { key: string; value: number }): Observable<IUser> {\n    const textarea = { ...this.user.profile.textarea };\n    textarea[data.key] = data.value;\n    this.setUser('textarea', textarea);\n    return this.setProfile();\n  }\n\n  setLastViewedTask(id: number): Observable<IUser> {\n    this.setUser('lastViewedTask', { id });\n    return this.setProfile();\n  }\n\n  addUser(user: { username: string; profile: string }): Observable<IUser> {\n    return this.http.post<IUser>(`${PROFILE_LINK}`, user);\n  }\n\n  setPassword(password: string) {\n    return this.http.patch(this.user.change_password, { password });\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LeftMenuItem",
            "id": "interface-LeftMenuItem-3efccba74ac1719d45f4a3d82ada60e7",
            "file": "src/app/shared/details/left-menu/left-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ComponentFactoryResolver, ComponentRef, Input, Type, ViewChild, ViewContainerRef } from '@angular/core';\n\nimport { AdcmEntity } from '@app/models/entity';\nimport { MenuItemAbstractDirective } from '@app/abstract-directives/menu-item.abstract.directive';\n\nexport interface LeftMenuItem {\n  link: string;\n  label: string;\n  data?: any;\n  component: Type<MenuItemAbstractDirective>;\n}\n\n@Component({\n  selector: 'app-left-menu',\n  template: `\n    <mat-nav-list>\n      <ng-container #menu></ng-container>\n    </mat-nav-list>\n  `,\n  styleUrls: ['./left-menu.component.scss']\n})\nexport class LeftMenuComponent {\n\n  @ViewChild('menu', { read: ViewContainerRef }) menuRef: ViewContainerRef;\n\n  private _leftMenu: LeftMenuItem[] = [];\n  @Input() set leftMenu(leftMenu: LeftMenuItem[]) {\n    this._leftMenu = leftMenu;\n    this.rebuildComponents();\n  }\n  get leftMenu(): LeftMenuItem[] {\n    return this._leftMenu;\n  }\n\n  @Input() set entity(entity: AdcmEntity) {\n    this._entity = entity;\n    this.componentsRef.forEach((componentRef) => componentRef.instance.entity = entity);\n  }\n  get entity(): AdcmEntity {\n    return this._entity;\n  }\n\n  private componentsRef: Array<ComponentRef<any>> = [];\n  private _entity: AdcmEntity;\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n  ) {}\n\n  rebuildComponents() {\n    setTimeout(() => {\n      this.componentsRef = [];\n      this.menuRef.clear();\n      this.leftMenu.forEach((item) => {\n        const componentFactory =\n          this.componentFactoryResolver.resolveComponentFactory(item.component);\n        const componentRef = this.menuRef.createComponent(componentFactory);\n        componentRef.instance.label = item.label;\n        componentRef.instance.link = item.link;\n        if (item.data) {\n          componentRef.instance.data = item.data;\n        }\n        if (this.entity !== undefined) {\n          componentRef.instance.entity = this.entity;\n        }\n        this.componentsRef.push(componentRef);\n      });\n    });\n  }\n\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<MenuItemAbstractDirective>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "License",
            "id": "interface-License-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "license",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"unaccepted\" | \"accepted\" | \"absent\"",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ListInstance",
            "id": "interface-ListInstance-3c12cd1c1b7e9c952df7e5ee215ece55",
            "file": "src/app/shared/components/list/list-service-token.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\nimport { TypeName } from '@app/core/types';\nimport { ParamMap } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ListResult } from '@app/models/list-result';\n\nexport const LIST_SERVICE_PROVIDER = new InjectionToken<IListService<any>>('ListService');\n\nexport interface ListInstance {\n  typeName: TypeName;\n  columns: string[];\n}\n\nexport interface IListService<T> {\n  current: ListInstance;\n\n  initInstance(typeName?: TypeName): ListInstance;\n\n  getList(p: ParamMap, typeName?: string): Observable<ListResult<T>>\n\n  delete(row: T): Observable<Object>;\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ListResult",
            "id": "interface-ListResult-90aae971ca3fcc1d40b149a6b8f759d3",
            "file": "src/app/models/list-result.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListResult<T> {\n  count: number;\n  next?: string;\n  previous?: string;\n  results: T[];\n}\n",
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "next",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "previous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LogFile",
            "id": "interface-LogFile-a25a180383c9eab0fd04d0bffbe4860c",
            "file": "src/app/core/types/task-job.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from './api';\nimport { Entity } from '@adwp-ui/widgets';\n\nexport type JobStatus = 'created' | 'running' | 'failed' | 'success' | 'aborted';\n\nexport type JobType = 'component' | 'service' | 'cluster' | 'host' | 'provider';\n\nexport interface JobObject {\n  id: number;\n  name: string;\n  type: JobType;\n  url?: string[];\n}\n\ninterface TaskBase extends Entity {\n  start_date: string;\n  finish_date: string;\n  objects: JobObject[];\n  status: JobStatus;\n  action: JobAction;\n  terminatable: boolean;\n  cancel: string;\n}\n\nexport interface JobAction {\n  prototype_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  display_name: string;\n}\ninterface JobRaw extends TaskBase {\n  log_files: LogFile[];\n  start_date: string;\n  finish_date: string;\n}\n\nexport interface TaskRaw extends TaskBase {\n  jobs: Job[];\n}\n\nexport type Job = JobRaw & BaseEntity;\nexport type Task = TaskRaw & BaseEntity;\n\nexport interface LogFile {\n  id: number;\n  url: string;\n  name: string;\n  type: string;\n  format: 'txt' | 'json';\n  download_url: string;\n  content: string | CheckLog[];\n}\n\nexport interface CheckLog {\n  title: string;\n  message: string;\n  result: boolean;\n  type: 'group' | 'check';\n  content?: CheckLog[];\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | CheckLog[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "download_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"txt\" | \"json\"",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NavigationState",
            "id": "interface-NavigationState-2ffa191f386016a5cf13a354c908f2d0",
            "file": "src/app/store/navigation/navigation.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Action,\n  createAction,\n  createFeatureSelector,\n  createReducer,\n  createSelector,\n  on,\n  props,\n} from '@ngrx/store';\nimport { ParamMap } from '@angular/router';\nimport { map } from 'rxjs/operators';\nimport { Observable, zip } from 'rxjs';\n\nimport { AdcmTypedEntity } from '@app/models/entity';\nimport { TypeName } from '@app/core/types';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n\nexport const setPath = createAction('[Navigation] Set path', props<{ path: AdcmTypedEntity[] }>());\nexport const setPathOfRoute = createAction('[Navigation] Set path', props<{ params: ParamMap }>());\n\nexport interface NavigationState {\n  path: AdcmTypedEntity[];\n}\n\nconst initialState: NavigationState = {\n  path: [],\n};\n\nconst reducer = createReducer(\n  initialState,\n  on(setPath, (state, { path }) => ({ path })),\n);\n\nexport function navigationReducer(state: NavigationState, action: Action) {\n  return reducer(state, action);\n}\n\nexport const getNavigationState = createFeatureSelector<NavigationState>('navigation');\nexport const getNavigationPath = createSelector(\n  getNavigationState,\n  state => state.path\n);\n\nexport function getEventEntityType(type: string): TypeName {\n  switch (type) {\n    case 'component':\n      return 'servicecomponent';\n    case ConcernEventType.Cluster:\n      return 'cluster';\n    case ConcernEventType.Service:\n      return 'service';\n    case ConcernEventType.ServiceComponent:\n      return 'servicecomponent';\n    case ConcernEventType.Host:\n      return 'host';\n    case ConcernEventType.HostProvider:\n      return 'provider';\n  }\n}\n\nexport function getPath(getters: Observable<AdcmTypedEntity>[]): Observable<Action> {\n  return zip(...getters).pipe(\n    map((path: AdcmTypedEntity[]) => setPath({ path })),\n  );\n}\n\n",
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdcmTypedEntity[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NotificationsData",
            "id": "interface-NotificationsData-391bc2abd632d574b4523b00c2426438",
            "file": "src/app/components/bell/bell.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';\nimport { BaseDirective } from '@adwp-ui/widgets';\nimport { BehaviorSubject, combineLatest, interval, Observable, zip } from 'rxjs';\nimport { filter, map, mergeMap, take, takeWhile } from 'rxjs/operators';\n\nimport { TaskService } from '@app/services/task.service';\nimport { ACKNOWLEDGE_EVENT, NotificationsComponent } from '@app/components/notifications/notifications.component';\nimport { JobStatus, Task, TaskRaw } from '@app/core/types';\nimport { EventMessage, ProfileService } from '@app/core/store';\nimport { Stats, StatsService } from '@app/services/stats.service';\n\nconst RUNNING_COLOR = '#FFEA00';\nconst SUCCESS_COLOR = '#1EE564';\nconst FAILED_COLOR = '#FF8A80';\n\nexport interface NotificationsData {\n  runningCount: number;\n  successCount: number;\n  failedCount: number;\n}\n\n@Component({\n  selector: 'app-bell',\n  template: `\n    <div\n      appPopover\n      [component]=\"NotificationsComponent\"\n      [event]=\"bindedPopoverEvent\"\n      [data]=\"{ counts: counts, tasks: tasks }\"\n      class=\"bell-wrapper\"\n    >\n      <div\n        class=\"circle\"\n        [ngStyle]=\"{ background: bellGradient }\"\n        routerLink=\"/task\"\n      >\n        <div class=\"animation hide\" (animationstart)=\"onAnimationStart()\" (animationend)=\"onAnimationEnd()\" #animation></div>\n        <div class=\"insider\">\n          <mat-icon>notifications</mat-icon>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./bell.component.scss']\n})\nexport class BellComponent extends BaseDirective implements AfterViewInit {\n\n  NotificationsComponent = NotificationsComponent;\n\n  @ViewChild('animation', { static: false }) animationRef: ElementRef;\n\n  runningCount = new BehaviorSubject<number>(0);\n  successCount = new BehaviorSubject<number>(0);\n  failedCount = new BehaviorSubject<number>(0);\n\n  bellGradient = '';\n\n  isAnimationRunning = new BehaviorSubject<boolean>(false);\n  animationElem = new BehaviorSubject<Element>(null);\n\n  counts = new BehaviorSubject<NotificationsData>(null);\n  tasks = new BehaviorSubject<TaskRaw[]>([]);\n\n  readonly bindedPopoverEvent = this.popoverEvent.bind(this);\n\n  constructor(\n    private taskService: TaskService,\n    private renderer: Renderer2,\n    private profileService: ProfileService,\n    private statsService: StatsService,\n  ) {\n    super();\n  }\n\n  popoverEvent(event: any) {\n    if (event === ACKNOWLEDGE_EVENT) {\n      const lastTaskId = this.tasks.value[0]?.id;\n      if (lastTaskId) {\n        this.profileService.setLastViewedTask(lastTaskId).subscribe();\n      }\n      this.tasks.next([]);\n      this.successCount.next(0);\n      this.runningCount.next(0);\n      this.failedCount.next(0);\n      this.afterCountChanged(false);\n    }\n  }\n\n  onAnimationStart() {\n    this.isAnimationRunning.next(true);\n  }\n\n  onAnimationEnd() {\n    this.isAnimationRunning.next(false);\n  }\n\n  startAnimation() {\n    if (this.animationElem.value && !this.isAnimationRunning.value) {\n      this.renderer.removeClass(this.animationElem.value, 'hide');\n      this.renderer.addClass(this.animationElem.value, 'animated');\n    }\n  }\n\n  endAnimation() {\n    if (this.animationElem.value) {\n      this.renderer.addClass(this.animationElem.value, 'hide');\n      this.renderer.removeClass(this.animationElem.value, 'animated');\n    }\n  }\n\n  afterCountChanged(animationNeeds = true) {\n    const total =  this.runningCount.value + this.successCount.value + this.failedCount.value;\n    if (total > 0) {\n      const degOne = 360 / total;\n      const degRunning = this.runningCount.value * degOne;\n      const degSuccess = this.successCount.value * degOne;\n      this.bellGradient =\n        `conic-gradient(`\n        + `${RUNNING_COLOR} 0deg ${degRunning}deg,`\n        + `${SUCCESS_COLOR} ${degRunning}deg ${degRunning + degSuccess}deg,`\n        + `${FAILED_COLOR} ${degRunning + degSuccess}deg 360deg)`;\n    } else {\n      this.bellGradient = 'transparent';\n    }\n    if (animationNeeds) {\n      this.startAnimation();\n    }\n  }\n\n  getChangeTaskObservable(): Observable<EventMessage> {\n    return this.taskService.events({ events: ['change_job_status'] }).pipe(this.takeUntil());\n  }\n\n  decRunningCount() {\n    const runningCount = this.runningCount.value - 1;\n    this.runningCount.next(runningCount < 0 ? 0 : runningCount);\n  }\n\n  updateTask(updatedTaskId: number, task: TaskRaw, status: JobStatus) {\n    const tasks: TaskRaw[] = this.tasks.value.slice();\n    const index = tasks.findIndex(item => item.id === updatedTaskId);\n    task.status = status;\n    tasks.splice(index, 1, task);\n    this.tasks.next(tasks);\n  }\n\n  listenToJobs() {\n    this.getChangeTaskObservable().subscribe((event) => {\n      const status = event.object.details.value;\n      if (status === 'running') {\n        this.runningCount.next(this.runningCount.value + 1);\n        this.afterCountChanged();\n      } else if (status === 'success') {\n        this.successCount.next(this.successCount.value + 1);\n        this.decRunningCount();\n        this.afterCountChanged();\n      } else if (status === 'failed') {\n        this.failedCount.next(this.failedCount.value + 1);\n        this.decRunningCount();\n        this.afterCountChanged();\n      }\n    });\n\n    this.getChangeTaskObservable().pipe(\n      filter(event => event.object.details.type === 'status'),\n      filter(event => event.object.details.value !== 'created'),\n    ).subscribe((event) => {\n      const tasks: TaskRaw[] = this.tasks.value.slice();\n      const updatedTaskId = event.object.id;\n      const index = tasks.findIndex(item => item.id === updatedTaskId);\n      if (index >= 0) {\n        const task: TaskRaw = Object.assign({}, tasks[index]);\n        this.taskService.get(updatedTaskId).subscribe((updatedTask) => this.updateTask(updatedTaskId, updatedTask, event.object.details.value));\n        tasks.splice(index, 1, task);\n        this.tasks.next(tasks);\n      } else {\n        this.taskService.get(event.object.id).subscribe((task) => {\n          task.status = event.object.details.value;\n          tasks.unshift(task);\n          this.tasks.next(tasks.slice(0, 5));\n        });\n      }\n    });\n  }\n\n  getCurrentCounts(): Observable<Stats> {\n    return this.profileService.getProfile().pipe(\n      take(1),\n      mergeMap((user) => this.statsService.tasks(user.profile?.lastViewedTask?.id)),\n    );\n  }\n\n  getLastTasks(): Observable<Task[]> {\n    return zip(\n      this.taskService.list({ ordering: '-finish_date', status: 'failed', limit: '5' }),\n      this.taskService.list({ ordering: '-finish_date', status: 'success', limit: '5' }),\n      this.taskService.list({ ordering: '-start_date', status: 'running', limit: '5' }),\n      this.profileService.getProfile(),\n    ).pipe(map(([failed, succeed, running, user]) => {\n      let tasks = [...failed.results, ...succeed.results, ...running.results].sort((a, b) => {\n        const getDateField = (task: Task) => task.status === 'failed' || task.status === 'success' ? task.finish_date : task.start_date;\n        const aDate = new Date(getDateField(a));\n        const bDate = new Date(getDateField(b));\n        return aDate.getDate() - bDate.getDate();\n      }).slice(0, 5);\n\n      if (user.profile?.lastViewedTask?.id) {\n        tasks = tasks.filter(task => task.id > user.profile.lastViewedTask.id);\n      }\n\n      return tasks;\n    }));\n  }\n\n  ngAfterViewInit(): void {\n    interval(200).pipe(\n      this.takeUntil(),\n      takeWhile(() => !this.animationElem.value),\n    ).subscribe(() => {\n      this.animationElem.next(this.animationRef ? this.animationRef.nativeElement : null);\n    });\n\n    this.animationElem.pipe(\n      this.takeUntil(),\n      filter((elem) => !!elem),\n      take(1),\n    ).subscribe(() => {\n      zip(this.getCurrentCounts(), this.getLastTasks())\n        .subscribe(([stats, tasks]) => {\n          this.runningCount.next(stats.running);\n          this.successCount.next(stats.success);\n          this.failedCount.next(stats.failed);\n          this.afterCountChanged(!!(stats.running || stats.success || stats.failed));\n          this.tasks.next(tasks);\n          this.listenToJobs();\n        });\n    });\n\n    this.isAnimationRunning.pipe(\n      this.takeUntil(),\n      filter(isRunning => !isRunning),\n    ).subscribe(() => this.endAnimation());\n\n    combineLatest(this.runningCount, this.successCount, this.failedCount)\n    .pipe(this.takeUntil())\n    .subscribe(\n      ([runningCount, successCount, failedCount]) => this.counts.next({\n        runningCount,\n        successCount,\n        failedCount,\n      })\n    );\n  }\n\n}\n",
            "properties": [
                {
                    "name": "failedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "runningCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "successCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PopoverInput",
            "id": "interface-PopoverInput-828cf763235e75cd27e094ca706187a9",
            "file": "src/app/directives/popover.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentFactory, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, HostListener, Input, OnDestroy, OnInit, Renderer2, Type, ViewContainerRef, } from '@angular/core';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { PopoverComponent } from '@app/components/popover/popover.component';\nimport { PopoverContentDirective, PopoverEventFunc } from '@app/abstract-directives/popover-content.directive';\n\nexport interface PopoverInput { [inputKey: string]: any; }\n\n@Directive({\n  selector: '[appPopover]'\n})\nexport class PopoverDirective extends BaseDirective implements OnInit, OnDestroy {\n\n  containerRef: ComponentRef<PopoverComponent>;\n  factory: ComponentFactory<PopoverComponent>;\n  leaveListener: () => void;\n\n  shown = false;\n  timeoutId: any;\n\n  @Input() component: Type<PopoverContentDirective>;\n  @Input() data: PopoverInput = {};\n  @Input() event: PopoverEventFunc;\n  @Input() hideTimeout = 0;\n\n  constructor(\n    private elementRef: ElementRef,\n    public viewContainer: ViewContainerRef,\n    public componentFactoryResolver: ComponentFactoryResolver,\n    public renderer: Renderer2,\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.factory = this.componentFactoryResolver.resolveComponentFactory(PopoverComponent);\n  }\n\n  hideComponent() {\n    if (!this.timeoutId) {\n      this.timeoutId = setTimeout(() => {\n        this.clear();\n        this.shown = false;\n        this.timeoutId = undefined;\n      }, this.hideTimeout);\n    }\n  }\n\n  checkReEnter() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = undefined;\n    }\n  }\n\n  @HostListener('mouseenter') mouseEnter() {\n    this.checkReEnter();\n    if (this.component && !this.shown) {\n      this.containerRef = this.viewContainer.createComponent(this.factory);\n      this.containerRef.instance.component = this.component;\n      this.containerRef.instance.data = this.data;\n      this.containerRef.instance.event = this.event;\n\n      this.leaveListener = this.renderer.listen(\n        this.elementRef.nativeElement.parentElement,\n        'mouseleave',\n        () => this.hideComponent(),\n      );\n\n      this.renderer.listen(\n        this.containerRef.location.nativeElement,\n        'mouseenter',\n        () => this.checkReEnter(),\n      );\n\n      this.shown = true;\n    }\n  }\n\n  clear() {\n    if (this.containerRef) {\n      this.containerRef.destroy();\n    }\n\n    this.viewContainer.clear();\n\n    if (this.leaveListener) {\n      this.elementRef.nativeElement.parentElement.removeEventListener('mouseleave', this.leaveListener);\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.clear();\n  }\n\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-828cf763235e75cd27e094ca706187a9",
                    "args": [
                        {
                            "name": "inputKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "Provider",
            "id": "interface-Provider-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "BaseEntity"
        },
        {
            "name": "RequestCacheEntry",
            "id": "interface-RequestCacheEntry-8a514e04e9e3c150b655bc69be645c5e",
            "file": "src/app/core/http-interseptors/request-cache.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse } from '@angular/common/http';\n\nconst maxAge = Number.MAX_VALUE; // maximum cache age (ms)\n\ninterface RequestCacheEntry {\n  url: string;\n  response: HttpResponse<any>;\n  lastRead: number;\n}\n\nexport abstract class RequestCache {\n  abstract get(req: HttpRequest<any>): HttpResponse<any> | undefined;\n  abstract put(req: HttpRequest<any>, response: HttpResponse<any>): void;\n}\n\n@Injectable()\nexport class RequestCacheService implements RequestCache {\n  cache = new Map<string, RequestCacheEntry>();\n\n  constructor() {}\n\n  get(req: HttpRequest<any>): HttpResponse<any> | undefined {\n    const url = req.urlWithParams;\n    const cached = this.cache.get(url);\n\n    if (!cached) return undefined;\n\n    const isExpired = cached.lastRead < Date.now() - maxAge;\n\n    const expired = isExpired ? 'Expired ' : '';\n    // this.messanger.add(new Message(`${expired}cached response for \"${url}\".`));\n\n    return isExpired ? undefined : cached.response;\n  }\n\n  put(req: HttpRequest<any>, response: HttpResponse<any>): void {\n    const url = req.urlWithParams;\n    // this.messanger.add(new Message(`Caching response from \"${url}\".` ));\n\n    const entry = { url, response, lastRead: Date.now() };\n    this.cache.set(url, entry);\n\n    const expired = Date.now() - maxAge;\n\n    this.cache.forEach(c => {\n      if (c.lastRead < expired) this.cache.delete(c.url);\n    });\n\n    // this.messanger.add(new Message(`Request cache size: ${this.cache.size}.`));\n  }\n}\n",
            "properties": [
                {
                    "name": "lastRead",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpResponse<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "RouterStateUrl",
            "id": "interface-RouterStateUrl-8dd1bd3a3ce3f8be4547bb2e68025ad1",
            "file": "src/app/core/store/router/route-serializer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RouterStateSerializer } from '@ngrx/router-store';\nimport { RouterStateSnapshot, Params } from '@angular/router';\n\nexport interface RouterStateUrl {\n  url: string;\n  params: Params;\n  queryParams: Params;\n}\n\nexport class RouteSerializer implements RouterStateSerializer<RouterStateUrl> {\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n    let route = routerState.root;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    const {\n      url,\n      root: { queryParams },\n    } = routerState;\n    const { params } = route;\n\n    // Only return an object including the URL, params and query params\n    // instead of the entire snapshot\n    return { url, params, queryParams };\n  }\n}\n",
            "properties": [
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-48bdc39db9b8bb2237d76b204a2e01dc",
            "file": "src/app/core/types/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmmitRow {\n  cmd: string;\n  row: any;\n  item?: any;\n}\n\nexport interface SelectOption {\n  id: number | string;\n  name: string;\n}\n\nexport interface IError {\n  code: string;\n  desc: string;\n  level: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Service",
            "id": "interface-Service-0cbb246102564bc134c66dc61b2dabe6",
            "file": "src/app/core/types/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAction } from './actions';\nimport { IComponent } from './host-component';\nimport { Job, Task } from './task-job';\nimport { AdcmEntity } from '@app/models/entity';\nimport { IIssues } from '@app/models/issue';\nimport { ICluster } from '@app/models/cluster';\nimport { Concern } from '@app/models/concern/concern';\n\nexport type TypeName =\n  'bundle' |\n  'cluster' |\n  'host' |\n  'provider' |\n  'service' |\n  'job' |\n  'task' |\n  'user' |\n  'profile' |\n  'adcm' |\n  'stats' |\n  'hostcomponent' |\n  'service2cluster' |\n  'host2cluster' |\n  'servicecomponent' |\n  'component' |\n  'group_config' |\n  'group_config_hosts';\nexport type Entities = ICluster | Service | Host | Provider | Job | Task | Bundle;\n\n/**\n *```\n {\n   [key: string]: string;\n }\n ```\n */\nexport interface IRoot {\n  [key: string]: string;\n}\n\nexport interface BaseEntity extends AdcmEntity {\n  typeName: TypeName;\n  description?: string;\n  url: string;\n  state?: string;\n  config: string;\n  action?: string;\n  actions?: IAction[];\n  issue?: IIssues;\n  prototype_id?: number;\n  prototype_name?: string;\n  prototype_display_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  status?: number | string;\n  concerns: Concern[];\n  locked: boolean;\n}\n\nexport interface ApiFlat {\n  id: number;\n  object_id: number;\n  object_type: TypeName;\n  url: string;\n}\n\nexport interface Provider extends BaseEntity {\n  host: string;\n}\n\nexport interface Host extends BaseEntity {\n  fqdn: string;\n  provider_id: number;\n  cluster: string;\n  cluster_id?: number;\n  cluster_name?: string;\n}\n\nexport interface Service extends BaseEntity {\n  components: IComponent[];\n  status: number;\n  hostcomponent: string;\n  display_name: string;\n  cluster_id?: number;\n  group_config: string;\n}\n\nexport interface CanLicensed {\n  license: 'unaccepted' | 'accepted' | 'absent';\n  license_url: string;\n}\n\nexport interface License {\n  accept: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  text: string;\n}\n\nexport interface Bundle extends BaseEntity, CanLicensed {\n  [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "cluster_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "group_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "hostcomponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "BaseEntity"
        },
        {
            "name": "ServiceStatusTree",
            "id": "interface-ServiceStatusTree-c0578eccc6c0f17562e0f3175dee1006",
            "file": "src/app/models/status-tree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StatusTreeLinkFunc = (id: number, tree: StatusTree[]) => string[];\n\nexport interface StatusTreeSubject {\n  id?: number;\n  name: string;\n  status?: number;\n  link?: StatusTreeLinkFunc;\n}\n\nexport interface StatusTree {\n  subject: StatusTreeSubject;\n  children: StatusTree[];\n}\n\nexport interface ClusterStatusTree extends StatusTreeSubject {\n  chilren: {\n    hosts: StatusTreeSubject[];\n    services: ServiceStatusTree[];\n  };\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n\nexport interface HostComponentStatusTree extends StatusTreeSubject {\n  hosts: StatusTreeSubject[];\n}\n\nexport interface HostStatusTree extends StatusTreeSubject {\n  hc: StatusTreeSubject[];\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n",
            "properties": [
                {
                    "name": "hc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HostComponentStatusTree[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "StatusTreeSubject"
        },
        {
            "name": "ServiceStatusTree",
            "id": "interface-ServiceStatusTree-c0578eccc6c0f17562e0f3175dee1006-1",
            "file": "src/app/models/status-tree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StatusTreeLinkFunc = (id: number, tree: StatusTree[]) => string[];\n\nexport interface StatusTreeSubject {\n  id?: number;\n  name: string;\n  status?: number;\n  link?: StatusTreeLinkFunc;\n}\n\nexport interface StatusTree {\n  subject: StatusTreeSubject;\n  children: StatusTree[];\n}\n\nexport interface ClusterStatusTree extends StatusTreeSubject {\n  chilren: {\n    hosts: StatusTreeSubject[];\n    services: ServiceStatusTree[];\n  };\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n\nexport interface HostComponentStatusTree extends StatusTreeSubject {\n  hosts: StatusTreeSubject[];\n}\n\nexport interface HostStatusTree extends StatusTreeSubject {\n  hc: StatusTreeSubject[];\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n",
            "properties": [
                {
                    "name": "hc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HostComponentStatusTree[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "StatusTreeSubject",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ServiceStatusTree-1"
        },
        {
            "name": "SocketState",
            "id": "interface-SocketState-ca14b9fd2a8ab6897860f58a705daf52",
            "file": "src/app/core/store/sockets/socket.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TypeName } from '@app/core/types';\nimport {\n  Action,\n  createAction,\n  createFeatureSelector,\n  createReducer,\n  createSelector,\n  on,\n  props,\n  select\n} from '@ngrx/store';\nimport { pipe } from 'rxjs';\nimport { skip } from 'rxjs/operators';\n\n/**\n * Event Message Object dispatched from socket\n */\nexport interface IEMObject {\n  type: TypeName;\n  id: number;\n  details: {\n    id?: number;\n    type: string;\n    value: any;\n  };\n}\n\nexport type EntityEvent =\n  | 'add'\n  | 'add_job_log'\n  | 'create'\n  | 'delete'\n  | 'remove'\n  | 'change_config'\n  | 'change_state'\n  | 'change_status'\n  | 'change_job_status'\n  | 'change_hostcomponentmap'\n  | 'upgrade'\n  | 'concern';\n\nexport interface EventMessage {\n  event: EntityEvent;\n  object?: IEMObject;\n}\n\nexport type StatusType = 'open' | 'close' | 're-open';\n\nexport const socketInit = createAction('[Socket] Init');\nexport const socketOpen = createAction('[Socket] Open', props<{ status: StatusType }>());\nexport const socketClose = createAction('[Socket] Close', props<{ status: StatusType }>());\nexport const socketResponse = createAction('[Socket] Response', props<{ message: EventMessage }>());\nexport const clearMessages = createAction('[Socket] Clear messages');\n\nexport interface SocketState {\n  status: StatusType;\n  message: EventMessage;\n}\n\nconst initialState: SocketState = {\n  status: null,\n  message: null,\n};\n\nconst reducer = createReducer(\n  initialState,\n  on(socketInit, (state) => ({ ...state })),\n  on(socketOpen, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketClose, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketResponse, (state, { message }) => ({\n    ...state,\n    message,\n  })),\n  on(clearMessages, (state) => ({ ...state, message: null }))\n);\n\nexport function socketReducer(state: SocketState, action: Action) {\n  return reducer(state, action);\n}\n\nexport const getSocketState = createFeatureSelector<SocketState>('socket');\nexport const getConnectStatus = createSelector(getSocketState, (state: SocketState) => state.status);\nexport const getMessage = createSelector(getSocketState, (state) => state.message);\nexport const selectMessage = pipe(\n  select(getMessage),\n  skip(1),\n);\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventMessage",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusType",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StackBase",
            "id": "interface-StackBase-a295d56b2f4977d66fa39a2d212c69c7",
            "file": "src/app/core/types/stack.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StackBase {\n  id: number;\n  name: string;\n  url: string;\n  version: string;\n  edition: string;\n  description: string;\n  display_name: string;\n  license: 'unaccepted' | 'accepted' | 'absent';\n  bundle_id: number;\n  bundle_edition: string;\n}\n\nexport type Prototype = StackBase & {bundle_id: number};\nexport type ServicePrototype = StackBase & {selected: boolean};\n",
            "properties": [
                {
                    "name": "bundle_edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "bundle_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "license",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"unaccepted\" | \"accepted\" | \"absent\"",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-078c8935e83aa026b394f99fed46eff2",
            "file": "src/app/core/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@env/environment';\nimport { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { ApiEffects } from '../api/api.effects';\nimport { apiReducer, ApiState } from '../api/api.reducer';\nimport { AuthEffects, authReducer, AuthState } from '../auth/auth.store';\nimport { IssueEffect, issueReducer, IssueState } from './issue';\nimport { ProfileEffects, profileReducer, ProfileState } from './profile';\nimport { SocketEffect } from './sockets/socket.effect';\nimport { socketReducer, SocketState } from './sockets/socket.reducer';\nimport { navigationReducer, NavigationState } from '@app/store/navigation/navigation.store';\nimport { NavigationEffects } from '@app/store/navigation/navigation-effects';\n\nexport interface State {\n  auth: AuthState;\n  socket: SocketState;\n  api: ApiState;\n  profile: ProfileState;\n  issue: IssueState;\n  navigation: NavigationState,\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  auth: authReducer,\n  socket: socketReducer,\n  api: apiReducer,\n  profile: profileReducer,\n  issue: issueReducer,\n  navigation: navigationReducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\nexport const StoreEffects = [AuthEffects, ApiEffects, ProfileEffects, IssueEffect, SocketEffect, NavigationEffects];\n\nexport * from '../api/api.reducer';\nexport * from '../auth/auth.store';\nexport * from './profile';\nexport * from './profile/profile.service';\nexport * from './issue';\nexport * from './sockets/socket.service';\nexport * from './sockets/socket.reducer';\nexport * from '@app/store/navigation/navigation.store';\n",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiState",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IssueState",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationState",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileState",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "socket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocketState",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Stats",
            "id": "interface-Stats-4f4a6bd7d5a030ff0f14e7faff1e5be6",
            "file": "src/app/services/stats.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@env/environment';\n\nexport interface Stats {\n  failed: number;\n  success: number;\n  running: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatsService {\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  tasks(lastTaskId?: number): Observable<Stats> {\n    return this.http.get<Stats>(`${environment.apiRoot}/stats/task/${lastTaskId || 1}/`);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "failed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "running",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StatusData",
            "id": "interface-StatusData-afb8a8911522db45a368173e82024384",
            "file": "src/app/components/columns/status-column/status-column.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { AdwpCellComponent } from '@adwp-ui/widgets';\n\nexport interface StatusData<T> {\n  event: MouseEvent;\n  action: string;\n  row: T;\n}\n\n@Component({\n  selector: 'app-status-column',\n  templateUrl: './status-column.component.html',\n  styleUrls: ['./status-column.component.scss']\n})\nexport class StatusColumnComponent<T> implements AdwpCellComponent<T> {\n\n  @Input() row: T;\n\n  @Output() onClick = new EventEmitter<StatusData<T>>();\n\n  clickCell(event: MouseEvent, action: string, row: T): void {\n    this.onClick.emit({ event, action, row });\n  }\n\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StatusTree",
            "id": "interface-StatusTree-c0578eccc6c0f17562e0f3175dee1006",
            "file": "src/app/models/status-tree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StatusTreeLinkFunc = (id: number, tree: StatusTree[]) => string[];\n\nexport interface StatusTreeSubject {\n  id?: number;\n  name: string;\n  status?: number;\n  link?: StatusTreeLinkFunc;\n}\n\nexport interface StatusTree {\n  subject: StatusTreeSubject;\n  children: StatusTree[];\n}\n\nexport interface ClusterStatusTree extends StatusTreeSubject {\n  chilren: {\n    hosts: StatusTreeSubject[];\n    services: ServiceStatusTree[];\n  };\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n\nexport interface HostComponentStatusTree extends StatusTreeSubject {\n  hosts: StatusTreeSubject[];\n}\n\nexport interface HostStatusTree extends StatusTreeSubject {\n  hc: StatusTreeSubject[];\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusTree[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusTreeSubject",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StatusTreeSubject",
            "id": "interface-StatusTreeSubject-c0578eccc6c0f17562e0f3175dee1006",
            "file": "src/app/models/status-tree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StatusTreeLinkFunc = (id: number, tree: StatusTree[]) => string[];\n\nexport interface StatusTreeSubject {\n  id?: number;\n  name: string;\n  status?: number;\n  link?: StatusTreeLinkFunc;\n}\n\nexport interface StatusTree {\n  subject: StatusTreeSubject;\n  children: StatusTree[];\n}\n\nexport interface ClusterStatusTree extends StatusTreeSubject {\n  chilren: {\n    hosts: StatusTreeSubject[];\n    services: ServiceStatusTree[];\n  };\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n\nexport interface HostComponentStatusTree extends StatusTreeSubject {\n  hosts: StatusTreeSubject[];\n}\n\nexport interface HostStatusTree extends StatusTreeSubject {\n  hc: StatusTreeSubject[];\n}\n\nexport interface ServiceStatusTree extends StatusTreeSubject {\n  hc: HostComponentStatusTree[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusTreeLinkFunc",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TaskBase",
            "id": "interface-TaskBase-a25a180383c9eab0fd04d0bffbe4860c",
            "file": "src/app/core/types/task-job.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from './api';\nimport { Entity } from '@adwp-ui/widgets';\n\nexport type JobStatus = 'created' | 'running' | 'failed' | 'success' | 'aborted';\n\nexport type JobType = 'component' | 'service' | 'cluster' | 'host' | 'provider';\n\nexport interface JobObject {\n  id: number;\n  name: string;\n  type: JobType;\n  url?: string[];\n}\n\ninterface TaskBase extends Entity {\n  start_date: string;\n  finish_date: string;\n  objects: JobObject[];\n  status: JobStatus;\n  action: JobAction;\n  terminatable: boolean;\n  cancel: string;\n}\n\nexport interface JobAction {\n  prototype_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  display_name: string;\n}\ninterface JobRaw extends TaskBase {\n  log_files: LogFile[];\n  start_date: string;\n  finish_date: string;\n}\n\nexport interface TaskRaw extends TaskBase {\n  jobs: Job[];\n}\n\nexport type Job = JobRaw & BaseEntity;\nexport type Task = TaskRaw & BaseEntity;\n\nexport interface LogFile {\n  id: number;\n  url: string;\n  name: string;\n  type: string;\n  format: 'txt' | 'json';\n  download_url: string;\n  content: string | CheckLog[];\n}\n\nexport interface CheckLog {\n  title: string;\n  message: string;\n  result: boolean;\n  type: 'group' | 'check';\n  content?: CheckLog[];\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobAction",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "finish_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "objects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobObject[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "start_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobStatus",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "terminatable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "Entity"
        },
        {
            "name": "TaskRaw",
            "id": "interface-TaskRaw-a25a180383c9eab0fd04d0bffbe4860c",
            "file": "src/app/core/types/task-job.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseEntity } from './api';\nimport { Entity } from '@adwp-ui/widgets';\n\nexport type JobStatus = 'created' | 'running' | 'failed' | 'success' | 'aborted';\n\nexport type JobType = 'component' | 'service' | 'cluster' | 'host' | 'provider';\n\nexport interface JobObject {\n  id: number;\n  name: string;\n  type: JobType;\n  url?: string[];\n}\n\ninterface TaskBase extends Entity {\n  start_date: string;\n  finish_date: string;\n  objects: JobObject[];\n  status: JobStatus;\n  action: JobAction;\n  terminatable: boolean;\n  cancel: string;\n}\n\nexport interface JobAction {\n  prototype_name?: string;\n  prototype_version?: string;\n  bundle_id?: number;\n  display_name: string;\n}\ninterface JobRaw extends TaskBase {\n  log_files: LogFile[];\n  start_date: string;\n  finish_date: string;\n}\n\nexport interface TaskRaw extends TaskBase {\n  jobs: Job[];\n}\n\nexport type Job = JobRaw & BaseEntity;\nexport type Task = TaskRaw & BaseEntity;\n\nexport interface LogFile {\n  id: number;\n  url: string;\n  name: string;\n  type: string;\n  format: 'txt' | 'json';\n  download_url: string;\n  content: string | CheckLog[];\n}\n\nexport interface CheckLog {\n  title: string;\n  message: string;\n  result: boolean;\n  type: 'group' | 'check';\n  content?: CheckLog[];\n}\n",
            "properties": [
                {
                    "name": "jobs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Job[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "TaskBase"
        },
        {
            "name": "TooltipDisplayOptions",
            "id": "interface-TooltipDisplayOptions-0aa6c34b3edfef5dfe8a28653d0685f0",
            "file": "src/app/shared/components/tooltip/tooltip.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\nimport { BaseEntity } from '@app/core/types/api';\nimport { Subject } from 'rxjs';\n\nexport type ComponentName = 'issue' | 'status' | undefined;\nexport type PositionType = 'top' | 'right' | 'bottom' | 'left';\nexport interface TooltipOptions {\n  event: MouseEvent;\n  source: HTMLElement;\n  options: TooltipDisplayOptions;\n}\n\nexport interface TooltipDisplayOptions {\n  content: string | BaseEntity;\n  componentName: ComponentName;\n  position: PositionType;\n  condition: boolean;\n}\n\n@Injectable()\nexport class ComponentData {\n  path: string;\n  current: any;\n  emitter: EventEmitter<any>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TooltipService {\n  private positionSource = new Subject<TooltipOptions>();\n  position$ = this.positionSource.asObservable();\n  timeOut: any;\n\n  /**\n   * TODO: show a tooltip if there is a condition\n   *\n   * @returns\n   * @memberof TooltipComponent\n   */\n  isShow(source: HTMLElement, options: TooltipDisplayOptions) {\n    if (options.condition) {\n      return source.offsetWidth !== source.scrollWidth;\n    }\n    return true;\n  }\n\n  show(event: MouseEvent, source: HTMLElement, options: TooltipDisplayOptions) {\n    this.positionSource.next();\n    clearTimeout(this.timeOut);\n    if (this.isShow(source, options)) {\n      this.positionSource.next({ event, source, options });\n    }\n  }\n\n  hide(withoutTimout = false, timeout = 500) {\n    if (withoutTimout) {\n      this.positionSource.next();\n      return;\n    }\n\n    this.timeOut = setTimeout(() => this.positionSource.next(), timeout);\n  }\n\n  mouseEnterTooltip() {\n    clearTimeout(this.timeOut);\n  }\n\n  mouseLeaveTooltip() {\n    this.hide();\n  }\n}\n",
            "properties": [
                {
                    "name": "componentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentName",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | BaseEntity",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PositionType",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TooltipOptions",
            "id": "interface-TooltipOptions-0aa6c34b3edfef5dfe8a28653d0685f0",
            "file": "src/app/shared/components/tooltip/tooltip.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\nimport { BaseEntity } from '@app/core/types/api';\nimport { Subject } from 'rxjs';\n\nexport type ComponentName = 'issue' | 'status' | undefined;\nexport type PositionType = 'top' | 'right' | 'bottom' | 'left';\nexport interface TooltipOptions {\n  event: MouseEvent;\n  source: HTMLElement;\n  options: TooltipDisplayOptions;\n}\n\nexport interface TooltipDisplayOptions {\n  content: string | BaseEntity;\n  componentName: ComponentName;\n  position: PositionType;\n  condition: boolean;\n}\n\n@Injectable()\nexport class ComponentData {\n  path: string;\n  current: any;\n  emitter: EventEmitter<any>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TooltipService {\n  private positionSource = new Subject<TooltipOptions>();\n  position$ = this.positionSource.asObservable();\n  timeOut: any;\n\n  /**\n   * TODO: show a tooltip if there is a condition\n   *\n   * @returns\n   * @memberof TooltipComponent\n   */\n  isShow(source: HTMLElement, options: TooltipDisplayOptions) {\n    if (options.condition) {\n      return source.offsetWidth !== source.scrollWidth;\n    }\n    return true;\n  }\n\n  show(event: MouseEvent, source: HTMLElement, options: TooltipDisplayOptions) {\n    this.positionSource.next();\n    clearTimeout(this.timeOut);\n    if (this.isShow(source, options)) {\n      this.positionSource.next({ event, source, options });\n    }\n  }\n\n  hide(withoutTimout = false, timeout = 500) {\n    if (withoutTimout) {\n      this.positionSource.next();\n      return;\n    }\n\n    this.timeOut = setTimeout(() => this.positionSource.next(), timeout);\n  }\n\n  mouseEnterTooltip() {\n    clearTimeout(this.timeOut);\n  }\n\n  mouseLeaveTooltip() {\n    this.hide();\n  }\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TooltipDisplayOptions",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UniversalAdcmEventData",
            "id": "interface-UniversalAdcmEventData-8f67aea206864c943b34fb66a214d7b0",
            "file": "src/app/models/universal-adcm-event-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UniversalAdcmEventData<T> {\n  event: MouseEvent;\n  action: 'getNextPageCluster' | 'getClusters' | 'addCluster';\n  row: T;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"getNextPageCluster\" | \"getClusters\" | \"addCluster\"",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Upgrade",
            "id": "interface-Upgrade-34c36605396243e8465a70ce623de60b",
            "file": "src/app/shared/components/upgrade.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ApiService } from '@app/core/api';\nimport { EmmitRow } from '@app/core/types';\nimport { concat, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { EventHelper } from '@adwp-ui/widgets';\n\nimport { BaseDirective } from '../directives';\nimport { DialogComponent } from './dialog.component';\nimport { IIssues } from '@app/models/issue';\nimport { IssueHelper } from '@app/helpers/issue-helper';\n\nexport interface UpgradeItem {\n  upgradable: boolean;\n  upgrade: string;\n  issue: IIssues;\n}\n\nexport interface Upgrade {\n  id: number;\n  bundle_id: number;\n  name: string;\n  description: string;\n  do: string;\n  upgradable: boolean;\n  from_edition: string[];\n  license: 'unaccepted' | 'absent';\n  license_url: string;\n  max_strict: boolean;\n  max_version: string;\n  min_strict: boolean;\n  min_version: string;\n  state_available: string;\n  state_on_success: string;\n  url: string;\n}\n\n@Component({\n  selector: 'app-upgrade',\n  template: `\n    <button mat-icon-button\n            matTooltip=\"There are a pending upgrades of object here\"\n            [appForTest]=\"'upgrade_btn'\"\n            color=\"warn\"\n            [disabled]=\"!checkIssue()\"\n            [matMenuTriggerFor]=\"menu\"\n            (click)=\"EventHelper.stopPropagation($event)\"\n    >\n      <mat-icon>sync_problem</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [xPosition]=\"xPosition\" yPosition=\"below\">\n      <ng-template matMenuContent>\n        <button *ngFor=\"let item of list$ | async\" mat-menu-item (click)=\"runUpgrade(item)\">\n          <span>{{ item.name || 'No name' }}</span>\n        </button>\n      </ng-template>\n    </mat-menu>\n  `\n})\nexport class UpgradeComponent extends BaseDirective {\n  EventHelper = EventHelper;\n\n  list$: Observable<Upgrade[]>;\n  pRow: UpgradeItem = { upgradable: false, upgrade: '', issue: null };\n\n  @Input() xPosition = 'before';\n\n  @Input()\n  set row(row: UpgradeItem) {\n    this.pRow = row;\n    this.list$ = this.getUpgrades(this.pRow.upgrade);\n  }\n\n  @Output()\n  refresh: EventEmitter<EmmitRow> = new EventEmitter<EmmitRow>();\n\n  constructor(private api: ApiService, private dialog: MatDialog) {\n    super();\n  }\n\n  checkIssue() {\n    return this.pRow.upgradable && !IssueHelper.isIssue(this.pRow.issue);\n  }\n\n  runUpgrade(item: Upgrade) {\n    const license$ = item.license === 'unaccepted' ? this.api.put(`${item.license_url}accept/`, {}) : of();\n    const do$ = this.api.post<{ id: number }>(item.do, {});\n    this.fork(item)\n      .pipe(\n        switchMap(text =>\n          this.dialog\n            .open(DialogComponent, {\n              data: {\n                title: 'Are you sure you want to upgrade?',\n                text,\n                disabled: !item.upgradable,\n                controls: item.license === 'unaccepted' ? {\n                  label: 'Do you accept the license agreement?',\n                  buttons: ['Yes', 'No']\n                } : ['Yes', 'No']\n              }\n            })\n            .beforeClosed()\n            .pipe(\n              this.takeUntil(),\n              filter(yes => yes),\n              switchMap(() => concat(license$, do$))\n            )\n        )\n      )\n      .subscribe(row => this.refresh.emit({ cmd: 'refresh', row }));\n  }\n\n  fork(item: Upgrade) {\n    const flag = item.license === 'unaccepted';\n    return flag ? this.api.get<{ text: string }>(item.license_url).pipe(map(a => a.text)) : of(item.description);\n  }\n\n  getUpgrades(upgrade: string): Observable<any> {\n    return this.api.get(`${upgrade}?ordering=-name`).pipe(\n      filter((list: Upgrade[]) => !!list.length)\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "bundle_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "do",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "from_edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "license",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"unaccepted\" | \"absent\"",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "license_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "max_strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "max_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "min_strict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "min_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "state_available",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "state_on_success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "upgradable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UpgradeItem",
            "id": "interface-UpgradeItem-34c36605396243e8465a70ce623de60b",
            "file": "src/app/shared/components/upgrade.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ApiService } from '@app/core/api';\nimport { EmmitRow } from '@app/core/types';\nimport { concat, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { EventHelper } from '@adwp-ui/widgets';\n\nimport { BaseDirective } from '../directives';\nimport { DialogComponent } from './dialog.component';\nimport { IIssues } from '@app/models/issue';\nimport { IssueHelper } from '@app/helpers/issue-helper';\n\nexport interface UpgradeItem {\n  upgradable: boolean;\n  upgrade: string;\n  issue: IIssues;\n}\n\nexport interface Upgrade {\n  id: number;\n  bundle_id: number;\n  name: string;\n  description: string;\n  do: string;\n  upgradable: boolean;\n  from_edition: string[];\n  license: 'unaccepted' | 'absent';\n  license_url: string;\n  max_strict: boolean;\n  max_version: string;\n  min_strict: boolean;\n  min_version: string;\n  state_available: string;\n  state_on_success: string;\n  url: string;\n}\n\n@Component({\n  selector: 'app-upgrade',\n  template: `\n    <button mat-icon-button\n            matTooltip=\"There are a pending upgrades of object here\"\n            [appForTest]=\"'upgrade_btn'\"\n            color=\"warn\"\n            [disabled]=\"!checkIssue()\"\n            [matMenuTriggerFor]=\"menu\"\n            (click)=\"EventHelper.stopPropagation($event)\"\n    >\n      <mat-icon>sync_problem</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [xPosition]=\"xPosition\" yPosition=\"below\">\n      <ng-template matMenuContent>\n        <button *ngFor=\"let item of list$ | async\" mat-menu-item (click)=\"runUpgrade(item)\">\n          <span>{{ item.name || 'No name' }}</span>\n        </button>\n      </ng-template>\n    </mat-menu>\n  `\n})\nexport class UpgradeComponent extends BaseDirective {\n  EventHelper = EventHelper;\n\n  list$: Observable<Upgrade[]>;\n  pRow: UpgradeItem = { upgradable: false, upgrade: '', issue: null };\n\n  @Input() xPosition = 'before';\n\n  @Input()\n  set row(row: UpgradeItem) {\n    this.pRow = row;\n    this.list$ = this.getUpgrades(this.pRow.upgrade);\n  }\n\n  @Output()\n  refresh: EventEmitter<EmmitRow> = new EventEmitter<EmmitRow>();\n\n  constructor(private api: ApiService, private dialog: MatDialog) {\n    super();\n  }\n\n  checkIssue() {\n    return this.pRow.upgradable && !IssueHelper.isIssue(this.pRow.issue);\n  }\n\n  runUpgrade(item: Upgrade) {\n    const license$ = item.license === 'unaccepted' ? this.api.put(`${item.license_url}accept/`, {}) : of();\n    const do$ = this.api.post<{ id: number }>(item.do, {});\n    this.fork(item)\n      .pipe(\n        switchMap(text =>\n          this.dialog\n            .open(DialogComponent, {\n              data: {\n                title: 'Are you sure you want to upgrade?',\n                text,\n                disabled: !item.upgradable,\n                controls: item.license === 'unaccepted' ? {\n                  label: 'Do you accept the license agreement?',\n                  buttons: ['Yes', 'No']\n                } : ['Yes', 'No']\n              }\n            })\n            .beforeClosed()\n            .pipe(\n              this.takeUntil(),\n              filter(yes => yes),\n              switchMap(() => concat(license$, do$))\n            )\n        )\n      )\n      .subscribe(row => this.refresh.emit({ cmd: 'refresh', row }));\n  }\n\n  fork(item: Upgrade) {\n    const flag = item.license === 'unaccepted';\n    return flag ? this.api.get<{ text: string }>(item.license_url).pipe(map(a => a.text)) : of(item.description);\n  }\n\n  getUpgrades(upgrade: string): Observable<any> {\n    return this.api.get(`${upgrade}?ordering=-name`).pipe(\n      filter((list: Upgrade[]) => !!list.length)\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIssues",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "upgradable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "upgrade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-f509a3802cb60762fa3f0173645f0df6",
            "file": "src/app/admin/users/users.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\n\nexport interface User {\n  username: string;\n  password: string;\n  confirm: string;\n  change_password: string;\n}\n\nconst USER_LINK = `${environment.apiRoot}user/`;\n\n@Injectable()\nexport class UsersService {\n  constructor(private http: HttpClient) {}\n\n  public getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(USER_LINK);\n  }\n\n  public addUser(username: string, password: string): Observable<User> {\n    return this.http.post<User>(USER_LINK, { username, password });\n  }\n\n  public clearUser(user: User): Observable<User> {\n    return this.http.delete<User>(`${USER_LINK}${user.username}/`);\n  }\n\n  public changePassword(value: string, link: string): Observable<User> {\n    return this.http.patch<User>(link, { 'password': value });\n  }\n}\n",
            "properties": [
                {
                    "name": "change_password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "WorkerInstance",
            "id": "interface-WorkerInstance-15046e581cc73dfa1357124a078aabc3",
            "file": "src/app/core/services/cluster.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ParamMap } from '@angular/router';\nimport { ApiService } from '@app/core/api';\nimport { BehaviorSubject, EMPTY, forkJoin, Observable, of, throwError } from 'rxjs';\nimport { catchError, filter, map, switchMap, tap } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport {\n  Bundle,\n  Entities,\n  Host,\n  IAction,\n  IImport,\n  Job,\n  License,\n  LogFile,\n  Provider,\n  Service\n} from '@app/core/types';\nimport { environment } from '@env/environment';\nimport { ServiceComponentService } from '@app/services/service-component.service';\nimport { EntityNames } from '@app/models/entity-names';\nimport { HttpResponseBase } from '@angular/common/http';\nimport { setPathOfRoute } from '@app/store/navigation/navigation.store';\nimport { EntityService } from '@app/abstract/entity-service';\nimport { ICluster } from '@app/models/cluster';\n\nexport interface WorkerInstance {\n  current: Entities;\n  cluster: ICluster | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClusterService {\n  private worker: WorkerInstance | null;\n  private workerSubject = new BehaviorSubject<WorkerInstance>(null);\n  public worker$ = this.workerSubject.asObservable();\n\n  get Cluster() {\n    return this.worker ? this.worker.cluster : null;\n  }\n\n  set Cluster(cluster: ICluster) {\n    if (cluster) cluster.typeName = 'cluster';\n    if (this.worker) this.worker.cluster = cluster;\n    else this.worker = { current: cluster, cluster: cluster };\n  }\n\n  get Current(): Entities {\n    return this.worker ? this.worker.current : null;\n  }\n\n  constructor(\n    protected api: ApiService,\n    protected serviceComponentService: ServiceComponentService,\n    protected store: Store,\n  ) {}\n\n  clearWorker() {\n    this.worker = null;\n  }\n\n  one_cluster(id: number): Observable<ICluster> {\n    return this.Cluster ? of(this.Cluster) : this.api.getOne<ICluster>('cluster', id);\n  }\n\n  one_service(id: number): Observable<Service> {\n    return this.api.get<Service>(`${this.worker.cluster.service}${id}/`);\n  }\n\n  one_host(id: number): Observable<Host> {\n    return this.api.getOne<Host>('host', id).pipe(map((host: Host) => ({ ...host, name: host.fqdn })));\n  }\n\n  one_provider(id: number): Observable<Provider> {\n    return this.api.getOne<Provider>('provider', id);\n  }\n\n  one_job(id: number): Observable<Job> {\n    return this.api.getOne<Job>('job', id).pipe(\n      map((j: Job) => ({\n        ...j,\n        prototype_name: j.action ? j.action.prototype_name : '',\n        prototype_version: j.action ? j.action.prototype_version : '',\n        bundle_id: j.action ? j.action.bundle_id : null,\n        name: j.action ? `${j.action.display_name}` : 'Object has been deleted',\n      }))\n    );\n  }\n\n  one_bundle(id: number): Observable<Bundle> {\n    return this.api.get<Bundle>(`${environment.apiRoot}stack/bundle/${id}/`);\n  }\n\n  getContext(param: ParamMap, service?: EntityService<any>): Observable<WorkerInstance> {\n    this.store.dispatch(setPathOfRoute({ params: param }));\n\n    const typeName = EntityNames.find((a) => param.keys.some((b) => a === b));\n    const id = +param.get(typeName);\n    const cluster$ = param.has('cluster') ? this.api.getOne<ICluster>('cluster', +param.get('cluster')) : of(null);\n    return cluster$\n      .pipe(\n        tap((cluster) => (this.Cluster = cluster)),\n        switchMap((cluster) => {\n          if (typeName === 'group_config') {\n            return service.get(id);\n          } else if (cluster && (typeName === 'servicecomponent' || typeName === 'component')) {\n            return this.serviceComponentService.get(id);\n          } else if (cluster && typeName !== 'cluster') {\n            return this.api.get<Entities>(`${cluster[typeName]}${id}/`);\n          } else {\n            return this[`one_${typeName}`](id);\n          }\n        }),\n      )\n      .pipe(\n        map((a: any) => {\n          this.worker.current = { ...a, name: (a?.display_name || a?.name || (a as Host)?.fqdn) ?? '', typeName };\n          this.workerSubject.next(this.worker);\n          return this.worker;\n        })\n      );\n  }\n\n  getLog(url: string): Observable<LogFile> {\n    return this.api.get<LogFile>(url);\n  }\n\n  getActions(): Observable<IAction[]> {\n    return typeof this.worker.current.action === 'string' ? this.api.get<IAction[]>(this.worker.current.action) : of([]);\n  }\n\n  getServices(p: ParamMap) {\n    return this.api.getList<Service>(this.Cluster.service, p).pipe(\n      map((r) => {\n        r.results = r.results.map((a) => ({ ...a, cluster: this.Cluster }));\n        return r;\n      })\n    );\n  }\n\n  addServices(output: { prototype_id: number }[]) {\n    return forkJoin(output.map((o) => this.api.post<Service>(this.Cluster.service, o)));\n  }\n\n  getHosts(p: ParamMap) {\n    return this.api.getList<Host>(this.Cluster.host, p);\n  }\n\n  addHost(host_id: number) {\n    return this.api.post(this.Cluster.host, { host_id });\n  }\n\n  reset(): Observable<WorkerInstance> {\n    if (!this.Current) return EMPTY;\n    const typeName = this.Current.typeName;\n    return this.api.get<Entities>(this.Current.url).pipe(\n      filter((_) => !!this.worker),\n      map((a) => {\n        if (typeName === 'cluster') this.worker.cluster = { ...(a as ICluster), typeName };\n        this.worker.current = { ...a, typeName, name: a.display_name || a.name || (a as Host).fqdn };\n        return this.worker;\n      })\n    );\n  }\n\n  getMainInfo() {\n    return this.api.get<any>(`${this.Current.config}current/`).pipe(\n      map((a: any) => a.config.find((b: { name: string }) => b.name === '__main_info')),\n      filter((a) => a),\n      map((a) => a.value),\n      catchError((e: HttpResponseBase) => {\n        if (e.status === 404) {\n          return of('Nothing to display');\n        } else {\n          return throwError(e);\n        }\n      }),\n    );\n  }\n\n  getBundleLicenseText(): Observable<string> {\n    const { license_url, license } = (this.Current as Bundle);\n\n    return this.api.get<License>(license_url).pipe(\n      map(({ text }) => license !== 'absent' ? text : 'No license required'),\n    );\n  }\n\n  /**\n   * Import / Export data for `Cluster`\n   */\n  getImportData() {\n    return 'imports' in this.Current ? this.api.get<IImport[]>(this.Current.imports) : EMPTY;\n  }\n\n  bindImport(bind: any) {\n    return 'imports' in this.Current ? this.api.post(this.Current.imports, bind) : EMPTY;\n  }\n\n  /**\n   * For `Job` and `Task` operating time data\n   */\n  getOperationTimeData(job: Job) {\n    const { start_date, finish_date, status } = job;\n    const sdn = Date.parse(start_date),\n      fdn = Date.parse(finish_date),\n      ttm = fdn - sdn,\n      sec = Math.floor(ttm / 1000),\n      min = Math.floor(sec / 60),\n      time = status !== 'running' ? `${min}m. ${sec - min * 60}s.` : '';\n    const a = new Date(sdn);\n    const b = new Date(fdn);\n    return { start: a.toLocaleTimeString(), end: status !== 'running' ? b.toLocaleTimeString() : '', time };\n  }\n}\n",
            "properties": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICluster | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entities",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ActionsService",
            "id": "injectable-ActionsService-6336ecef0c3a0e1478a498fbb3e3ca89",
            "file": "src/app/shared/components/actions/actions.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getActions",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApiService } from '@app/core/api';\n\n// export const fruit = {\n//   display_name: 'Fruit',\n//   desctiption: 'fruit description',\n//   children: [\n//     { display_name: 'Apple', description: 'description or some description about this action description or some description about this action' },\n//     { display_name: 'Banana', description: 'description or some description about this action bannana' },\n//     { display_name: 'Fruit loops', description: '' },\n//   ],\n// };\n\n// export const vegetable = {\n//   display_name: 'Vegetables',\n//   desctiption: 'description or some description about this action some description about this action Vegetables',\n//   children: [\n//     {\n//       display_name: 'Green',\n//       description: 'description or some description about this action description or some description about this action',\n//       children: [\n//         { display_name: 'Broccoli', description: 'description or some description about this action description or some description about this action' },\n//         { display_name: 'Brussels sprouts', description: 'description or some description about this action bannana' },\n//       ],\n//     },\n//     {\n//       display_name: 'Orange',\n//       description: 'description or some description about this action bannana',\n//       children: [\n//         { display_name: 'Pumpkins', description: 'description or some description about this action description or some description about this action' },\n//         { display_name: 'Carrots', description: 'description or some description about this action bannana' },\n//       ],\n//     },\n//   ],\n// };\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActionsService {\n  constructor(private api: ApiService) {}\n\n  getActions(url: string) {\n    return this.api.get<any[]>(url); //.pipe(map((a) => [fruit, vegetable, ...a]));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AddService",
            "id": "injectable-AddService-3ef9727fae7ca66330a93148e4dcac79",
            "file": "src/app/shared/add-component/add.service.ts",
            "properties": [
                {
                    "name": "_currentPrototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StackBase",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prototype",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partial<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prototype",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addHost",
                    "args": [
                        {
                            "name": "host",
                            "type": "Partial<Host>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Host>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "host",
                            "type": "Partial<Host>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addHostInCluster",
                    "args": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addService",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "genName",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHostListForCurrentCluster",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListResults",
                    "args": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProtoServiceForCurrentCluster",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPrototype",
                    "args": [
                        {
                            "name": "name",
                            "type": "StackInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Prototype[]>",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "StackInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "model",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "data",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { convertToParamMap, Params } from '@angular/router';\nimport { environment } from '@env/environment';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { catchError, concatAll, filter, map, switchMap } from 'rxjs/operators';\n\nimport { StackInfo, StackService } from '@app/core/services';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ApiService } from '@app/core/api';\nimport { Host, Prototype, ServicePrototype, StackBase, TypeName } from '@app/core/types';\nimport { DialogComponent } from '@app/shared/components/dialog.component';\nimport { GenName } from './naming';\nimport { MainService } from '@app/shared/configuration/main/main.service';\nimport { FormModel, IAddService } from '@app/shared/add-component/add-service-model';\n\n\nconst fromBundle = () =>\n  new FormGroup({\n    prototype_id: new FormControl('', Validators.required),\n    name: new FormControl('', Validators.required),\n    description: new FormControl(),\n  });\n\nconst MODELS: { [key: string]: FormModel } = {\n  provider: {\n    name: 'provider',\n    form: fromBundle(),\n  },\n  host: {\n    name: 'host',\n    form: new FormGroup({\n      fqdn: new FormControl('', [Validators.required, Validators.pattern(new RegExp(/^[A-Za-z0-9_\\.\\-]+$/))]),\n      cluster_id: new FormControl(),\n      provider_id: new FormControl('', Validators.required),\n    }),\n  },\n  cluster: {\n    name: 'cluster',\n    form: fromBundle(),\n  },\n  service: {\n    name: 'service',\n    title: 'services'\n  },\n  host2cluster: {\n    name: 'host2cluster',\n    title: 'hosts',\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddService implements IAddService {\n  private _currentPrototype: StackBase;\n  set currentPrototype(a: StackBase) {\n    this._currentPrototype = a;\n  }\n\n  get currentPrototype(): StackBase {\n    return this._currentPrototype;\n  }\n\n  constructor(private api: ApiService,\n              private stack: StackService,\n              private cluster: ClusterService,\n              public dialog: MatDialog,\n              private main: MainService,\n  ) {}\n\n  model(name: string) {\n    return MODELS[name];\n  }\n\n  get Cluster() {\n    return this.cluster.Cluster;\n  }\n\n  get Current() {\n    return this.main.Current;\n  }\n\n  genName(form: FormGroup) {\n    return form\n      .get('prototype_id')\n      .valueChanges.pipe(filter((v) => !!v))\n      .subscribe(() => {\n        const field = form.get('name');\n        if (!field.value) field.setValue(GenName.do());\n      });\n  }\n\n  add<T>(data: Partial<T>, name: TypeName, prototype?: StackBase) {\n    const currentPrototype = prototype || this.currentPrototype;\n    if (currentPrototype?.license === 'unaccepted') {\n      return this.api.root.pipe(\n        switchMap((root) =>\n          this.api.get<{ text: string }>(`${root.stack}bundle/${currentPrototype.bundle_id}/license/`).pipe(\n            switchMap((info) =>\n              this.dialog\n                .open(DialogComponent, {\n                  data: {\n                    title: `Accept license agreement`,\n                    text: info.text,\n                    controls: { label: 'Do you accept the license agreement?', buttons: ['Yes', 'No'] },\n                  },\n                })\n                .beforeClosed()\n                .pipe(\n                  filter((yes) => yes),\n                  switchMap(() =>\n                    this.api.put(`${root.stack}bundle/${currentPrototype.bundle_id}/license/accept/`, {}).pipe(switchMap(() => this.api.post<T>(root[name], data)))\n                  )\n                )\n            )\n          )\n        )\n      );\n    } else return this.api.root.pipe(switchMap((root) => this.api.post<T>(root[name], data)));\n  }\n\n  addHost(host: Partial<Host>): Observable<Host> {\n    const a$ = this.api.post<Host>(`${environment.apiRoot}provider/${host.provider_id}/host/`, { fqdn: host.fqdn });\n    const b$ = a$.pipe(\n      map((h) => (host.cluster_id ? this.api.post<Host>(`${environment.apiRoot}cluster/${host.cluster_id}/host/`, { host_id: h.id }) : of(h)))\n    );\n    return b$.pipe(concatAll());\n  }\n\n  addHostInCluster(ids: number[]) {\n    return forkJoin([...ids.map(id => this.cluster.addHost(id))]);\n  }\n\n  addService(data: { prototype_id: number }[]) {\n    return this.cluster.addServices(data);\n  }\n\n  getListResults<T>(type: TypeName, param: Params = {}) {\n    const paramMap = convertToParamMap(param);\n    return this.api.root.pipe(switchMap((root) => this.api.getList<T>(root[type], paramMap)));\n  }\n\n  getList<T>(type: TypeName, param: Params = {}): Observable<T[]> {\n    return this.getListResults<T>(type, param).pipe(map((list) => list.results));\n  }\n\n  getPrototype(name: StackInfo, param: { [key: string]: string | number }): Observable<Prototype[]> {\n    return this.stack.fromStack(name, param);\n  }\n\n  getProtoServiceForCurrentCluster() {\n    return this.api.get<StackBase[]>(this.cluster.Cluster.serviceprototype).pipe(\n      map((a: ServicePrototype[]) =>\n        a\n          .filter((b) => !b.selected)\n          .map((b) => ({\n            ...b,\n            name: `${b.display_name} - ${b.version}`,\n          }))\n      )\n    );\n  }\n\n  upload(data: FormData[]) {\n    return this.stack.upload(data).pipe(catchError((e) => throwError(e)));\n  }\n\n  getHostListForCurrentCluster() {\n    return this.api.get<Host[]>(this.cluster.Cluster.host).pipe(\n      map((hosts) =>\n        hosts\n          .map((host) => ({\n            ...host,\n            name: host.fqdn,\n          }))\n      )\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stack",
                        "type": "StackService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "main",
                        "type": "MainService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stack",
                        "type": "StackService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "main",
                        "type": "MainService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentPrototype": {
                    "name": "currentPrototype",
                    "setSignature": {
                        "name": "currentPrototype",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "a",
                                "type": "StackBase",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "a",
                                "type": "StackBase",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentPrototype",
                        "type": "",
                        "returnType": "StackBase",
                        "line": 73
                    }
                },
                "Cluster": {
                    "name": "Cluster",
                    "getSignature": {
                        "name": "Cluster",
                        "type": "",
                        "returnType": "",
                        "line": 88
                    }
                },
                "Current": {
                    "name": "Current",
                    "getSignature": {
                        "name": "Current",
                        "type": "",
                        "returnType": "",
                        "line": 92
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ApiEffects",
            "id": "injectable-ApiEffects-9fc30922f74708781225b00333cce55b",
            "file": "src/app/core/api/api.effects.ts",
            "properties": [
                {
                    "name": "retry$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(rootError),\n      delay(3000),\n      switchMap(() =>\n        this.api.get<IRoot>(environment.apiRoot).pipe(\n          map(root => rootSuccess({ root })),\n          catchError(() => of(rootError()))\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "root$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadRoot),\n      exhaustMap(() =>\n        this.api.get<IRoot>(environment.apiRoot).pipe(\n          map(root => rootSuccess({ root })),\n          catchError(() => of(rootError()))\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "stack$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadStack),\n      withLatestFrom(this.store, (actions, store) => store.api),\n      filter(api => api.root && !api.stack),\n      exhaustMap(api => this.api.get<IRoot>(api.root.stack).pipe(map(stack => stackSuccess({ stack }))))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IRoot } from '@app/core/types/api';\nimport { environment } from '@env/environment';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, delay, exhaustMap, filter, map, switchMap, withLatestFrom } from 'rxjs/operators';\n\nimport { State } from '../store';\nimport { loadRoot, loadStack, rootError, rootSuccess, stackSuccess } from './api.reducer';\nimport { ApiService } from './api.service';\n\n@Injectable()\nexport class ApiEffects {\n  root$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadRoot),\n      exhaustMap(() =>\n        this.api.get<IRoot>(environment.apiRoot).pipe(\n          map(root => rootSuccess({ root })),\n          catchError(() => of(rootError()))\n        )\n      )\n    )\n  );\n\n  retry$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(rootError),\n      delay(3000),\n      switchMap(() =>\n        this.api.get<IRoot>(environment.apiRoot).pipe(\n          map(root => rootSuccess({ root })),\n          catchError(() => of(rootError()))\n        )\n      )\n    )\n  );\n\n  stack$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadStack),\n      withLatestFrom(this.store, (actions, store) => store.api),\n      filter(api => api.root && !api.stack),\n      exhaustMap(api => this.api.get<IRoot>(api.root.stack).pipe(map(stack => stackSuccess({ stack }))))\n    )\n  );\n\n  constructor(private actions$: Actions, private api: ApiService, private store: Store<State>) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApiService",
            "id": "injectable-ApiService-c4a1dd344dfe5a2c435fa29e712883f6",
            "file": "src/app/core/api/api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListResult<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPure",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "Object | FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "Object | FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ParamMap } from '@angular/router';\nimport { IRoot, TypeName } from '@app/core/types/api';\nimport { ListResult } from '@app/models/list-result';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable } from 'rxjs';\nimport { catchError, filter, switchMap } from 'rxjs/operators';\n\nimport { State } from '../store';\nimport { getRoot } from './api.reducer';\n\n@Injectable()\nexport class ApiService {\n  constructor(private http: HttpClient, private store: Store<State>) {}\n\n  get root(): Observable<IRoot> {\n    return this.store.pipe(select(getRoot)).pipe(filter((root) => !!root));\n  }\n\n  getPure<T>(typeName: TypeName, params: { [key: string]: string } = {}): Observable<T[]> {\n    return this.root.pipe(switchMap((root) => this.get<T[]>(root[typeName], params))).pipe(catchError(() => EMPTY));\n  }\n\n  getOne<T>(typeName: TypeName, id: number, params: { [key: string]: string } = {}) {\n    return this.root.pipe(switchMap((root) => this.get<T>(`${root[typeName]}${id}/`, params))).pipe(catchError(() => EMPTY));\n  }\n\n  get<T>(url: string, params: { [key: string]: string } = {}): Observable<T> {\n    return this.http.get<T>(url, { params });\n  }\n\n  getList<T>(url: string, p: ParamMap): Observable<ListResult<T>> {\n    const params = p?.keys.reduce((pr, c) => ({ ...pr, [c]: p.get(c) }), {});\n    if (p) {\n      const limit = p.get('limit') ? +p.get('limit') : +localStorage.getItem('limit'),\n        offset = (p.get('page') ? +p.get('page') : 0) * limit;\n      params['limit'] = limit.toString();\n      params['offset'] = offset.toString();\n      params['status'] = p.get('filter') || '';\n    }\n    return this.get<ListResult<T>>(url, params);\n  }\n\n  list<T>(url: string, params: { limit: string; offset: string; ordering?: string } | null) {\n    if (!params) {\n      params = { limit: localStorage.getItem('limit'), offset: '0' };\n    }\n    return this.get<ListResult<T>>(url, params);\n  }\n\n  post<T>(url: string, item: Object | FormData): Observable<T> {\n    return this.http.post<T>(url, item);\n  }\n\n  put<T>(url: string, item: any): Observable<T> {\n    return this.http.put<T>(url, item).pipe(catchError(() => EMPTY));\n  }\n\n  patch<T>(url: string, item: any): Observable<T> {\n    return this.http.patch<T>(url, item).pipe(catchError(() => EMPTY));\n  }\n\n  delete(url: string) {\n    return this.http.delete(url).pipe(catchError(() => EMPTY));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "root": {
                    "name": "root",
                    "getSignature": {
                        "name": "root",
                        "type": "",
                        "returnType": "Observable<IRoot>",
                        "line": 28
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AppService",
            "id": "injectable-AppService-b94c005ca6e31012de3308c5aad8b5c1",
            "file": "src/app/core/services/app/app.service.ts",
            "properties": [
                {
                    "name": "snackBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBar",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkUserProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkWSconnectStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRootAndCheckAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVersion",
                    "args": [
                        {
                            "name": "versionData",
                            "type": "IVersionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IVersionInfo",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "versionData",
                            "type": "IVersionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { NavigationStart, Router } from '@angular/router';\nimport { getConnectStatus, getFirstAdminLogin, getProfile, getRoot, isAuthenticated, loadProfile, loadRoot, loadStack, rootError, socketInit, State } from '@app/core/store';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\nimport { ChannelService, keyChannelStrim } from '../channel.service';\nimport { ConfigService, IVersionInfo } from '../config.service';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private store: Store<State>,\n    private config: ConfigService,\n    private router: Router,\n    private dialog: MatDialog,\n    private channel: ChannelService,\n    public snackBar: MatSnackBar\n  ) {}\n\n  getRootAndCheckAuth() {\n    this.store.dispatch(loadRoot());\n    const b$ = this.store.pipe(select(getRoot));\n    const a$ = this.store.pipe(select(isAuthenticated));\n    return combineLatest([a$, b$]).pipe(\n      filter((a) => a[0] && !!a[1]),\n      switchMap((_) => this.config.load()),\n      tap((c) => {\n        if (!c) {\n          this.channel.next(keyChannelStrim.notifying, 'New version available. Page has been refreshed.');\n          setTimeout(() => location.reload(), 2000);\n        } else {\n          this.store.dispatch(socketInit());\n          this.store.dispatch(loadStack());\n          this.store.dispatch(loadProfile());\n        }\n      })\n    );\n  }\n\n  checkWSconnectStatus() {\n    return this.store.pipe(\n      select(getConnectStatus),\n      filter((a) => !!a),\n      tap((status) => {\n        if (status === 'open') this.channel.next(keyChannelStrim.notifying, 'Connection established.');\n        if (status === 'close') {\n          this.channel.next(keyChannelStrim.notifying, 'Connection lost. Recovery attempt.::error');\n          this.store.dispatch(rootError());\n        }\n      })\n    );\n  }\n\n  checkUserProfile() {\n    return this.store.pipe(\n      select(getProfile),\n      filter((u) => u.settingsSaved)\n    );\n  }\n\n  getVersion(versionData: IVersionInfo): IVersionInfo {\n    return this.config.version.split('-').reduce((p, c, i) => ({ ...p, [Object.keys(versionData)[i]]: c }), {} as IVersionInfo);\n  }\n\n  initListeners() {\n    // check user profile settings - this is the first entry\n    this.store\n      .pipe(\n        select(getFirstAdminLogin),\n        filter((u) => u)\n      )\n      .subscribe(() => this.router.navigate(['admin']));\n\n    // close dialog\n    this.router.events.pipe(filter((e) => e instanceof NavigationStart)).subscribe(() => this.dialog.closeAll());\n\n    // notification\n    this.channel.on<string>(keyChannelStrim.notifying).subscribe((m) => {\n      const astr = m.split('::');\n      const data = astr[1]\n        ? { panelClass: 'snack-bar-error' }\n        : {\n            duration: 5000,\n            panelClass: 'snack-bar-notify',\n          };\n      this.snackBar.open(astr[0], 'Hide', data);\n    });\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AttributeService",
            "id": "injectable-AttributeService-651cfdba3f000923bbee8d3d05505de6",
            "file": "src/app/shared/configuration/attributes/attribute.service.ts",
            "properties": [
                {
                    "name": "_activeAttributes",
                    "defaultValue": "[\n    ConfigAttributeNames.GROUP_KEYS,\n    ConfigAttributeNames.CUSTOM_GROUP_KEYS\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<ConfigAttributeNames>[]",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "_attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attributes",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_createAttributes",
                    "args": [
                        {
                            "name": "_activeAttributes",
                            "type": "Partial<ConfigAttributeNames>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configs",
                            "type": "AttributesOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Attributes",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "_activeAttributes",
                            "type": "Partial<ConfigAttributeNames>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configs",
                            "type": "AttributesOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByName",
                    "args": [
                        {
                            "name": "name",
                            "type": "ConfigAttributeNames",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConfigAttribute",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "ConfigAttributeNames",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rawAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, InjectionToken, TemplateRef, Type } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { isBoolean, isEmptyObject } from '@app/core/types';\nimport { FieldComponent } from '@app/shared/configuration/field/field.component';\n\nexport const ATTRIBUTES_OPTIONS = new InjectionToken('Attributes options');\n\nexport interface AttributeOptions {\n  name: ConfigAttributeNames;\n  wrapper?: Type<AttributeWrapper>;\n  options?: ConfigAttributeOptions;\n}\n\nexport type AttributesOptions = Record<ConfigAttributeNames, AttributeOptions>\n\nexport interface AttributeWrapper {\n  fieldTemplate: TemplateRef<any>;\n  wrapperOptions: ConfigAttributeOptions;\n  fieldOptions: IFieldOptions;\n  attributeForm: FormGroup;\n  parametersForm: FormGroup;\n  field: FieldComponent;\n}\n\nexport enum ConfigAttributeNames {\n  // an attribute for adding config parameters to group\n  GROUP_KEYS = 'group_keys',\n  // an attribute for config parameters that determines whether this parameter can be added to the config group\n  CUSTOM_GROUP_KEYS = 'custom_group_keys'\n}\n\nexport interface ConfigAttributesJSON {\n  [key: string]: any;\n}\n\nexport interface ConfigAttributeOptions {\n  tooltipText?: string;\n\n  [key: string]: any;\n}\n\nexport type ConfigAttribute = AttributeOptions & { value: ConfigAttributesJSON, form: FormGroup };\n\nexport type Attributes = Map<ConfigAttributeNames, ConfigAttribute>;\n\n@Injectable()\nexport class AttributeService {\n\n  private readonly _activeAttributes: Partial<ConfigAttributeNames>[] = [\n    ConfigAttributeNames.GROUP_KEYS,\n    ConfigAttributeNames.CUSTOM_GROUP_KEYS\n  ];\n\n  get attributes(): Attributes {\n    return this._attributes;\n  }\n\n  private _attributes: Attributes;\n\n  constructor(@Inject(ATTRIBUTES_OPTIONS) private _configs: AttributesOptions, private _fb: FormBuilder) {\n  }\n\n  init(json: ConfigAttributesJSON): void {\n    this._attributes = this._createAttributes(this._activeAttributes, json, this._configs);\n  }\n\n  getByName(name: ConfigAttributeNames): ConfigAttribute {\n    return this._attributes.has(name) ? this._attributes.get(name) : undefined;\n  }\n\n  private _createAttributes(_activeAttributes: Partial<ConfigAttributeNames>[], json: ConfigAttributesJSON, configs: AttributesOptions): Attributes {\n    const isEmptyAttrs = !Object.keys(json || {}).length;\n    const isActiveAttrsPresent = !!Object.keys(json || {}).filter((x: ConfigAttributeNames) => this._activeAttributes.includes(x)).length;\n    if (isEmptyAttrs || !isActiveAttrsPresent) {\n      return;\n    }\n\n    return new Map(this._activeAttributes.map((attr) => [\n      attr,\n      new ConfigAttributeFactory(this._fb).create(attr, json[attr], configs[attr], json),\n    ]));\n  }\n\n\n  rawAttributes() {\n    let json = {};\n    if (this._attributes) {\n      for (const [key, value] of this._attributes.entries()) {\n        json = {\n          ...json,\n          [key]: value.form.value\n        };\n      }\n    }\n\n    return json;\n  }\n}\n\nexport const createFormForAttribute = (fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n};\n\n\nexport class ConfigAttributeFactory {\n\n  constructor(private fb: FormBuilder) {}\n\n  create(name: ConfigAttributeNames, value: ConfigAttributesJSON, options: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n    if (!this[name]) {\n      return;\n    }\n\n    return this[name](value, options, json);\n  }\n\n  [ConfigAttributeNames.GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options,\n    wrapper\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return {\n      name,\n      value,\n      wrapper,\n      options,\n      form\n    };\n  }\n\n  [ConfigAttributeNames.CUSTOM_GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return { name, value, options, form };\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_configs",
                        "type": "AttributesOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "_configs",
                        "type": "AttributesOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "attributes": {
                    "name": "attributes",
                    "getSignature": {
                        "name": "attributes",
                        "type": "",
                        "returnType": "Attributes",
                        "line": 55
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-c93cd801beead75ee8f3180f3314d660",
            "file": "src/app/core/auth/auth.store.ts",
            "properties": [
                {
                    "name": "auth$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(authLogin),\n        switchMap(a =>\n          this.authService.login(a.login, a.password).pipe(\n            map(() => authSuccess({ login: a.login })),\n            catchError(() => of(authFaled({ message: 'Incorrect password or user.' })))\n          )\n        )\n      ),\n    { useEffectsErrorHandler: true }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "check$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(authCheck),\n      map(() =>\n        this.authService.auth.token\n          ? authSuccess({ login: this.authService.auth.login })\n          : authFaled({ message: 'User is not authorized!' })\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "logout$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(authLogout),\n        tap(() => this.authService.logout())\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action, createAction, createFeatureSelector, createReducer, createSelector, on, props } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\n\nexport const authCheck = createAction('[Auth] Check');\nexport const authLogin = createAction('[Auth] Login', props<{ login: string; password: string }>());\nexport const authSuccess = createAction('[Auth] LoginSuccess', props<{ login: string }>());\nexport const authFaled = createAction('[Auth] LoginFaled', props<{ message: string }>());\nexport const authLogout = createAction('[Auth] Logout');\n\nexport interface AuthState {\n  isValid: boolean;\n  message: string;\n}\n\nconst initialState: AuthState = {\n  isValid: false,\n  message: '',\n};\n\nconst reducer = createReducer(\n  initialState,\n  on(authSuccess, state => ({ isValid: true, message: 'Auth is success.' })),\n  on(authFaled, (state, { message }) => ({ isValid: false, message })),\n  on(authLogout, state => ({ isValid: false, message: '' }))\n);\n\nexport function authReducer(state: AuthState, action: Action) {\n  return reducer(state, action);\n}\n\nexport const getAuthState = createFeatureSelector<AuthState>('auth');\nexport const isAuthenticated = createSelector(\n  getAuthState,\n  state => state.isValid\n);\n\n@Injectable()\nexport class AuthEffects {\n  check$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(authCheck),\n      map(() =>\n        this.authService.auth.token\n          ? authSuccess({ login: this.authService.auth.login })\n          : authFaled({ message: 'User is not authorized!' })\n      )\n    )\n  );\n\n  auth$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(authLogin),\n        switchMap(a =>\n          this.authService.login(a.login, a.password).pipe(\n            map(() => authSuccess({ login: a.login })),\n            catchError(() => of(authFaled({ message: 'Incorrect password or user.' })))\n          )\n        )\n      ),\n    { useEffectsErrorHandler: true }\n  );\n\n  logout$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(authLogout),\n        tap(() => this.authService.logout())\n      ),\n    { dispatch: false }\n  );\n\n  constructor(private actions$: Actions, private authService: AuthService) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-1a73d8404c4a8783a33220a1f6cf89e8",
            "file": "src/app/core/auth/auth.service.ts",
            "properties": [
                {
                    "name": "redirectUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { ApiService } from '../api';\n\n@Injectable()\nexport class AuthService {\n  public get token(): string {\n    return this.auth.token;\n  }\n\n  public get auth() {\n    const auth = localStorage.getItem('auth') || '';\n    return auth ? JSON.parse(auth) : { login: '', token: '' };\n  }\n\n  public set auth(value: { login: string; token: string }) {\n    localStorage.setItem('auth', JSON.stringify(value));\n  }\n\n  public redirectUrl: string;\n\n  constructor(private api: ApiService) {}\n\n  checkGoogle() {\n    return this.api.get<{google_oauth: boolean}>(`${environment.apiRoot}info/`).pipe(map(a => a.google_oauth));\n  }\n\n  login(login: string, password: string): Observable<{ token: string }> {\n    return this.api.post(`${environment.apiRoot}token/`, { username: login, password }).pipe(\n      tap((response: { token: string }) => {\n        let token = response && response.token;\n        if (token) {\n          this.auth = { login, token };\n        }\n      }),\n      catchError(err => {\n        this.auth = { login: '', token: '' };\n        return throwError(err);\n      })\n    );\n  }\n\n  logout() {\n    this.auth = { login: '', token: '' };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "string",
                        "returnType": "string",
                        "line": 22
                    }
                },
                "auth": {
                    "name": "auth",
                    "setSignature": {
                        "name": "auth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "auth",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BundleService",
            "id": "injectable-BundleService-a15c3c1fbdf22d493fdb9dc9c1f1e710",
            "file": "src/app/services/bundle.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Bundle>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EntityService } from '../abstract/entity-service';\nimport { Bundle } from '../core/types';\nimport { ApiService } from '../core/api';\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BundleService extends EntityService<Bundle> {\n\n  constructor(\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(\n    id: number,\n    params: { [key: string]: string } = {},\n  ): Observable<Bundle> {\n    return this.api.get(`${environment.apiRoot}stack/bundle/${id}/`, params);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "ChannelService",
            "id": "injectable-ChannelService-74d64d1aba32ec1d01c0f425b85ec663",
            "file": "src/app/core/services/channel.service.ts",
            "properties": [
                {
                    "name": "event",
                    "defaultValue": "new Subject<IBroadcast<TKey>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "next",
                    "args": [
                        {
                            "name": "key",
                            "type": "TKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "TKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "on",
                    "args": [
                        {
                            "name": "key",
                            "type": "TKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "TKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nexport enum keyChannelStrim {\n  'scroll',\n  'notifying',\n  'load_complete'\n}\n\nexport interface IBroadcast<TKey = keyChannelStrim> {\n  key: TKey;\n  value: any;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChannelService<TKey = keyChannelStrim> {\n  private event = new Subject<IBroadcast<TKey>>();\n\n  next<T>(key: TKey, value: T) {\n    this.event.next({ key, value });\n  }\n\n  on<T = any>(key: TKey): Observable<T> {\n    return this.event.asObservable().pipe(\n      filter((e) => e.key === key),\n      map<IBroadcast<TKey>, T>((a) => a.value)\n    );\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ClusterEntityService",
            "id": "injectable-ClusterEntityService-1762ae86ddfb98493c8cae3cd01d63f8",
            "file": "src/app/services/cluster-entity.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "entityStatusTreeToStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "ClusterStatusTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTree[]",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "ClusterStatusTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICluster>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                },
                {
                    "name": "getStatusTree",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClusterStatusTree>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EntityService } from '@app/abstract/entity-service';\nimport { environment } from '@env/environment';\nimport { ApiService } from '@app/core/api';\nimport { ICluster } from '@app/models/cluster';\nimport { ClusterStatusTree, StatusTree } from '@app/models/status-tree';\nimport { HavingStatusTreeAbstractService } from '@app/abstract/having-status-tree.abstract.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClusterEntityService extends EntityService<ICluster> implements HavingStatusTreeAbstractService<ClusterStatusTree, ICluster> {\n\n  constructor(\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(\n    id: number,\n    params: { [key: string]: string } = {},\n  ): Observable<ICluster> {\n    return this.api.get(`${environment.apiRoot}cluster/${id}/`, params);\n  }\n\n  getStatusTree(id: number): Observable<ClusterStatusTree> {\n    return this.api.get(`${environment.apiRoot}cluster/${id}/status/`);\n  }\n\n  entityStatusTreeToStatusTree(input: ClusterStatusTree): StatusTree[] {\n    let hostsStatus;\n    let servicesStatus;\n\n    const hosts = input.chilren.hosts.map((host) => {\n      hostsStatus = host.status;\n\n      return {\n        subject: {\n          id: host.id,\n          status: host.status,\n          name: host.name,\n          link: (id) => ['/cluster', input.id.toString(), 'host', id.toString(), 'status'],\n        },\n        children: [],\n      };\n    });\n\n    const services = input.chilren.services.map((service) => {\n      servicesStatus = service.status;\n\n      return {\n        subject: {\n          id: service.id,\n          status: service.status,\n          name: service.name,\n        },\n        children: service.hc.map(component => ({\n          subject: {\n            id: component.id,\n            name: component.name,\n            status: component.status,\n          },\n          children: component.hosts.map(host => ({\n            subject: {\n              id: host.id,\n              status: host.status,\n              name: host.name,\n              link: (id) => ['/cluster', input.id.toString(), 'host', id.toString(), 'status'],\n            },\n            children: [],\n          })),\n        })),\n      };\n    });\n\n    return [{\n      subject: {\n        id: input.id,\n        status: input.status,\n        name: input.name,\n      },\n      children: [\n        {\n          subject: {\n            name: 'Hosts',\n            status: hostsStatus\n          },\n          children: hosts,\n        },\n        {\n          subject: {\n            name: 'Services',\n            status: servicesStatus\n          },\n          children: services,\n        }\n      ],\n    }];\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "ClusterService",
            "id": "injectable-ClusterService-15046e581cc73dfa1357124a078aabc3",
            "file": "src/app/core/services/cluster.service.ts",
            "properties": [
                {
                    "name": "worker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkerInstance | null",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "worker$",
                    "defaultValue": "this.workerSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "workerSubject",
                    "defaultValue": "new BehaviorSubject<WorkerInstance>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addHost",
                    "args": [
                        {
                            "name": "host_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "host_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addServices",
                    "args": [
                        {
                            "name": "output",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "output",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "bindImport",
                    "args": [
                        {
                            "name": "bind",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bind",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearWorker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IAction[]>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBundleLicenseText",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getContext",
                    "args": [
                        {
                            "name": "param",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "service",
                            "type": "EntityService<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WorkerInstance>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "service",
                            "type": "EntityService<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHosts",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImportData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImport / Export data for `Cluster`\n",
                    "description": "<p>Import / Export data for <code>Cluster</code></p>\n"
                },
                {
                    "name": "getLog",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LogFile>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMainInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOperationTimeData",
                    "args": [
                        {
                            "name": "job",
                            "type": "Job",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ start: any; end: any; time: string; }",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFor `Job` and `Task` operating time data\n",
                    "description": "<p>For <code>Job</code> and <code>Task</code> operating time data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "job",
                            "type": "Job",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServices",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "one_bundle",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Bundle>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "one_cluster",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICluster>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "one_host",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Host>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "one_job",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Job>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "one_provider",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Provider>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "one_service",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Service>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<WorkerInstance>",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ParamMap } from '@angular/router';\nimport { ApiService } from '@app/core/api';\nimport { BehaviorSubject, EMPTY, forkJoin, Observable, of, throwError } from 'rxjs';\nimport { catchError, filter, map, switchMap, tap } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport {\n  Bundle,\n  Entities,\n  Host,\n  IAction,\n  IImport,\n  Job,\n  License,\n  LogFile,\n  Provider,\n  Service\n} from '@app/core/types';\nimport { environment } from '@env/environment';\nimport { ServiceComponentService } from '@app/services/service-component.service';\nimport { EntityNames } from '@app/models/entity-names';\nimport { HttpResponseBase } from '@angular/common/http';\nimport { setPathOfRoute } from '@app/store/navigation/navigation.store';\nimport { EntityService } from '@app/abstract/entity-service';\nimport { ICluster } from '@app/models/cluster';\n\nexport interface WorkerInstance {\n  current: Entities;\n  cluster: ICluster | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClusterService {\n  private worker: WorkerInstance | null;\n  private workerSubject = new BehaviorSubject<WorkerInstance>(null);\n  public worker$ = this.workerSubject.asObservable();\n\n  get Cluster() {\n    return this.worker ? this.worker.cluster : null;\n  }\n\n  set Cluster(cluster: ICluster) {\n    if (cluster) cluster.typeName = 'cluster';\n    if (this.worker) this.worker.cluster = cluster;\n    else this.worker = { current: cluster, cluster: cluster };\n  }\n\n  get Current(): Entities {\n    return this.worker ? this.worker.current : null;\n  }\n\n  constructor(\n    protected api: ApiService,\n    protected serviceComponentService: ServiceComponentService,\n    protected store: Store,\n  ) {}\n\n  clearWorker() {\n    this.worker = null;\n  }\n\n  one_cluster(id: number): Observable<ICluster> {\n    return this.Cluster ? of(this.Cluster) : this.api.getOne<ICluster>('cluster', id);\n  }\n\n  one_service(id: number): Observable<Service> {\n    return this.api.get<Service>(`${this.worker.cluster.service}${id}/`);\n  }\n\n  one_host(id: number): Observable<Host> {\n    return this.api.getOne<Host>('host', id).pipe(map((host: Host) => ({ ...host, name: host.fqdn })));\n  }\n\n  one_provider(id: number): Observable<Provider> {\n    return this.api.getOne<Provider>('provider', id);\n  }\n\n  one_job(id: number): Observable<Job> {\n    return this.api.getOne<Job>('job', id).pipe(\n      map((j: Job) => ({\n        ...j,\n        prototype_name: j.action ? j.action.prototype_name : '',\n        prototype_version: j.action ? j.action.prototype_version : '',\n        bundle_id: j.action ? j.action.bundle_id : null,\n        name: j.action ? `${j.action.display_name}` : 'Object has been deleted',\n      }))\n    );\n  }\n\n  one_bundle(id: number): Observable<Bundle> {\n    return this.api.get<Bundle>(`${environment.apiRoot}stack/bundle/${id}/`);\n  }\n\n  getContext(param: ParamMap, service?: EntityService<any>): Observable<WorkerInstance> {\n    this.store.dispatch(setPathOfRoute({ params: param }));\n\n    const typeName = EntityNames.find((a) => param.keys.some((b) => a === b));\n    const id = +param.get(typeName);\n    const cluster$ = param.has('cluster') ? this.api.getOne<ICluster>('cluster', +param.get('cluster')) : of(null);\n    return cluster$\n      .pipe(\n        tap((cluster) => (this.Cluster = cluster)),\n        switchMap((cluster) => {\n          if (typeName === 'group_config') {\n            return service.get(id);\n          } else if (cluster && (typeName === 'servicecomponent' || typeName === 'component')) {\n            return this.serviceComponentService.get(id);\n          } else if (cluster && typeName !== 'cluster') {\n            return this.api.get<Entities>(`${cluster[typeName]}${id}/`);\n          } else {\n            return this[`one_${typeName}`](id);\n          }\n        }),\n      )\n      .pipe(\n        map((a: any) => {\n          this.worker.current = { ...a, name: (a?.display_name || a?.name || (a as Host)?.fqdn) ?? '', typeName };\n          this.workerSubject.next(this.worker);\n          return this.worker;\n        })\n      );\n  }\n\n  getLog(url: string): Observable<LogFile> {\n    return this.api.get<LogFile>(url);\n  }\n\n  getActions(): Observable<IAction[]> {\n    return typeof this.worker.current.action === 'string' ? this.api.get<IAction[]>(this.worker.current.action) : of([]);\n  }\n\n  getServices(p: ParamMap) {\n    return this.api.getList<Service>(this.Cluster.service, p).pipe(\n      map((r) => {\n        r.results = r.results.map((a) => ({ ...a, cluster: this.Cluster }));\n        return r;\n      })\n    );\n  }\n\n  addServices(output: { prototype_id: number }[]) {\n    return forkJoin(output.map((o) => this.api.post<Service>(this.Cluster.service, o)));\n  }\n\n  getHosts(p: ParamMap) {\n    return this.api.getList<Host>(this.Cluster.host, p);\n  }\n\n  addHost(host_id: number) {\n    return this.api.post(this.Cluster.host, { host_id });\n  }\n\n  reset(): Observable<WorkerInstance> {\n    if (!this.Current) return EMPTY;\n    const typeName = this.Current.typeName;\n    return this.api.get<Entities>(this.Current.url).pipe(\n      filter((_) => !!this.worker),\n      map((a) => {\n        if (typeName === 'cluster') this.worker.cluster = { ...(a as ICluster), typeName };\n        this.worker.current = { ...a, typeName, name: a.display_name || a.name || (a as Host).fqdn };\n        return this.worker;\n      })\n    );\n  }\n\n  getMainInfo() {\n    return this.api.get<any>(`${this.Current.config}current/`).pipe(\n      map((a: any) => a.config.find((b: { name: string }) => b.name === '__main_info')),\n      filter((a) => a),\n      map((a) => a.value),\n      catchError((e: HttpResponseBase) => {\n        if (e.status === 404) {\n          return of('Nothing to display');\n        } else {\n          return throwError(e);\n        }\n      }),\n    );\n  }\n\n  getBundleLicenseText(): Observable<string> {\n    const { license_url, license } = (this.Current as Bundle);\n\n    return this.api.get<License>(license_url).pipe(\n      map(({ text }) => license !== 'absent' ? text : 'No license required'),\n    );\n  }\n\n  /**\n   * Import / Export data for `Cluster`\n   */\n  getImportData() {\n    return 'imports' in this.Current ? this.api.get<IImport[]>(this.Current.imports) : EMPTY;\n  }\n\n  bindImport(bind: any) {\n    return 'imports' in this.Current ? this.api.post(this.Current.imports, bind) : EMPTY;\n  }\n\n  /**\n   * For `Job` and `Task` operating time data\n   */\n  getOperationTimeData(job: Job) {\n    const { start_date, finish_date, status } = job;\n    const sdn = Date.parse(start_date),\n      fdn = Date.parse(finish_date),\n      ttm = fdn - sdn,\n      sec = Math.floor(ttm / 1000),\n      min = Math.floor(sec / 60),\n      time = status !== 'running' ? `${min}m. ${sec - min * 60}s.` : '';\n    const a = new Date(sdn);\n    const b = new Date(fdn);\n    return { start: a.toLocaleTimeString(), end: status !== 'running' ? b.toLocaleTimeString() : '', time };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "serviceComponentService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serviceComponentService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "Cluster": {
                    "name": "Cluster",
                    "setSignature": {
                        "name": "Cluster",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "cluster",
                                "type": "ICluster",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "cluster",
                                "type": "ICluster",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "Cluster",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                },
                "Current": {
                    "name": "Current",
                    "getSignature": {
                        "name": "Current",
                        "type": "",
                        "returnType": "Entities",
                        "line": 62
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ComponentData",
            "id": "injectable-ComponentData-0aa6c34b3edfef5dfe8a28653d0685f0",
            "file": "src/app/shared/components/tooltip/tooltip.service.ts",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "emitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\nimport { BaseEntity } from '@app/core/types/api';\nimport { Subject } from 'rxjs';\n\nexport type ComponentName = 'issue' | 'status' | undefined;\nexport type PositionType = 'top' | 'right' | 'bottom' | 'left';\nexport interface TooltipOptions {\n  event: MouseEvent;\n  source: HTMLElement;\n  options: TooltipDisplayOptions;\n}\n\nexport interface TooltipDisplayOptions {\n  content: string | BaseEntity;\n  componentName: ComponentName;\n  position: PositionType;\n  condition: boolean;\n}\n\n@Injectable()\nexport class ComponentData {\n  path: string;\n  current: any;\n  emitter: EventEmitter<any>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TooltipService {\n  private positionSource = new Subject<TooltipOptions>();\n  position$ = this.positionSource.asObservable();\n  timeOut: any;\n\n  /**\n   * TODO: show a tooltip if there is a condition\n   *\n   * @returns\n   * @memberof TooltipComponent\n   */\n  isShow(source: HTMLElement, options: TooltipDisplayOptions) {\n    if (options.condition) {\n      return source.offsetWidth !== source.scrollWidth;\n    }\n    return true;\n  }\n\n  show(event: MouseEvent, source: HTMLElement, options: TooltipDisplayOptions) {\n    this.positionSource.next();\n    clearTimeout(this.timeOut);\n    if (this.isShow(source, options)) {\n      this.positionSource.next({ event, source, options });\n    }\n  }\n\n  hide(withoutTimout = false, timeout = 500) {\n    if (withoutTimout) {\n      this.positionSource.next();\n      return;\n    }\n\n    this.timeOut = setTimeout(() => this.positionSource.next(), timeout);\n  }\n\n  mouseEnterTooltip() {\n    clearTimeout(this.timeOut);\n  }\n\n  mouseLeaveTooltip() {\n    this.hide();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ConcernService",
            "id": "injectable-ConcernService-742d732e4654358d603998bf0d04fa22",
            "file": "src/app/services/concern.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "eventFilter",
                            "type": "ConcernEventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EventMessage>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventFilter",
                            "type": "ConcernEventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "issueMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "issueMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ConcernEventFilter, EventableService } from '@app/models/eventable-service';\nimport { EventMessage, selectMessage, SocketState } from '@app/core/store';\n\n@Injectable()\nexport class ConcernService implements EventableService {\n\n  constructor(\n    private store: Store<SocketState>,\n  ) { }\n\n  parse(issueMessage: string): string[] {\n    let result = [];\n    for (const item of issueMessage.matchAll(/(.*?)(\\$\\{.+?\\})|(.+$)/g)) {\n      if (item.length) {\n        result = [ ...result, ...item.slice(1, item.length) ];\n      }\n    }\n\n    return result.filter(item => !!item);\n  }\n\n  events(eventFilter?: ConcernEventFilter): Observable<EventMessage> {\n    return this.store.pipe(\n      selectMessage,\n      filter(event => !!event),\n      filter(event => !eventFilter?.events || eventFilter.events.includes(event.event)),\n      filter(event => !eventFilter?.types || eventFilter.types.includes(event.object?.type as any)),\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConfigGroupAddService",
            "id": "injectable-ConfigGroupAddService-6163991ecb0b5e96a90755db1ba74393",
            "file": "src/app/config-groups/service/config-group-add.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "group",
                            "type": "Partial<ConfigGroup>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "Partial<ConfigGroup>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "model",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormModel",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormModel, IAddService } from '@app/shared/add-component/add-service-model';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '@app/core/api';\nimport { ConfigGroup } from '../model';\nimport { environment } from '@env/environment';\n\nconst newConfigGroupForm = (): FormGroup =>\n  new FormGroup({\n    name: new FormControl('', [Validators.required, Validators.maxLength(30)]),\n    description: new FormControl(),\n  });\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigGroupAddService implements IAddService {\n\n  get Cluster() {\n    return this.service.Cluster;\n  }\n\n  get Current() {\n    return this.service.Current;\n  }\n\n  constructor(private service: ClusterService, protected api: ApiService) {}\n\n  model(name?: string): FormModel {\n    return {\n      name: 'group_config',\n      title: 'Config group',\n      form: newConfigGroupForm()\n    };\n  }\n\n  add<T>(group: Partial<ConfigGroup>): Observable<T> {\n    const params = { ...group };\n    params.object_type = this.service.Current.typeName === 'servicecomponent' ? 'component' : this.service.Current.typeName;\n    params.object_id = this.service.Current.id;\n    return this.api.post<T>(`${environment.apiRoot}group-config/`, params);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "Cluster": {
                    "name": "Cluster",
                    "getSignature": {
                        "name": "Cluster",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                },
                "Current": {
                    "name": "Current",
                    "getSignature": {
                        "name": "Current",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ConfigGroupHostAddService",
            "id": "injectable-ConfigGroupHostAddService-588e650f4bcd0cf38165a01eee86feed",
            "file": "src/app/config-groups/service/config-group-host-add.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListResults",
                    "args": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListResult<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "model",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormModel",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormModel, IAddService } from '@app/shared/add-component/add-service-model';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { TypeName } from '@app/core/types';\nimport { convertToParamMap, Params } from '@angular/router';\nimport { forkJoin, Observable } from 'rxjs';\nimport { ApiService } from '@app/core/api';\nimport { environment } from '@env/environment';\nimport { ConfigGroup } from '@app/config-groups';\nimport { ListResult } from '@app/models/list-result';\n\nconst newConfigGroupHostForm = () =>\n  new FormGroup({\n    name: new FormControl('', Validators.required),\n    description: new FormControl(),\n  });\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigGroupHostAddService implements IAddService {\n\n  get Cluster() {\n    return this.service.Cluster;\n  }\n\n  get Current() {\n    return this.service.Current;\n  }\n\n  constructor(private service: ClusterService, protected api: ApiService) {}\n\n  model(name?: string): FormModel {\n    return {\n      name: 'host2configgroup',\n      title: 'Config group hosts',\n      form: newConfigGroupHostForm()\n    };\n  }\n\n  add(data: { host: number, group: number }[]): Observable<any> {\n    return forkJoin(data.map((o) => this.api.post<unknown>(`${environment.apiRoot}group-config/${o.group}/host/`, { id: o.host })));\n  }\n\n  getListResults<T>(type: TypeName, param: Params = {}): Observable<ListResult<T>> {\n    const paramMap = convertToParamMap(param);\n    const current = this.Current as unknown as ConfigGroup;\n\n    return this.api.getList<T>(current.host_candidate, paramMap);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "Cluster": {
                    "name": "Cluster",
                    "getSignature": {
                        "name": "Cluster",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "Current": {
                    "name": "Current",
                    "getSignature": {
                        "name": "Current",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ConfigGroupHostListService",
            "id": "injectable-ConfigGroupHostListService-01265bf1ce5dda49ff701abdaa93cc95",
            "file": "src/app/config-groups/service/config-group-host-list.service.ts",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListInstance",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "Host",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Host",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListResult<Host>>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "ListInstance",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '@app/core/api';\nimport { ParamMap } from '@angular/router';\nimport { IListService, ListInstance } from '@app/shared/components/list/list-service-token';\nimport { ListResult } from '@app/models/list-result';\nimport { ApiFlat, Host } from '@app/core/types';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { environment } from '@env/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigGroupHostListService implements IListService<Host> {\n\n  current: ListInstance;\n\n  constructor(\n    protected api: ApiService,\n    protected cluster: ClusterService\n  ) {\n  }\n\n\n  getList(p: ParamMap): Observable<ListResult<Host>> {\n    const current = this.cluster.Current as unknown as ApiFlat;\n\n    const listParamStr = localStorage.getItem('list:param');\n    if (p?.keys.length) {\n      const param = p.keys.reduce((a, c) => ({ ...a, [c]: p.get(c) }), {});\n      if (listParamStr) {\n        const json = JSON.parse(listParamStr);\n        json[`group_config_host_${current.object_type}`] = param;\n        localStorage.setItem('list:param', JSON.stringify(json));\n      } else localStorage.setItem('list:param', JSON.stringify({ [`group_config_host_${current.object_type}`]: param }));\n    }\n\n    const configGroupId = this.cluster.Current.id;\n\n    return this.api.getList(`${environment.apiRoot}group-config/${configGroupId}/host/`, p);\n  }\n\n  initInstance(): ListInstance {\n    this.current = { typeName: 'group_config_hosts', columns: ['name', 'remove'] };\n    return this.current;\n  }\n\n  delete(row: Host): Observable<Object> {\n    return this.api.delete(row.url);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConfigGroupListService",
            "id": "injectable-ConfigGroupListService-c4c94ea035d031b77561543aa237c3c8",
            "file": "src/app/config-groups/service/config-group-list.service.ts",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListInstance",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "ConfigGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "ConfigGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ConfigGroup>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListResult<ConfigGroup>>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "ListInstance",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ParamMap } from '@angular/router';\n\nimport { EntityService } from '@app/abstract/entity-service';\nimport { ApiService } from '@app/core/api';\nimport { environment } from '@env/environment';\nimport { ConfigGroup } from '@app/config-groups/model/config-group.model';\nimport { IListService, ListInstance } from '@app/shared/components/list/list-service-token';\nimport { ListResult } from '@app/models/list-result';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { Service } from '@app/core/types';\nimport { ICluster } from '@app/models/cluster';\n\nexport const CONFIG_GROUP_LIST_SERVICE = new InjectionToken<EntityService<ConfigGroup>>('EntityService');\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigGroupListService extends EntityService<ConfigGroup> implements IListService<ConfigGroup> {\n\n  current: ListInstance;\n\n  constructor(\n    protected api: ApiService,\n    private cluster: ClusterService\n  ) {\n    super(api);\n  }\n\n  getList(p: ParamMap): Observable<ListResult<ConfigGroup>> {\n    const current = this.cluster.Current as ICluster | Service;\n\n    const listParamStr = localStorage.getItem('list:param');\n    if (p?.keys.length) {\n      const param = p.keys.reduce((a, c) => ({ ...a, [c]: p.get(c) }), {});\n      if (listParamStr) {\n        const json = JSON.parse(listParamStr);\n        json[`group_config_${current.typeName}`] = param;\n        localStorage.setItem('list:param', JSON.stringify(json));\n      } else localStorage.setItem('list:param', JSON.stringify({ [`group_config_${current.typeName}`]: param }));\n    }\n\n    return this.api.getList(current.group_config, p);\n  }\n\n  initInstance(): ListInstance {\n    this.current = { typeName: 'group_config', columns: ['name', 'description', 'remove'] };\n    return this.current;\n  }\n\n  get(\n    id: number,\n    params: { [key: string]: string } = {},\n  ): Observable<ConfigGroup> {\n    return this.api.get(`${environment.apiRoot}group-config/${id}/`, params);\n  }\n\n  delete(row: ConfigGroup): Observable<Object> {\n    return this.api.delete(row.url);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "ConfigGroupService",
            "id": "injectable-ConfigGroupService-dd1cba81c2063ee3f25be0cdd10f9061",
            "file": "src/app/config-groups/service/config-group.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHistoryList",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CompareConfig[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  IConfigListResponse,\n  IConfigResponse,\n  IConfigService\n} from '@app/shared/configuration/services/config.service';\nimport { ApiService } from '@app/core/api';\nimport { CompareConfig, IConfig } from '@app/shared/configuration/types';\nimport { map, switchMap } from 'rxjs/operators';\nimport { getRandomColor } from '@app/core/types';\nimport { environment } from '@env/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigGroupService implements IConfigService {\n  constructor(private api: ApiService) { }\n\n  changeVersion(id: number): Observable<IConfig> {\n    return this.api.get<IConfig>(`${environment.apiRoot}config-log/${id}`);\n  }\n\n  getConfig(url: string): Observable<IConfig> {\n    return this.api.get<IConfigResponse>(url).pipe(\n      switchMap((config) => this.api.get<IConfig>(config.current))\n    );\n  }\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]> {\n    return this.api.get<IConfigResponse>(url).pipe(\n      switchMap((config) => this.api.get<IConfigListResponse>(config.history)),\n      map((value) => value.results),\n      map((h) => h.filter((a) => a.id !== currentVersionId).map((b) => ({\n        ...b,\n        color: getRandomColor()\n      }))));\n  }\n\n  send(url: string, data: any): Observable<IConfig> {\n    return this.api.get<IConfigResponse>(url).pipe(\n      switchMap((config) => this.api.post<IConfig>(config.history, data)),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-7ae880838369c63d70d654bd977c19c3",
            "file": "src/app/core/services/config.service.ts",
            "properties": [
                {
                    "name": "appConfig$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IVersionInfo>",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [
                {
                    "name": "checkVersion",
                    "args": [
                        {
                            "name": "c",
                            "type": "IVersionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IVersionInfo",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "IVersionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst CONFIG_URL = '/assets/config.json';\nexport interface IVersionInfo {\n  version: string;\n  commit_id: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigService {\n  appConfig$: Observable<IVersionInfo>;\n\n  constructor(private http: HttpClient) {}\n\n  get version() {\n    return localStorage.getItem('adcm:version') || '';\n  }\n\n  set version(version: string) {\n    localStorage.setItem('adcm:version', version);\n  }\n\n  checkVersion(c: IVersionInfo): IVersionInfo {\n    const version = `${c.version}-${c.commit_id}`;\n    if (!this.version) this.version = version;\n    else if (this.version !== version) {\n      this.version = version;\n      return null;\n    }\n    return c;\n  }\n\n  load() {\n    return this.http.get<IVersionInfo>(`${CONFIG_URL}?nocache=${Date.now()}`).pipe(map((c) => this.checkVersion(c)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "version": {
                    "name": "version",
                    "setSignature": {
                        "name": "version",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "version",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "version",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "version",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-22030f6a941975f09576eee3ff38c576-1",
            "file": "src/app/shared/configuration/services/config.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHistoryList",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CompareConfig[]>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CompareConfig, IConfig } from '../types';\nimport { map, switchMap } from 'rxjs/operators';\nimport { getRandomColor } from '@app/core/types';\nimport { ApiService } from '@app/core/api';\n\nexport interface IConfigResponse {\n  current: string;\n  history: string;\n  previous: string;\n}\n\nexport interface IConfigListResponse {\n  count: 1;\n  next: null;\n  previous: null;\n  results: IConfig[];\n}\n\n\nexport interface IConfigService {\n  getConfig(url: string): Observable<IConfig>;\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]>;\n\n  send(url: string, data: any): Observable<IConfig>;\n\n  changeVersion(id: number, url?: string): Observable<IConfig>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService implements IConfigService {\n  constructor(private api: ApiService) { }\n\n  changeVersion(id: number, url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}history/${id}/`);\n  }\n\n  getConfig(url: string): Observable<IConfig> {\n    return this.api.get<IConfig>(`${url}current/`);\n  }\n\n  getHistoryList(url: string, currentVersionId: number): Observable<CompareConfig[]> {\n    return this.api.get<IConfigResponse>(url).pipe(\n      switchMap((config) => this.api.get<IConfigListResponse | IConfig[]>(config.history)),\n      // ToDo remove it when API will be consistent\n      map((value) => Array.isArray(value) ? value as IConfig[] : value.results),\n      map((h) => h.filter((a) => a.id !== currentVersionId).map((b) => ({\n        ...b,\n        color: getRandomColor()\n      }))));\n  }\n\n  send(url: string, data: any): Observable<IConfig> {\n    return this.api.post<IConfig>(`${url}history/`, data);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfigService-1"
        },
        {
            "name": "DomService",
            "id": "injectable-DomService-4c918521cd94dab3a5b9086cadd56624",
            "file": "src/app/core/services/dom.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "appendComponentToBody",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector, Type } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DomService {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private injector: Injector\n  ) {}\n\n  appendComponentToBody<T>(component: Type<T>) {\n    const componentRef = this.componentFactoryResolver.resolveComponentFactory<T>(component).create(this.injector);\n\n    this.appRef.attachView(componentRef.hostView);\n\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n    document.body.appendChild(domElem);\n\n    /** TODO: remove component, need to add variable where keep links to componentRef */\n    // this.appRef.detachView(componentRef.hostView);\n    // componentRef.destroy();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FieldService",
            "id": "injectable-FieldService-d78cb6aa832432b3e07848b2b3bbd66d",
            "file": "src/app/shared/configuration/services/field.service.ts",
            "properties": [
                {
                    "name": "attributesService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeService | undefined",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "fb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "resultTypes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "TNForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "resultTypes",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "resultTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "TNForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillForm",
                    "args": [
                        {
                            "name": "field",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterApply",
                    "args": [
                        {
                            "name": "options",
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "c",
                            "type": "ISearchParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TFormOptions[]",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter by group and all fields\n",
                    "description": "<p>Filter by group and all fields</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "ISearchParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPanels",
                    "args": [
                        {
                            "name": "data",
                            "type": "IConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TFormOptions[]",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse and prepare source data from backend\n",
                    "description": "<p>Parse and prepare source data from backend</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseValue",
                    "args": [
                        {
                            "name": "output",
                            "type": "IOutput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source",
                            "type": "ISource[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IOutput",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput form, cast to source type\n",
                    "description": "<p>Output form, cast to source type</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "output",
                            "type": "IOutput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "ISource[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runByTree",
                    "args": [
                        {
                            "name": "field",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runYspec",
                    "args": [
                        {
                            "name": "value",
                            "type": "resultTypes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rules",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "resultTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rules",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValidator",
                    "args": [
                        {
                            "name": "field",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlToCompare",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExternal use (scheme.service) to set validator for FormControl by type\n",
                    "description": "<p>External use (scheme.service) to set validator for FormControl by type</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7171,
                                "end": 7176,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "field"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7165,
                                "end": 7170,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Partial<FieldOptions>{ ValidatorInfo, controlType }</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7241,
                                "end": 7257,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "controlToCompare"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 7235,
                                "end": 7240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toFormGroup",
                    "args": [
                        {
                            "name": "options",
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate FormGroup\n",
                    "description": "<p>Generate FormGroup</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5695,
                                "end": 5702,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "options"
                            },
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "pos": 5689,
                                "end": 5694,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { isEmptyObject } from '@app/core/types';\n\nimport { ISearchParam } from '../main/main.service';\nimport {\n  controlType,\n  IConfig,\n  IConfigAttr,\n  IFieldOptions,\n  IFieldStack,\n  ILimits,\n  IPanelOptions,\n  IValidator,\n  resultTypes,\n  TNBase,\n  TNForm\n} from '../types';\nimport { AttributeService } from '@app/shared/configuration/attributes/attribute.service';\n\nexport type TFormOptions = IFieldOptions | IPanelOptions;\n\nexport interface IOutput {\n  [key: string]: resultTypes;\n}\n\nexport interface ISource {\n  name: string;\n  subname: string;\n  type: TNForm;\n  read_only: boolean;\n  limits?: ILimits;\n  value: any;\n}\n\nexport interface IToolsEvent {\n  name: string;\n  conditions?: { advanced: boolean; search: string } | boolean;\n}\n\nconst isVisibleField = (a: TFormOptions) => !a.ui_options?.invisible;\nconst isAdvancedField = (a: TFormOptions) => isVisibleField(a) && a.ui_options?.advanced;\nconst isHidden = (a: IFieldStack) => !!(a.ui_options?.invisible || a.ui_options?.advanced);\n\nconst typeToControl: Partial<{ [key in TNForm | controlType]: controlType }> = {\n  bool: 'boolean',\n  int: 'textbox',\n  integer: 'textbox',\n  float: 'textbox',\n  string: 'textbox',\n  file: 'textarea',\n  text: 'textarea',\n};\n\nexport const getControlType = (t: TNForm): controlType => typeToControl[t] || (t as controlType);\n\nconst intPattern = () => new RegExp(/^[-]?\\d+$/);\nconst patternFn = {\n  integer: intPattern,\n  int: intPattern,\n  float: () => new RegExp(/^[-]?[0-9]+(\\.[0-9]+)?$/),\n};\n\nexport const getPattern = (t: TNForm): RegExp => (patternFn[t] ? patternFn[t]() : null);\n\nconst fn = {\n  boolean: (v: boolean | null, d: boolean | null, r: boolean): boolean | null => (String(v) === 'true' || String(v) === 'false' || String(v) === 'null' ? v : r ? d : null),\n  json: (v: string): string => (v === null ? '' : JSON.stringify(v, undefined, 4)),\n  map: (v: object, d: object): object => (!v ? d : v),\n  list: (v: string[], d: string[]): string[] => (!v ? d : v),\n  structure: (v: any): any => v,\n};\n\nexport const getValue = (t: TNForm) => {\n  const def = (value: number | string) => (value === null || value === undefined ? '' : String(value));\n  return fn[t] ? fn[t] : def;\n};\n\nexport const getKey = (name: string, subname: string): string => (subname ? `${subname}/${name}` : name);\n\nexport const getValidator = (required: boolean, min: number, max: number, type: TNForm) => ({\n  required,\n  min,\n  max,\n  pattern: getPattern(type),\n});\n\nconst getField = (item: IFieldStack): IFieldOptions => {\n  return {\n    ...item,\n    key: getKey(item.name, item.subname),\n    value: getValue(item.type)(item.value, item.default, item.required),\n    validator: getValidator(item.required, item.limits?.min, item.limits?.max, item.type),\n    controlType: getControlType(item.type),\n    hidden: item.name === '__main_info' || isHidden(item),\n    compare: []\n  };\n};\n\nconst fo = (n: string) => (b: IFieldStack) => b.type !== 'group' && b.subname && b.name === n;\nconst isActive = (a: IConfigAttr, n: string) => a[n]?.active;\nexport const getOptions = (a: IFieldStack, d: IConfig) =>\n  d.config\n    .filter(fo(a.name))\n    .map((f) => getField(f))\n    // switch off validation for field if !(activatable: true && active: false) - line: 146\n    .map((c) => ({ ...c, name: c.subname, activatable: a.activatable && !isActive(d.attr, a.name) }));\n\nconst getPanel = (a: IFieldStack, d: IConfig): IPanelOptions => ({\n  ...a,\n  hidden: isHidden(a),\n  active: a.activatable ? isActive(d.attr, a.name) : true,\n  options: getOptions(a, d),\n});\n\nconst handleTree = (c: ISearchParam): ((a: TFormOptions) => TFormOptions) => (a: TFormOptions): TFormOptions => {\n  if ('options' in a) {\n    a.options = a.options.map(handleTree(c));\n    if (c.search) a.hidden = a.options.filter((b) => !b.hidden).length === 0;\n    else a.hidden = isAdvancedField(a) ? !c.advanced : false;\n  } else if (isVisibleField(a)) {\n    a.hidden = !(a.display_name.toLowerCase().includes(c.search.toLowerCase()) || String(a.value).toLocaleLowerCase().includes(c.search.toLocaleLowerCase()));\n    if (!a.hidden && isAdvancedField(a)) a.hidden = !c.advanced;\n  }\n  return a;\n};\n\nconst findAttrValue = <T extends object>(obj: T, key: string): boolean => {\n  let value;\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    if (typeof obj[i] === 'object') {\n      value = findAttrValue<Object>(obj[i], key);\n    } else if (i === key) {\n      value = obj[i];\n    }\n  }\n  return value;\n};\n\n@Injectable()\nexport class FieldService {\n  attributesService: AttributeService | undefined;\n\n  constructor(public fb: FormBuilder) {}\n\n  /**\n   * Parse and prepare source data from backend\n   */\n  public getPanels(data: IConfig): TFormOptions[] {\n    return data?.config\n      ?.filter((a) => a.name !== '__main_info')\n      .reduce((p, c) => {\n        if (c.subname) return p;\n        if (c.type !== 'group') return [...p, getField(c)];\n        else return [...p, getPanel(c, data)];\n      }, []);\n  }\n\n  /**\n   * Generate FormGroup\n   * @param options\n   */\n  public toFormGroup(options: TFormOptions[] = []): FormGroup {\n    const check = (a: TFormOptions): boolean =>\n      'options' in a\n        ? a.activatable\n          ? isVisibleField(a) // if group.activatable - only visible\n          : isVisibleField(a) && !a.read_only // else visible an not read_only\n            ? a.options.some((b) => check(b)) // check inner fields\n            : false\n        : isVisibleField(a) && !a.read_only; // for fields in group\n\n    return this.fb.group(\n      options.reduce((p, c) => this.runByTree(c, p), {}),\n      {\n        validator: () => (options.filter(check).length === 0 ? { error: 'Form is empty' } : null),\n      }\n    );\n  }\n\n  // TODO:\n  private runByTree(field: TFormOptions, controls: { [key: string]: {} }): { [key: string]: {} } {\n    if ('options' in field) {\n      controls[field.name] = this.fb.group(\n        field.options.reduce((p, a) => {\n          if ('options' in a) this.fb.group(this.runByTree(a, p));\n          else this.fillForm(a, p);\n          return p;\n        }, {})\n      );\n      return controls;\n    } else {\n      return this.fillForm(field, controls);\n    }\n  }\n\n  private fillForm(field: IFieldOptions, controls: {}) {\n    const name = field.subname || field.name;\n    controls[name] = this.fb.control(field.value, field.activatable ? [] : this.setValidator(field));\n    return controls;\n  }\n\n  /**\n   * External use (scheme.service) to set validator for FormControl by type\n   * @param field Partial<FieldOptions>{ ValidatorInfo, controlType }\n   * @param controlToCompare\n   */\n  public setValidator(field: { validator: IValidator; controlType: controlType }, controlToCompare?: AbstractControl) {\n    const v: ValidatorFn[] = [];\n\n    if (field.validator.required) v.push(Validators.required);\n    if (field.validator.pattern) v.push(Validators.pattern(field.validator.pattern));\n    //if (field.validator.max !== null)\n    v.push(Validators.max(field.validator.max));\n    //if (field.validator.min !== null)\n    v.push(Validators.min(field.validator.min));\n\n    if (field.controlType === 'password') {\n      const passwordConfirm = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (controlToCompare && controlToCompare.value !== control.value) return { notEqual: true };\n        return null;\n      };\n      v.push(passwordConfirm());\n    }\n\n    if (field.controlType === 'json') {\n      const jsonParse = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => {\n        if (control.value) {\n          try {\n            JSON.parse(control.value);\n            return null;\n          } catch (e) {\n            return { jsonParseError: { value: control.value } };\n          }\n        } else return null;\n      };\n\n      v.push(jsonParse());\n    }\n\n    if (field.controlType === 'map') {\n      const parseKey = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null =>\n        control.value && Object.keys(control.value).length && Object.keys(control.value).some((a) => !a) ? { parseKey: true } : null;\n      v.push(parseKey());\n    }\n    return v;\n  }\n\n  /**\n   * Filter by group and all fields\n   */\n  public filterApply(options: TFormOptions[], c: ISearchParam): TFormOptions[] {\n    return options.filter((a) => isVisibleField(a)).map(handleTree(c));\n  }\n\n  /**\n   * Output form, cast to source type\n   */\n  public parseValue(output: IOutput, source: ISource[]): IOutput {\n    const findField = (name: string, p?: string): Partial<IFieldStack> => source.find((a) => (p ? a.name === p && a.subname === name : a.name === name));\n\n    const runYspecParse = (v: any, f: Partial<IFieldOptions>) => ((!v || !Object.keys(v).length) && !f.value ? f.value : this.runYspec(v, f.limits.rules));\n\n    const runParse = (v: IOutput, parentName?: string): IOutput => {\n      const runByValue = (p: IOutput, c: string) => {\n        const checkType = (data: resultTypes | IOutput, field: Partial<IFieldStack>): resultTypes => {\n          const { type } = field;\n          if (type === 'structure') return runYspecParse(data, field);\n          else if (type === 'group') return this.checkValue(runParse(data as IOutput, field.name), type);\n          else return this.checkValue(data, type);\n        };\n\n        const f = findField(c, parentName);\n        if (f) {\n          const result = checkType(v[c], f);\n          return f.type !== 'group' || result ? { ...p, [c]: result } : p;\n        }\n        return p;\n      };\n\n      return Object.keys(v).reduce(runByValue, {});\n    };\n\n    const __main_info = findField('__main_info');\n    return runParse(__main_info?.required ? { ...output, __main_info: __main_info.value } : { ...output });\n  }\n\n  private runYspec(value: resultTypes, rules: any) {\n    switch (rules?.type) {\n      case 'list': {\n        return (value as Array<TNBase>).filter((a) => !!a).map((a) => this.runYspec(a, rules.options));\n      }\n      case 'dict': {\n        return Object.keys(value).reduce((p, c) => {\n          const r = rules.options.find((b: any) => b.name === c);\n          const v = r ? this.runYspec(value[c], r) : null;\n          return v !== null ? { ...p, [c]: v } : { ...p };\n        }, {});\n      }\n      default: {\n        return this.checkValue(value, rules?.type);\n      }\n    }\n  }\n\n  checkValue(value: resultTypes, type: TNForm): resultTypes {\n    if ((value === '' || isEmptyObject(value)) && type === 'map') return {};\n\n    if ((value === '' || isEmptyObject(value)) && type === 'list') return [];\n\n    if (value === '' || value === null || isEmptyObject(value)) return null;\n\n    if (typeof value === 'boolean') return value;\n    else if (typeof value === 'string')\n      switch (type) {\n        case 'option':\n          return !isNaN(+value) ? parseInt(value, 10) : value;\n        case 'integer':\n        case 'int':\n          return parseInt(value, 10);\n        case 'float':\n          return parseFloat(value);\n        case 'json':\n          return JSON.parse(value);\n      }\n    else\n      switch (type) {\n        case 'map':\n          return Object.keys(value)\n            .filter((a) => !!a)\n            .reduce((p, c) => ({ ...p, [c]: value[c] }), {});\n\n        case 'list':\n          return Array.isArray(value) ? (value as Array<string>).filter((a) => !!a) : null;\n      }\n\n    return value;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 155,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FullyRenderedService",
            "id": "injectable-FullyRenderedService-ca65161cb3b7e03bec7a3ee145dfd56f",
            "file": "src/app/core/services/fully-rendered.service.ts",
            "properties": [
                {
                    "name": "navStart$",
                    "defaultValue": "this.router.events\n    .pipe(\n      filter((event) => event instanceof NavigationStart),\n      startWith(null as string), // Start with something, because the app doesn't fire this on appload, only on subsequent route changes\n      tap((event) => {\n        /* Place code to track NavigationStart here */\n      })\n    )\n    .subscribe()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "stableView",
                    "args": [
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1323,
                                "end": 1331,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "callback"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 1304,
                                "end": 1309,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1310,
                                "end": 1322,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 1311,
                                    "end": 1321,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 175,
                                    "parameters": [],
                                    "type": {
                                        "pos": 1316,
                                        "end": 1321,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 113
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { interval } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, take, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FullyRenderedService {\n  navStart$ = this.router.events\n    .pipe(\n      filter((event) => event instanceof NavigationStart),\n      startWith(null as string), // Start with something, because the app doesn't fire this on appload, only on subsequent route changes\n      tap((event) => {\n        /* Place code to track NavigationStart here */\n      })\n    )\n    .subscribe();\n\n  constructor(private router: Router, private zone: NgZone) {}\n\n  /**\n   *\n   *\n   * @param {() => void} callback\n   * @memberof FullyRenderedService\n   */\n  stableView(callback: () => void) {\n    this.zone.runOutsideAngular(() => {\n      interval(10)\n        .pipe(\n          startWith(0),\n          // To prevent a memory leak on two closely times route changes, take until the next nav start\n          //takeUntil(this.navigationStart$),\n          // Turn the interval number into the current state of the zone\n          map(() => !this.zone.hasPendingMacrotasks),\n          // Don't emit until the zone state actually flips from `false` to `true`\n          distinctUntilChanged(),\n          // Filter out unstable event. Only emit once the state is stable again\n          filter((stateStable) => stateStable === true),\n          // Complete the observable after it emits the first result\n          take(1),\n          tap((stateStable) => {\n            callback();\n          })\n        )\n        .subscribe();\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HostService",
            "id": "injectable-HostService-d46c66649d2436b6a7fe0d0d3b3eb137",
            "file": "src/app/services/host.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addToCluster",
                    "args": [
                        {
                            "name": "hostId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clusterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Host>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hostId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clusterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "entityStatusTreeToStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "HostStatusTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTree[]",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "HostStatusTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IHost>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                },
                {
                    "name": "getStatusTree",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HostStatusTree>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EntityService } from '../abstract/entity-service';\nimport { IHost } from '../models/host';\nimport { Host } from '../core/types';\nimport { environment } from '@env/environment';\nimport { ApiService } from '@app/core/api';\nimport { HostStatusTree, StatusTree } from '@app/models/status-tree';\nimport { HavingStatusTreeAbstractService } from '@app/abstract/having-status-tree.abstract.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HostService extends EntityService<IHost> implements HavingStatusTreeAbstractService<HostStatusTree, IHost> {\n\n  constructor(\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(\n    id: number,\n    params: { [key: string]: string } = {},\n  ): Observable<IHost> {\n    return this.api.get(`${environment.apiRoot}host/${id}/`, params);\n  }\n\n  addToCluster(hostId: number, clusterId: number): Observable<Host> {\n    return this.api.post<Host>(`${environment.apiRoot}cluster/${clusterId}/host/`, { host_id: hostId });\n  }\n\n  getStatusTree(id: number): Observable<HostStatusTree> {\n    return this.api.get(`${environment.apiRoot}host/${id}/status/`);\n  }\n\n  entityStatusTreeToStatusTree(input: HostStatusTree): StatusTree[] {\n    return [{\n      subject: {\n        id: input.id,\n        status: input.status,\n        name: input.name,\n      },\n      children: input.hc.map((hc) => ({\n        subject: {\n          id: hc.id,\n          status: hc.status,\n          name: hc.name,\n        },\n        children: [],\n      })),\n    }];\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "IssueEffect",
            "id": "injectable-IssueEffect-a6605e20804c67a3c80aae8f5f6181fc",
            "file": "src/app/core/store/issue.ts",
            "properties": [
                {
                    "name": "load$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadIssue),\n      withLatestFrom(this.store, (action, state) => state.issue.url),\n      filter(url => !!url),\n      exhaustMap(url => this.api.get<BaseEntity>(url).pipe(map(o => fillIssue({ value: o.issue, url: o.url }))))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action, createAction, createFeatureSelector, createReducer, createSelector, on, props, Store } from '@ngrx/store';\nimport { exhaustMap, filter, map, withLatestFrom } from 'rxjs/operators';\n\nimport { ApiService } from '../api';\nimport { State } from '../store';\nimport { BaseEntity } from '../types';\nimport { IIssues } from '@app/models/issue';\n\nexport interface IssueState {\n  value: IIssues;\n  url: string;\n}\n\nconst InitState = {\n  value: null,\n  url: '',\n};\n\nexport const loadIssue = createAction('[Issue] LoadIssue');\nexport const fillIssue = createAction('[Issue] FillIssue', props<{ value: IIssues; url: string }>());\n\nconst reducer = createReducer(InitState, on(loadIssue, state => ({ ...state })), on(fillIssue, (state, { value, url }) => ({ value, url })));\n\nexport function issueReducer(state: IssueState, action: Action) {\n  return reducer(state, action);\n}\n\n@Injectable()\nexport class IssueEffect {\n  load$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadIssue),\n      withLatestFrom(this.store, (action, state) => state.issue.url),\n      filter(url => !!url),\n      exhaustMap(url => this.api.get<BaseEntity>(url).pipe(map(o => fillIssue({ value: o.issue, url: o.url }))))\n    )\n  );\n\n  constructor(private actions$: Actions, private api: ApiService, private store: Store<State>) {}\n}\n\nexport const getIssueSelector = createFeatureSelector<IssueState>('issue');\n\nexport const checkIssue = createSelector(\n  getIssueSelector,\n  state => state\n);\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "JobService",
            "id": "injectable-JobService-fb5cf4b4669cbd3b3a0034f5446a4b7c",
            "file": "src/app/services/job.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "eventFilter",
                            "type": "EventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EventMessage>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventFilter",
                            "type": "EventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Job>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { EventableService, EventFilter } from '@app/models/eventable-service';\nimport { EventMessage, selectMessage, SocketState } from '@app/core/store';\nimport { EntityService } from '@app/abstract/entity-service';\nimport { Job } from '@app/core/types';\nimport { ApiService } from '@app/core/api';\nimport { environment } from '@env/environment';\n\n@Injectable()\nexport class JobService extends EntityService<Job> implements EventableService {\n\n  constructor(\n    private store: Store<SocketState>,\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(id: number, params: { [key: string]: string } = {}): Observable<Job> {\n    return this.api.get(`${environment.apiRoot}job/${id}/`, params);\n  }\n\n  events(eventFilter?: EventFilter): Observable<EventMessage> {\n    return this.store.pipe(\n      selectMessage,\n      filter(event => event?.object?.type === 'job'),\n      filter(event => !eventFilter?.events || eventFilter.events.includes(event?.event)),\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "ListService",
            "id": "injectable-ListService-cacb1e16b90fc26c0f8b1c0f88811ebe",
            "file": "src/app/shared/components/list/list.service.ts",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListInstance",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methods": [
                {
                    "name": "acceptLicense",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActions",
                    "args": [
                        {
                            "name": "row",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClustersForHost",
                    "args": [
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type[]>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCrumbs",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLicenseInfo",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListResult<Entities>>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initInstance",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ListInstance",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { convertToParamMap, ParamMap, Params } from '@angular/router';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@env/environment';\nimport { ApiService } from '@app/core/api';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { BaseEntity, Bundle, Entities, IAction, Service, TypeName } from '@app/core/types';\nimport { IListService, ListInstance } from '@app/shared/components/list/list-service-token';\nimport { ListResult } from '@app/models/list-result';\nimport { ICluster } from '@app/models/cluster';\n\nconst COLUMNS_SET = {\n  cluster: ['name', 'prototype_version', 'description', 'state', 'status', 'actions', 'import', 'upgrade', 'config', 'controls'],\n  host2cluster: ['fqdn', 'provider_name', 'state', 'status', 'actions', 'config', 'remove'],\n  service2cluster: ['display_name', 'version_no_sort', 'state', 'status', 'actions', 'import', 'config'],\n  host: ['fqdn', 'provider_name', 'host2cluster', 'state', 'status', 'actions', 'config', 'controls'],\n  provider: ['name', 'prototype_version', 'state', 'actions', 'upgrade', 'config', 'controls'],\n  job: ['action', 'objects', 'start_date', 'finish_date', 'status'],\n  task: ['id', 'start_date', 'finish_date', 'status'],\n  bundle: ['name', 'version', 'edition', 'description', 'controls'],\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ListService implements IListService<Entities> {\n  current: ListInstance;\n\n  constructor(private api: ApiService, private detail: ClusterService) {}\n\n  initInstance(typeName: TypeName): ListInstance {\n    this.current = { typeName, columns: COLUMNS_SET[typeName] };\n    return this.current;\n  }\n\n  getList(p: ParamMap, typeName: string): Observable<ListResult<Entities>> {\n    const listParamStr = localStorage.getItem('list:param');\n    if (p?.keys.length) {\n      const param = p.keys.reduce((a, c) => ({ ...a, [c]: p.get(c) }), {});\n      if (listParamStr) {\n        const json = JSON.parse(listParamStr);\n        json[typeName] = param;\n        localStorage.setItem('list:param', JSON.stringify(json));\n      } else localStorage.setItem('list:param', JSON.stringify({ [typeName]: param }));\n    }\n\n    switch (typeName) {\n      case 'host2cluster':\n        return this.detail.getHosts(p);\n      case 'service2cluster':\n        return this.detail.getServices(p);\n      case 'bundle':\n        return this.api.getList<Bundle>(`${environment.apiRoot}stack/bundle/`, p);\n      case 'servicecomponent':\n        return this.api.getList(`${environment.apiRoot}cluster/${(this.detail.Current as Service).cluster_id}/service/${this.detail.Current.id}/component`, p);\n      default:\n        return this.api.root.pipe(switchMap((root) => this.api.getList<Entities>(root[this.current.typeName], p)));\n    }\n  }\n\n  getCrumbs() {\n    return [{ path: '/cluster', name: 'clusters' }];\n  }\n\n  getActions(row: Entities) {\n    this.api\n      .get<IAction[]>(row.action)\n      .pipe(tap((actions) => (row.actions = actions)))\n      .subscribe();\n  }\n\n  delete(row: Entities) {\n    return this.api.delete(row.url);\n  }\n\n  // host\n  getClustersForHost(param: Params): Observable<{ id: number; title: string }[]> {\n    return this.api.root\n      .pipe(switchMap((root) => this.api.getList<ICluster>(root.cluster, convertToParamMap(param))))\n      .pipe(map((res) => res.results.map((a) => ({ id: a.id, title: a.name }))));\n  }\n\n  checkItem<T>(item: BaseEntity) {\n    return this.api.get<T>(item.url);\n  }\n\n  acceptLicense(url: string) {\n    return this.api.put(url, {});\n  }\n\n  getLicenseInfo(url: string) {\n    return this.api.get<{ text: string }>(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "detail",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "detail",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MainService",
            "id": "injectable-MainService-bfe1187b2f621020ae1b5f2e70d5b6f1",
            "file": "src/app/shared/configuration/main/main.service.ts",
            "properties": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClusterService",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "configService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfigService",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methods": [
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkField",
                    "args": [
                        {
                            "name": "a",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configs",
                            "type": "CompareConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configs",
                            "type": "CompareConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareConfig",
                    "args": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataOptions",
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "compareConfig",
                            "type": "CompareConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataOptions",
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "compareConfig",
                            "type": "CompareConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterApply",
                    "args": [
                        {
                            "name": "options",
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "search",
                            "type": "ISearchParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "TFormOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "ISearchParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findFieldiCompare",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cc",
                            "type": "CompareConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: any; date: any; color: any; value: any; }",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cc",
                            "type": "CompareConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHistoryList",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseValue",
                    "args": [
                        {
                            "name": "output",
                            "type": "IOutput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source",
                            "type": "IFieldStack[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "output",
                            "type": "IOutput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "IFieldStack[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runCheck",
                    "args": [
                        {
                            "name": "a",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configs",
                            "type": "CompareConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configs",
                            "type": "CompareConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runClear",
                    "args": [
                        {
                            "name": "a",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { isObject, TypeName } from '@app/core/types';\nimport { FieldService, IOutput, TFormOptions } from '../services/field.service';\nimport { CompareConfig, IFieldOptions, IFieldStack } from '../types';\nimport { ConfigService, IConfigService } from '@app/shared/configuration/services/config.service';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ConfigGroupService } from '@app/config-groups/service/config-group.service';\n\n/**\n *```\n advanced: boolean;\n search: string;\n ```\n */\nexport interface ISearchParam {\n  advanced: boolean;\n  search: string;\n}\n\nexport const historyAnime = [\n  trigger('history', [\n    state('hide', style({ top: '70px' })),\n    state('show', style({ top: '134px' })),\n    state('hideTools', style({ opacity: 0 })),\n    state('showTools', style({ opacity: 0.8 })),\n    transition('hideTools => showTools', animate('.5s .3s ease-in')),\n    transition('showTools => hideTools', animate('.2s ease-out')),\n    transition('hide <=> show', animate('.3s')),\n  ]),\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MainService {\n  configService: IConfigService;\n\n  constructor(private fields: FieldService,\n              public cluster: ClusterService,\n              injector: Injector) {\n    const current: TypeName | undefined = cluster.Current?.typeName;\n    if (current === 'group_config') {\n      this.configService = injector.get(ConfigGroupService);\n    } else {\n      this.configService = injector.get(ConfigService);\n    }\n  }\n\n  get worker$() {\n    return this.cluster.worker$;\n  }\n\n  get Current() {\n    return this.cluster.Current;\n  }\n\n  getConfig(url: string) {\n    return this.configService.getConfig(url);\n  }\n\n  changeVersion(url: string, id: number) {\n    return this.configService.changeVersion(id, url);\n  }\n\n  filterApply(options: TFormOptions[], search: ISearchParam) {\n    this.fields.filterApply(options, search);\n  }\n\n  parseValue(output: IOutput, source: IFieldStack[]) {\n    return this.fields.parseValue(output, source);\n  }\n\n  send(url: string, data: any) {\n    return this.configService.send(url, data);\n  }\n\n  getHistoryList(url: string, currentVersionId: number) {\n    return this.configService.getHistoryList(url, currentVersionId);\n  }\n\n  compareConfig(ids: number[], dataOptions: TFormOptions[], compareConfig: CompareConfig[]) {\n    dataOptions.map((a) => this.runClear(a, ids));\n    const cc = ids.map((id) => compareConfig.find((a) => a.id === id));\n    dataOptions.map((a) => this.runCheck(a, cc));\n  }\n\n  runClear(a: TFormOptions, ids: number[]) {\n    if ('options' in a) a.options.map((b) => this.runClear(b, ids));\n    else if (a.compare.length) a.compare = a.compare.filter((b) => ids.includes(b.id));\n    return a;\n  }\n\n  runCheck(a: TFormOptions, configs: CompareConfig[]) {\n    if ('options' in a) a.options.map((b) => this.runCheck(b, configs));\n    else this.checkField(a, configs);\n    return a;\n  }\n\n  checkField(a: IFieldOptions, configs: CompareConfig[]) {\n    configs\n      .filter((b) => a.compare.every((e) => e.id !== b.id))\n      .map((c) => {\n        const co = this.findFieldiCompare(a.key, c);\n        if (!co) {\n          if (String(a.value) && String(a.value) !== 'null') a.compare.push({\n            id: c.id,\n            date: c.date,\n            color: c.color,\n            value: 'null'\n          });\n        } else {\n          if (isObject(co.value)) {\n            if (isObject(a.value)) {\n              if (JSON.stringify(a.value) !== JSON.stringify(co.value)) a.compare.push({\n                ...co,\n                value: JSON.stringify(co.value)\n              });\n            } else if (typeof a.value === 'string') {\n              if (JSON.stringify(JSON.parse(a.value)) !== JSON.stringify(co.value)) a.compare.push({\n                ...co,\n                value: JSON.stringify(co.value)\n              });\n            }\n          } else if (String(co.value) !== String(a.value)) a.compare.push(co);\n        }\n      });\n    return a;\n  }\n\n  findFieldiCompare(key: string, cc: CompareConfig) {\n    const value = key\n      .split('/')\n      .reverse()\n      .reduce((p, c) => p[c], cc.config);\n    if (value !== null && value !== undefined && String(value)) {\n      const { id, date, color } = { ...cc };\n      return { id, date, color, value };\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fields",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "fields",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "worker$": {
                    "name": "worker$",
                    "getSignature": {
                        "name": "worker$",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "Current": {
                    "name": "Current",
                    "getSignature": {
                        "name": "Current",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "MasterService",
            "id": "injectable-MasterService-4cd1f32b2d3db5ce944b66105c7f592e",
            "file": "src/app/shared/components/actions/master/master.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "parseData",
                    "args": [
                        {
                            "name": "v",
                            "type": "IValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMasterData",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "IValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "spotShow",
                    "args": [
                        {
                            "name": "action",
                            "type": "IAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "whatShow",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApiService } from '@app/core/api';\nimport { IAction } from '@app/core/types';\nimport { FieldService } from '@app/shared/configuration/services/field.service';\nimport { ConfigFieldsComponent } from '@app/shared/configuration/fields/fields.component';\nimport { ServiceHostComponent } from '@app/shared/host-components-map/services2hosts/service-host.component';\nimport { Post } from '@app/shared/host-components-map/types';\nimport { IConfigAttr } from '@app/shared/configuration/types';\nimport { IOutput } from '@app/shared/configuration/services/field.service';\n\nexport interface IValue {\n  config?: ConfigFieldsComponent;\n  hostmap?: ServiceHostComponent;\n}\n\nexport enum whatShow {\n  none = 'none',\n  config = 'config',\n  hostMap = 'hostmap',\n  stepper = 'stepper',\n}\n\nexport interface IMasterData {\n  attr: IConfigAttr;\n  config: IOutput;\n  hc: Post[];\n  verbose?: boolean;\n}\n\n@Injectable()\nexport class MasterService {\n  constructor(private api: ApiService, private configService: FieldService) {}\n\n  spotShow(action: IAction): whatShow {\n    const config = action.config?.config?.length;\n    const hm = action.hostcomponentmap?.length;\n    return config ? (hm ? whatShow.stepper : whatShow.config) : hm ? whatShow.hostMap : whatShow.none;\n  }\n\n  parseData(v: IValue): IMasterData {\n    const getData = (attr: IConfigAttr, c: ConfigFieldsComponent, h: ServiceHostComponent) => {\n      const config = c ? this.configService.parseValue(c.form.value, c.rawConfig.config) : undefined;\n      const hc = h?.statePost.data;\n      return { attr, config, hc };\n    };\n    return v ? getData(v.config?.attr, v.config, v.hostmap) : undefined;\n  }\n\n  send(url: string, value: { config: any; hc: Post[] }) {\n    return this.api.post(url, value);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NavigationEffects",
            "id": "injectable-NavigationEffects-add285eeee99d0c1741f5de7e8bcc764",
            "file": "src/app/store/navigation/navigation-effects.ts",
            "properties": [
                {
                    "name": "changePathOfEvent$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(socketResponse),\n    filter(action =>\n      [ConcernEventType.Service, ConcernEventType.Cluster, ConcernEventType.Host, ConcernEventType.HostProvider, ConcernEventType.ServiceComponent].includes(action.message.object.type as any)\n    ),\n    concatMap((event: { message: EventMessage }) => {\n      return new Observable<Action>(subscriber => {\n        this.store.select(getNavigationPath).pipe(take(1)).subscribe((path) => {\n          if (path.some(item => item.typeName === getEventEntityType(event.message.object.type) && event.message.object.id === item.id)) {\n            this.entityGetter(getEventEntityType(event.message.object.type), event.message.object.id)\n              .subscribe((entity) => {\n                subscriber.next(setPath({\n                  path: path.reduce((acc, item) =>\n                    acc.concat(getEventEntityType(event.message.object.type) === item.typeName && item.id === event.message.object.id ? entity : item), []),\n                }));\n                subscriber.complete();\n              }, () => subscriber.complete());\n          } else {\n            subscriber.complete();\n          }\n        }, () => subscriber.complete());\n      });\n    }),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "setPathOfRoute$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(setPathOfRoute),\n        filter(action => !!action.params),\n        switchMap(action => {\n          const getters: Observable<AdcmTypedEntity>[] = action.params.keys.reduce((acc, param) => {\n            const getter = this.entityGetter(param as TypeName, +action.params.get(param));\n            if (getter) {\n              acc.push(getter);\n            }\n\n            return acc;\n          }, []);\n          return getPath(getters);\n        }),\n      ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [
                {
                    "name": "entityGetter",
                    "args": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AdcmTypedEntity>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { concatMap, filter, map, switchMap, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { AdcmEntity, AdcmTypedEntity } from '@app/models/entity';\nimport { TypeName } from '@app/core/types';\nimport { Action, Store } from '@ngrx/store';\n\nimport { ApiService } from '@app/core/api';\nimport { ServiceComponentService } from '@app/services/service-component.service';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { EntityNames } from '@app/models/entity-names';\nimport {\n  getEventEntityType,\n  getNavigationPath,\n  getPath,\n  setPath,\n  setPathOfRoute\n} from '@app/store/navigation/navigation.store';\nimport { EventMessage, socketResponse } from '@app/core/store/sockets/socket.reducer';\nimport { IClusterService } from '@app/models/cluster-service';\nimport { ConfigGroupListService } from '@app/config-groups/service/config-group-list.service';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Injectable()\nexport class NavigationEffects {\n\n  setPathOfRoute$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(setPathOfRoute),\n        filter(action => !!action.params),\n        switchMap(action => {\n          const getters: Observable<AdcmTypedEntity>[] = action.params.keys.reduce((acc, param) => {\n            const getter = this.entityGetter(param as TypeName, +action.params.get(param));\n            if (getter) {\n              acc.push(getter);\n            }\n\n            return acc;\n          }, []);\n          return getPath(getters);\n        }),\n      ),\n  );\n\n  changePathOfEvent$ = createEffect(() => this.actions$.pipe(\n    ofType(socketResponse),\n    filter(action =>\n      [ConcernEventType.Service, ConcernEventType.Cluster, ConcernEventType.Host, ConcernEventType.HostProvider, ConcernEventType.ServiceComponent].includes(action.message.object.type as any)\n    ),\n    concatMap((event: { message: EventMessage }) => {\n      return new Observable<Action>(subscriber => {\n        this.store.select(getNavigationPath).pipe(take(1)).subscribe((path) => {\n          if (path.some(item => item.typeName === getEventEntityType(event.message.object.type) && event.message.object.id === item.id)) {\n            this.entityGetter(getEventEntityType(event.message.object.type), event.message.object.id)\n              .subscribe((entity) => {\n                subscriber.next(setPath({\n                  path: path.reduce((acc, item) =>\n                    acc.concat(getEventEntityType(event.message.object.type) === item.typeName && item.id === event.message.object.id ? entity : item), []),\n                }));\n                subscriber.complete();\n              }, () => subscriber.complete());\n          } else {\n            subscriber.complete();\n          }\n        }, () => subscriber.complete());\n      });\n    }),\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private api: ApiService,\n    private serviceComponentService: ServiceComponentService,\n    private store: Store,\n    private clusterService: ClusterService,\n    private configGroupService: ConfigGroupListService\n  ) {}\n\n  entityGetter(type: TypeName, id: number): Observable<AdcmTypedEntity> {\n    const entityToTypedEntity = (getter: Observable<AdcmEntity>, typeName: TypeName) => getter.pipe(\n      map(entity => ({\n        ...entity,\n        typeName,\n      } as AdcmTypedEntity))\n    );\n\n    if (EntityNames.includes(type)) {\n      if (type === 'bundle') {\n        return entityToTypedEntity(\n          this.clusterService.one_bundle(id),\n          type,\n        );\n      } else if (type === 'servicecomponent' || type === 'component') {\n        return entityToTypedEntity(\n          this.serviceComponentService.get(id),\n          type,\n        );\n      }\n      if (type === 'service') {\n        return entityToTypedEntity(\n          this.api.getOne<any>(type, id),\n          type,\n        ).pipe(switchMap((entity) => {\n          return this.api.getOne<any>('cluster', (entity as any as IClusterService).cluster_id)\n            .pipe(map(cluster => ({ ...entity, cluster })));\n        }));\n      } else if (type === 'group_config') {\n        return entityToTypedEntity(\n          this.configGroupService.get(id),\n          type,\n        );\n      } else {\n        return entityToTypedEntity(\n          this.api.getOne<any>(type, id),\n          type,\n        );\n      }\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "serviceComponentService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clusterService",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configGroupService",
                        "type": "ConfigGroupListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serviceComponentService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clusterService",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configGroupService",
                        "type": "ConfigGroupListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PreloaderService",
            "id": "injectable-PreloaderService-1100441504f027363be0b0f2acc72e5b",
            "file": "src/app/core/services/preloader.service.ts",
            "properties": [
                {
                    "name": "_counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "active$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isFreese",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "end",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "freeze",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "start",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PreloaderService {\n  private _counter = 0;\n  private isFreese = false;\n\n  active$: Subject<boolean> = new Subject<boolean>();\n\n  get counter(): number {\n    return this._counter;\n  }\n\n  start(): void {\n    this._counter++;\n    if (!this.isFreese) this.active$.next(this._counter > 0);\n    this.isFreese = false;\n  }\n\n  end(): void {\n    this._counter--;\n    this.active$.next(this._counter > 0);\n  }\n\n  freeze(): void {\n    this.isFreese = true;\n  }\n}\n",
            "accessors": {
                "counter": {
                    "name": "counter",
                    "getSignature": {
                        "name": "counter",
                        "type": "number",
                        "returnType": "number",
                        "line": 24
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ProfileEffects",
            "id": "injectable-ProfileEffects-23b89f0ddded9ef4d31a5b89bdac5d47",
            "file": "src/app/core/store/profile/index.ts",
            "properties": [
                {
                    "name": "load$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadProfile),\n      exhaustMap(() => this.service.getProfile().pipe(map(user => loadProfileSuccess({ profile: user }))))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "saveSettings$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(settingsSave),\n      map(a => this.service.setUser('settingsSaved', a.isSet)),\n      exhaustMap(() => this.service.setProfile().pipe(map(user => loadProfileSuccess({ profile: user }))))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "saveTextarea$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(setTextareaHeight),\n      exhaustMap(a =>\n        this.service.setTextareaProfile(a).pipe(map(user => loadProfileSuccess({ profile: user })))\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action, createAction, createFeatureSelector, createReducer, createSelector, on, props } from '@ngrx/store';\nimport { exhaustMap, map } from 'rxjs/operators';\n\nimport { IUser, ProfileService } from './profile.service';\n\nexport type ProfileState = IUser;\n\nconst InitState = {\n  username: '',\n  change_password: '',\n  profile: {\n    textarea: {},\n    settingsSaved: false,\n  },\n};\n\nexport const loadProfile = createAction('[Profile] Load');\nexport const clearProfile = createAction('[Profile] ClearProfile');\nexport const loadProfileSuccess = createAction('[Profile] LoadSuccess', props<{ profile: IUser }>());\nexport const setTextareaHeight = createAction('[Profile] SetTextareaHeight', props<{ key: string; value: number }>());\nexport const settingsSave = createAction('[Profile] SettingsSave', props<{ isSet: boolean }>());\n\nconst reducer = createReducer(\n  InitState,\n  on(loadProfileSuccess, (state, { profile }) => ({ ...profile })),\n  on(setTextareaHeight, state => ({ ...state })),\n  on(settingsSave, (state, { isSet }) => ({ ...state, isSet })),\n  on(clearProfile, () => InitState)\n);\n\nexport function profileReducer(state: ProfileState, action: Action) {\n  return reducer(state, action);\n}\n\n@Injectable()\nexport class ProfileEffects {\n  load$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadProfile),\n      exhaustMap(() => this.service.getProfile().pipe(map(user => loadProfileSuccess({ profile: user }))))\n    )\n  );\n\n  saveTextarea$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(setTextareaHeight),\n      exhaustMap(a =>\n        this.service.setTextareaProfile(a).pipe(map(user => loadProfileSuccess({ profile: user })))\n      )\n    )\n  );\n\n  saveSettings$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(settingsSave),\n      map(a => this.service.setUser('settingsSaved', a.isSet)),\n      exhaustMap(() => this.service.setProfile().pipe(map(user => loadProfileSuccess({ profile: user }))))\n    )\n  );\n\n  constructor(private actions$: Actions, private service: ProfileService) {}\n}\n\nexport const getProfileSelector = createFeatureSelector<ProfileState>('profile');\n\nexport const getProfile = createSelector(\n  getProfileSelector,\n  state => state.profile\n);\n\nexport const getFirstAdminLogin = createSelector(\n  getProfileSelector,\n  state => state.username === 'admin' && !state.profile.settingsSaved\n);\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-c3fd6c62e5104c98cb26311a52248a16",
            "file": "src/app/core/store/profile/profile.service.ts",
            "properties": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emptyProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "{ textarea: {}; settingsSaved: boolean; }",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "setLastViewedTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTextareaProfile",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string | boolean | literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string | boolean | literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { Observable, throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { AuthService } from '@app/core/auth/auth.service';\n\nconst PROFILE_LINK = `${environment.apiRoot}profile/`;\n\nexport interface LastViewedTask {\n  id: number;\n}\n\nexport interface IProfile {\n  textarea: { [key: string]: number };\n  settingsSaved: boolean;\n  lastViewedTask?: LastViewedTask;\n}\n\nexport interface IUser {\n  username: string;\n  change_password: string;\n  profile: IProfile;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private user: IUser;\n\n  constructor(private http: HttpClient, private auth: AuthService) {}\n\n  public getProfile(): Observable<IUser> {\n    const source$ = this.http.get<IUser>(`${PROFILE_LINK}${this.auth.auth.login}/`).pipe(\n      map(user => (!user.profile ? { ...user, profile: this.emptyProfile() } : user)),\n      tap(user => (this.user = user))\n    );\n    return this.auth.auth.login ? source$ : throwError('Not authorized!');\n  }\n\n  emptyProfile() {\n    return { textarea: {}, settingsSaved: false };\n  }\n\n  setUser(key: string, value: string | boolean | { [key: string]: number }) {\n    const profile = { ...this.user.profile };\n    profile[key] = value;\n    this.user = { ...this.user, profile };\n  }\n\n  setProfile(): Observable<IUser> {\n    const { username, profile } = { ...this.user };\n    return this.http.patch<IUser>(`${PROFILE_LINK}${this.user.username}/`, { username, profile });\n  }\n\n  setTextareaProfile(data: { key: string; value: number }): Observable<IUser> {\n    const textarea = { ...this.user.profile.textarea };\n    textarea[data.key] = data.value;\n    this.setUser('textarea', textarea);\n    return this.setProfile();\n  }\n\n  setLastViewedTask(id: number): Observable<IUser> {\n    this.setUser('lastViewedTask', { id });\n    return this.setProfile();\n  }\n\n  addUser(user: { username: string; profile: string }): Observable<IUser> {\n    return this.http.post<IUser>(`${PROFILE_LINK}`, user);\n  }\n\n  setPassword(password: string) {\n    return this.http.patch(this.user.change_password, { password });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProviderService",
            "id": "injectable-ProviderService-34845259b186f3eef0ef70c10ef515d3",
            "file": "src/app/services/provider.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Provider>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EntityService } from '../abstract/entity-service';\nimport { Provider } from '../core/types';\nimport { environment } from '../../environments/environment';\nimport { ApiService } from '../core/api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProviderService extends EntityService<Provider> {\n\n  constructor(\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(\n    id: number,\n    params: { [key: string]: string } = {},\n  ): Observable<Provider> {\n    return this.api.get(`${environment.apiRoot}provider/${id}/`, params);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "RequestCacheService",
            "id": "injectable-RequestCacheService-8a514e04e9e3c150b655bc69be645c5e",
            "file": "src/app/core/http-interseptors/request-cache.service.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "new Map<string, RequestCacheEntry>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpResponse | undefined",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "response",
                            "type": "HttpResponse<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "response",
                            "type": "HttpResponse<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse } from '@angular/common/http';\n\nconst maxAge = Number.MAX_VALUE; // maximum cache age (ms)\n\ninterface RequestCacheEntry {\n  url: string;\n  response: HttpResponse<any>;\n  lastRead: number;\n}\n\nexport abstract class RequestCache {\n  abstract get(req: HttpRequest<any>): HttpResponse<any> | undefined;\n  abstract put(req: HttpRequest<any>, response: HttpResponse<any>): void;\n}\n\n@Injectable()\nexport class RequestCacheService implements RequestCache {\n  cache = new Map<string, RequestCacheEntry>();\n\n  constructor() {}\n\n  get(req: HttpRequest<any>): HttpResponse<any> | undefined {\n    const url = req.urlWithParams;\n    const cached = this.cache.get(url);\n\n    if (!cached) return undefined;\n\n    const isExpired = cached.lastRead < Date.now() - maxAge;\n\n    const expired = isExpired ? 'Expired ' : '';\n    // this.messanger.add(new Message(`${expired}cached response for \"${url}\".`));\n\n    return isExpired ? undefined : cached.response;\n  }\n\n  put(req: HttpRequest<any>, response: HttpResponse<any>): void {\n    const url = req.urlWithParams;\n    // this.messanger.add(new Message(`Caching response from \"${url}\".` ));\n\n    const entry = { url, response, lastRead: Date.now() };\n    this.cache.set(url, entry);\n\n    const expired = Date.now() - maxAge;\n\n    this.cache.forEach(c => {\n      if (c.lastRead < expired) this.cache.delete(c.url);\n    });\n\n    // this.messanger.add(new Message(`Request cache size: ${this.cache.size}.`));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "type": "injectable"
        },
        {
            "name": "RouterEffects",
            "id": "injectable-RouterEffects-304a79a3d828dbedba7025d23e3e563e",
            "file": "src/app/core/store/router/router.effects.ts",
            "properties": [
                {
                    "name": "navigate$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(RouterActions.GO),\n    map((action: RouterActions.Go) => action.payload),\n    tap(({ path, query: queryParams, extras }) => this.router.navigate(path, { queryParams, ...extras }))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "navigateBack$",
                    "defaultValue": "this.actions$.pipe(ofType(RouterActions.BACK), tap(() => this.location.back()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "navigateForward$",
                    "defaultValue": "this.actions$.pipe(ofType(RouterActions.FORWARD), tap(() => this.location.forward()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { map, tap } from 'rxjs/operators';\nimport * as RouterActions from './router.actions';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$ = this.actions$.pipe(\n    ofType(RouterActions.GO),\n    map((action: RouterActions.Go) => action.payload),\n    tap(({ path, query: queryParams, extras }) => this.router.navigate(path, { queryParams, ...extras }))\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$ = this.actions$.pipe(ofType(RouterActions.BACK), tap(() => this.location.back()));\n\n  @Effect({ dispatch: false })\n  navigateForward$ = this.actions$.pipe(ofType(RouterActions.FORWARD), tap(() => this.location.forward()));\n\n  constructor(private actions$: Actions, private router: Router, private location: Location) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SchemeService",
            "id": "injectable-SchemeService-19b19308484527efdbe79aeeb38c9a3d",
            "file": "src/app/shared/configuration/scheme/scheme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addControls",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "TValue | IValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentForm",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opt",
                            "type": "IYContainer | IYField | (IYContainer | IYField)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "TNReq",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IControl",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "TValue | IValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentForm",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opt",
                            "type": "IYContainer | IYField | (IYContainer | IYField)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "TNReq",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addControlsDict",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source",
                            "type": "TValue | IValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentForm",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rules",
                            "type": "IYContainer[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IControl",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "TValue | IValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentForm",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rules",
                            "type": "IYContainer[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emptyValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "() => any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentForm",
                    "args": [
                        {
                            "name": "type",
                            "type": "TNForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TNForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { isObject } from '@app/core/types/func';\n\nimport { FieldService } from '../services/field.service';\nimport { IFieldOptions, TNForm, TNReq, TValue } from '../types';\nimport { IYContainer, IYField } from '../yspec/yspec.service';\n\nexport interface IValue {\n  [key: string]: TValue;\n}\n\nexport interface IControl {\n  name: string;\n  type: TNForm;\n  rules: IYField | IYContainer | (IYField | IYContainer)[];\n  form: FormGroup | FormArray;\n  value: IValue | TValue;\n  parent: TNReq;\n}\n\n@Injectable()\nexport class SchemeService {\n  constructor(private service: FieldService) {}\n\n  emptyValidator() {\n    // const isEmptyArray = (v: any) => (Array.isArray(v) && v.length ? v.some((a) => isEmptyValue(a)) : false);\n    // const isEmptyObj = (v: any) => (isObject(v) && Object.keys(v).length ? Object.keys(v).some((a) => isEmptyValue(v[a])) : false);\n    const isEmptyValue = (v: any) => !v || (Array.isArray(v) && !v.length) || (isObject(v) && !Object.keys(v).length);\n    return (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (isEmptyValue(control.value) ? { isEmpty: true } : null);\n  }\n\n  setCurrentForm(type: TNForm, parent: FormGroup, field: IFieldOptions) {\n    const v = field.required ? this.emptyValidator()() : null;\n    const current = type === 'list' || type === 'dict' ? (type === 'list' ? new FormArray([], v) : new FormGroup({}, v)) : new FormControl('', v);\n    parent.setControl(field.name, current);\n    return current;\n  }\n\n  addControlsDict(name: string, source: TValue | IValue, currentForm: FormArray, rules: IYContainer[]): IControl {\n    const value = !source ? rules.reduce((p, c) => ({ ...p, [c.name]: '' }), {}) : source;\n\n    const checkValue = () => {\n      if (Array.isArray(rules)) {\n        if (Array.isArray(value)) {\n          return rules.some((a) => a.name === value[0]);\n        } else if (typeof value === 'object') {\n          return Object.keys(value).every((x) => rules.some((a) => a.name === x));\n        }\n      }\n    };\n\n    if (checkValue()) {\n      const form = new FormGroup({});\n      currentForm.push(form);\n      return { name, value, type: 'dict', rules, form, parent: 'list' };\n    }\n  }\n\n  addControls(name: string, value: TValue | IValue, currentForm: FormGroup | FormArray, opt: IYContainer | IYField | (IYContainer | IYField)[], type: TNReq): IControl {\n    const rules = Array.isArray(opt) ? opt.find((a) => a.name === name) : opt;\n    if (!rules) return;\n    let form = currentForm;\n    if (rules.type !== 'list' && rules.type !== 'dict') {\n      const { validator, controlType } = rules as IYField;\n      if (Array.isArray(currentForm.controls)) {\n        name = currentForm.controls.length.toString();\n        (currentForm as FormArray).push(new FormControl(value || '', this.service.setValidator({ validator, controlType })));\n      } else (currentForm as FormGroup).addControl(rules.name, new FormControl(rules.type !== 'bool' ? value || '' : value, this.service.setValidator({ validator, controlType })));\n    } else {\n      form = rules.type === 'list' ? new FormArray([]) : new FormGroup({});\n      (currentForm as FormGroup).addControl(rules.name, form);\n    }\n\n    return { name, value, type: rules.type, rules, form, parent: type };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServiceComponentService",
            "id": "injectable-ServiceComponentService-372f8ea265a388d8827460f255dd4970",
            "file": "src/app/services/service-component.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "entityStatusTreeToStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "HostComponentStatusTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clusterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTree[]",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "HostComponentStatusTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clusterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IServiceComponent>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                },
                {
                    "name": "getStatusTree",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HostComponentStatusTree>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ApiService } from '@app/core/api';\nimport { IServiceComponent } from '@app/models/service-component';\nimport { EntityService } from '@app/abstract/entity-service';\nimport { environment } from '@env/environment';\nimport { HavingStatusTreeAbstractService } from '@app/abstract/having-status-tree.abstract.service';\nimport { HostComponentStatusTree, StatusTree } from '@app/models/status-tree';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceComponentService extends EntityService<IServiceComponent> implements HavingStatusTreeAbstractService<HostComponentStatusTree, IServiceComponent> {\n\n  constructor(\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(\n    id: number,\n    params: { [key: string]: string } = {},\n  ): Observable<IServiceComponent> {\n    return this.api.get(`${environment.apiRoot}component/${id}`, params);\n  }\n\n  getStatusTree(id: number): Observable<HostComponentStatusTree> {\n    return this.api.get(`${environment.apiRoot}component/${id}/status/`);\n  }\n\n  entityStatusTreeToStatusTree(input: HostComponentStatusTree, clusterId: number): StatusTree[] {\n    return [{\n      subject: {\n        id: input.id,\n        name: input.name,\n        status: input.status,\n      },\n      children: input.hosts.map(host => ({\n        subject: {\n          id: host.id,\n          name: host.name,\n          status: host.status,\n          link: (id) => ['/cluster', clusterId.toString(), 'host', id.toString(), 'status'],\n        },\n        children: [],\n      })),\n    }];\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "ServiceService",
            "id": "injectable-ServiceService-3ae1355d8fa3a8fddd7e8d65fa884fea",
            "file": "src/app/services/service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "entityStatusTreeToStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "ServiceStatusTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clusterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTree[]",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "ServiceStatusTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clusterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Service>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                },
                {
                    "name": "getStatusTree",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ServiceStatusTree>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ApiService } from '@app/core/api';\nimport { EntityService } from '@app/abstract/entity-service';\nimport { environment } from '@env/environment';\nimport { Service } from '@app/core/types';\nimport { HavingStatusTreeAbstractService } from '@app/abstract/having-status-tree.abstract.service';\nimport { ServiceStatusTree, StatusTree } from '@app/models/status-tree';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceService extends EntityService<Service> implements HavingStatusTreeAbstractService<ServiceStatusTree, Service> {\n\n  constructor(\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(\n    id: number,\n    params: { [key: string]: string } = {},\n  ): Observable<Service> {\n    return this.api.get(`${environment.apiRoot}service/${id}/`, params);\n  }\n\n  getStatusTree(id: number): Observable<ServiceStatusTree> {\n    return this.api.get(`${environment.apiRoot}service/${id}/status/`);\n  }\n\n  entityStatusTreeToStatusTree(input: ServiceStatusTree, clusterId: number): StatusTree[] {\n    return [{\n      subject: {\n        id: input.id,\n        name: input.name,\n        status: input.status,\n      },\n      children: input.hc.map(hc => ({\n        subject: {\n          id: hc.id,\n          name: hc.name,\n          status: hc.status,\n        },\n        children: hc.hosts.map(host => ({\n          subject: {\n            id: host.id,\n            name: host.name,\n            status: host.status,\n            link: (id) => ['/cluster', clusterId.toString(), 'host', id.toString(), 'status'],\n          },\n          children: [],\n        })),\n      })),\n    }];\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "SocketEffect",
            "id": "injectable-SocketEffect-37d1cce6522c6f026fb9f5ca47d930ea",
            "file": "src/app/core/store/sockets/socket.effect.ts",
            "properties": [
                {
                    "name": "init$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(socketInit),\n        exhaustMap(() => this.service.init())\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { exhaustMap } from 'rxjs/operators';\n\nimport { socketInit } from './socket.reducer';\nimport { SocketService } from './socket.service';\n\n@Injectable()\nexport class SocketEffect {\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(socketInit),\n        exhaustMap(() => this.service.init())\n      ),\n    { dispatch: false }\n  );\n  \n  constructor(private service: SocketService, private actions$: Actions) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocketListenerDirective",
            "id": "injectable-SocketListenerDirective-fa0c54661488f8a796fa76d8835736e4",
            "file": "src/app/shared/directives/socketListener.directive.ts",
            "properties": [
                {
                    "name": "socket$",
                    "defaultValue": "this.socket.pipe(this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startListenSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { filter, tap } from 'rxjs/operators';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { EventMessage, getMessage, SocketState, clearMessages } from '@app/core/store';\n\n@Directive({\n  selector: '[appBase]',\n})\n@Injectable()\nexport class SocketListenerDirective extends BaseDirective implements OnDestroy {\n  socket$ = this.socket.pipe(this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object));\n\n  constructor(private socket: Store<SocketState>) {\n    super();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.socket.dispatch(clearMessages());\n  }\n\n  startListenSocket(): void {\n    this.socket$.pipe(\n      tap(m => this.socketListener(m))\n    ).subscribe();\n  }\n\n  socketListener(m: EventMessage) {\n    console.warn('No implemented socketListener method', m);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "type": "injectable"
        },
        {
            "name": "SocketService",
            "id": "injectable-SocketService-15d0ac49cf76acd9a282626b5dc0899d",
            "file": "src/app/core/store/sockets/socket.service.ts",
            "properties": [
                {
                    "name": "connectUrl",
                    "defaultValue": "environment.SERVER_URL_EVENT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "socket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebSocket",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "openStatus",
                            "type": "StatusType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'open'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "openStatus",
                            "type": "StatusType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'open'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AuthService } from '@app/core/auth/auth.service';\nimport { environment } from '@env/environment';\nimport { Store } from '@ngrx/store';\nimport { EMPTY, of } from 'rxjs';\n\nimport { socketClose, socketOpen, socketResponse, SocketState, StatusType } from './socket.reducer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SocketService {\n  connectUrl = environment.SERVER_URL_EVENT;\n  socket: WebSocket;\n\n  constructor(private store: Store<SocketState>, private auth: AuthService) {}\n\n  init(openStatus: StatusType = 'open') {\n    if (!this.auth.token) {\n      console.warn('Socket can not connect. Token is failed.');\n      return EMPTY;\n    }\n\n    this.socket = new WebSocket(this.connectUrl, ['adcm', `${this.auth.token}`]);\n\n    this.socket.onopen = () => this.store.dispatch(socketOpen({ status: openStatus }));\n    this.socket.onclose = () => this.store.dispatch(socketClose({ status: 'close' }));\n    this.socket.onmessage = (response: { data: string }) => this.store.dispatch(socketResponse({ message: JSON.parse(response.data) }));\n\n    return of(this.socket);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StackService",
            "id": "injectable-StackService-5876b67a9b79a70b8902021989c10a47",
            "file": "src/app/core/services/stack.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fromStack",
                    "args": [
                        {
                            "name": "name",
                            "type": "StackInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "StackInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "output",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "output",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApiService } from '@app/core/api';\nimport { ApiState, getStack } from '@app/core/store';\nimport { Bundle } from '@app/core/types';\nimport { environment } from '@env/environment';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { ListResult } from '@app/models/list-result';\n\nexport type StackInfo = 'cluster' | 'host' | 'provider' | 'service' | 'bundle';\n\nconst UPLOAD_URL = `${environment.apiRoot}stack/upload/`,\n  LOAD_URL = `${environment.apiRoot}stack/load/`;\n\n@Injectable({ providedIn: 'root' })\nexport class StackService {\n  constructor(private api: ApiService, private store: Store<ApiState>) {}\n\n  fromStack<T>(name: StackInfo, param?: { [key: string]: string | number }): Observable<T[]> {\n    const params = Object.keys(param).reduce<any>((p, c) => ({ ...p, [c]: param[c] }), {});\n    return this.store.pipe(\n      select(getStack),\n      filter((a) => a && !!Object.keys(a).length),\n      switchMap((s) => this.api.get<ListResult<T>>(s[name], params).pipe(map((a) => a.results)))\n    );\n  }\n\n  upload(output: FormData[]) {\n    const item = (form: FormData) => {\n      return this.api.post(UPLOAD_URL, form).pipe(\n        mergeMap(() => this.api.post<Bundle>(LOAD_URL, { bundle_file: (form.get('file') as File).name }))\n      );\n    };\n    return combineLatest(output.map((o) => item(o)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<ApiState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ApiState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatsService",
            "id": "injectable-StatsService-4f4a6bd7d5a030ff0f14e7faff1e5be6",
            "file": "src/app/services/stats.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "tasks",
                    "args": [
                        {
                            "name": "lastTaskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Stats>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lastTaskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@env/environment';\n\nexport interface Stats {\n  failed: number;\n  success: number;\n  running: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatsService {\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  tasks(lastTaskId?: number): Observable<Stats> {\n    return this.http.get<Stats>(`${environment.apiRoot}/stats/task/${lastTaskId || 1}/`);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatusService",
            "id": "injectable-StatusService-f4479ba0b2419eab84b2be3a638f7417",
            "file": "src/app/shared/components/status/status.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllClusterStatus",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClusterById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentsOnly",
                    "args": [
                        {
                            "name": "a",
                            "type": "[IAllStatus, HostComponent[]]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "host_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "[IAllStatus, HostComponent[]]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "host_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHostComponents",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HostComponent[]>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHostcomponentStatus",
                    "args": [
                        {
                            "name": "k",
                            "type": "HostComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "all",
                            "type": "IAllStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "k",
                            "type": "HostComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "all",
                            "type": "IAllStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServiceComponentsByCluster",
                    "args": [
                        {
                            "name": "cluster",
                            "type": "ICluster",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "service_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IComponent[]>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cluster",
                            "type": "ICluster",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "service_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatusInfo",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostcomponent_link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostcomponent_link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ApiService } from '@app/core/api';\nimport { IComponent, Host, HostComponent } from '@app/core/types';\nimport { ICluster } from '@app/models/cluster';\n\ninterface IStatus {\n  [key: number]: { status: number };\n}\n\nexport interface IAllStatus {\n  hosts: IStatus;\n  services: { details: [{ host: string | number; component: string | number; status: number }]; status: number }[];\n  components: IStatus;\n  status: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService {\n  constructor(private api: ApiService) { }\n\n  getStatusInfo(id: number, hostcomponent_link: string) {\n    const statuses$ = this.getAllClusterStatus(id),\n      host_components$ = this.getHostComponents(hostcomponent_link);\n    return combineLatest([statuses$, host_components$]);\n  }\n\n  getHostComponents(url: string): Observable<HostComponent[]> {\n    return this.api\n      .get<{ host: Host[]; hc: HostComponent[]; component: IComponent[] }>(url)\n      .pipe(map((a) => a.hc.map((hc) => ({ ...hc, monitoring: a.component.find((b) => b.id === hc.component_id).monitoring }))));\n  }\n\n  getServiceComponentsByCluster(cluster: ICluster, service_id?: number): Observable<IComponent[]> {\n    return this.api.get<IComponent[]>(cluster.status_url).pipe(map((s) => s.filter((se) => (service_id ? se.service_id === service_id : true))));\n  }\n\n  getHostcomponentStatus(k: HostComponent, all: IAllStatus) {\n    const c = all.services[k.service_id]?.details.find((e) => +e.host === k.host_id && +e.component === k.component_id);\n    return c ? c.status : null;\n  }\n\n  getComponentsOnly(a: [IAllStatus, HostComponent[]], host_id?: number) {\n    const all: IAllStatus = a[0],\n      hc: HostComponent[] = a[1];\n    return hc\n      .filter((h) => (host_id ? host_id === h.host_id : true))\n      .reduce((acc, cur) => (!acc.some((c) => c.host_id === cur.host_id && c.service_id === cur.service_id) ? [...acc, cur] : acc), [])\n      .map((k) => ({ ...k, status: this.getHostcomponentStatus(k, all) }))\n      .filter((b) => b.status !== 0);\n  }\n\n  getClusterById(id: number) {\n    return this.api.getOne<ICluster>('cluster', id);\n  }\n\n  getAllClusterStatus(id: number) {\n    return this.api.get<IAllStatus>(`/status/api/v1/cluster/${id}/`);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TakeService",
            "id": "injectable-TakeService-ad30c16a88a98b3abb08b9a62424a5ed",
            "file": "src/app/shared/host-components-map/take.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearDependencies",
                    "args": [
                        {
                            "name": "comp",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comp",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dialog4Requires",
                    "args": [
                        {
                            "name": "model",
                            "type": "IRequires[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IRequires[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "divorce",
                    "args": [
                        {
                            "name": "both",
                            "type": "[CompTile, HostTile]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "both",
                            "type": "[CompTile, HostTile]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillComponent",
                    "args": [
                        {
                            "name": "pc",
                            "type": "IComponent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ap",
                            "type": "IActionParameter[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pc",
                            "type": "IComponent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ap",
                            "type": "IActionParameter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillHost",
                    "args": [
                        {
                            "name": "hosts",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ap",
                            "type": "IActionParameter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HostTile[]",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMapping backend source hosts to detect `disabled` properties based on action parameters, if present\n",
                    "description": "<p>Mapping backend source hosts to detect <code>disabled</code> properties based on action parameters, if present</p>\n",
                    "jsdoctags": [
                        {
                            "name": "hosts",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ap",
                            "type": "IActionParameter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formFill",
                    "args": [
                        {
                            "name": "components",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hosts",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "components",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hosts",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "load",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "load",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [
                        {
                            "name": "target",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stream",
                            "type": "IStream",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "load",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stream",
                            "type": "IStream",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "load",
                            "type": "StatePost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "cluster_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostcomponent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hc",
                            "type": "Post[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cluster_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostcomponent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hc",
                            "type": "Post[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormValue",
                    "args": [
                        {
                            "name": "c",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRelations",
                    "args": [
                        {
                            "name": "rel",
                            "type": "Post[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ap",
                            "type": "IActionParameter[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rel",
                            "type": "Post[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cs",
                            "type": "CompTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hs",
                            "type": "HostTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ap",
                            "type": "IActionParameter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateConstraints",
                    "args": [
                        {
                            "name": "component",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "() => any",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n```\nhttps://docs.arenadata.io/adcm/sdk/config.html#components\n[1] – exactly once component shoud be installed;\n[0,1] – one or zero component shoud be installed;\n[1,2] – one or two component shoud be installed;\n[0,+] – zero or any more component shoud be installed (default value);\n[1,odd] – one or more component shoud be installed; total amount should be odd\n[0,odd] – zero or more component shoud be installed; if more than zero, total amount should be odd\n[odd] – the same as [1,odd]\n[1,+] – one or any more component shoud be installed;\n[+] – component shoud be installed on all hosts of cluster.\n```\n",
                    "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">https://docs.arenadata.io/adcm/sdk/config.html#components\n[1] – exactly once component shoud be installed;\n[0,1] – one or zero component shoud be installed;\n[1,2] – one or two component shoud be installed;\n[0,+] – zero or any more component shoud be installed (default value);\n[1,odd] – one or more component shoud be installed; total amount should be odd\n[0,odd] – zero or more component shoud be installed; if more than zero, total amount should be odd\n[odd] – the same as [1,odd]\n[1,+] – one or any more component shoud be installed;\n[+] – component shoud be installed on all hosts of cluster.</code></pre></div>",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, ValidationErrors } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ApiService } from '@app/core/api';\nimport { IComponent, IActionParameter, IRequires } from '@app/core/types';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\n\nimport { AddService } from '../add-component/add.service';\nimport { DialogComponent } from '../components';\nimport { DependenciesComponent } from './dependencies.component';\nimport { CompTile, TConstraint, HostTile, IRawHosComponent, IStream, Post, StatePost, Tile } from './types';\n\nexport const getSelected = (from: Tile[]): Tile => from.find((a) => a.isSelected);\n\nconst isShrink = (ap: IActionParameter[]): boolean => ap.every((a) => a.action === 'remove');\n\nconst isExpand = (ap: IActionParameter[]): boolean => ap.every((a) => a.action === 'add');\n\nconst accord = (a: IActionParameter): ((b: CompTile) => boolean) => (b: CompTile): boolean =>\n  b.component === `${a.service}/${a.component}`;\n\nexport const isExist = (rel: CompTile[], ap: IActionParameter[]): boolean =>\n  isShrink(ap) ? ap.some((a) => rel.some(accord(a))) : ap.every((a) => rel.some(accord(a)));\n\nexport const disableHost = (h: HostTile, ap: IActionParameter[]): boolean =>\n  ap ? (isExist(h.relations as CompTile[], ap) ? isExpand(ap) : isShrink(ap)) : false;\n\n//#region user click\n\nconst checkConstraint = (c: TConstraint, r: number): boolean => {\n  if (!c?.length) return true;\n  const v = c[c.length - 1];\n  return v === '+' || v === 'odd' || v > r || v === 'depend';\n};\n\nconst flag = (host_id: number, com: CompTile, load: StatePost): boolean =>\n  load.data.some((a) => a.component_id === com.id && a.service_id === com.service_id && a.host_id === host_id);\n\nconst checkActions = (host_id: number, com: CompTile, action: 'add' | 'remove', load: StatePost): boolean => {\n  if (com.actions?.length) {\n    if (action === 'remove') return flag(host_id, com, load) ? com.actions.some((a) => a === 'remove') : true;\n    if (action === 'add') return flag(host_id, com, load) ? true : com.actions.some((a) => a === 'add');\n  } else return true;\n};\n\nconst findDependencies = (c: CompTile, cs: CompTile[]): CompTile[] => {\n  const r =\n    c.requires?.reduce<{ prototype_id: number }[]>(\n      (p, a) => [...p, ...a.components.map((b) => ({ prototype_id: b.prototype_id }))],\n      []\n    ) || [];\n  return cs.filter((a) => r.some((b) => b.prototype_id === a.prototype_id));\n};\n\nconst checkDependencies = (c: CompTile, cs: CompTile[]): void =>\n  findDependencies(c, cs).forEach((a) => (a.limit = a.limit ? [...a.limit, 'depend'] : ['depend']));\n\nconst checkRequires = (component: CompTile, cs: CompTile[]): IRequires[] =>\n  component.requires.reduce<IRequires[]>(\n    (p, c) => (c.components.every((a) => cs.some((b) => b.prototype_id === a.prototype_id)) ? p : [...p, c]),\n    []\n  );\n\n//#endregion\n@Injectable()\nexport class TakeService {\n  constructor(private api: ApiService, private dialog: MatDialog, private add: AddService) {}\n\n  //#region ----- HttpClient ------\n  load(url: string) {\n    return this.api.get<IRawHosComponent>(url);\n  }\n\n  save(cluster_id: number, hostcomponent: string, hc: Post[]) {\n    const send = { cluster_id, hc };\n    return this.api.post<Post[]>(hostcomponent, send).pipe(take(1));\n  }\n  //#endregion\n\n  //#region after a successful download, run and fill in\n\n  /**\n   * Mapping backend source hosts to detect `disabled` properties based on action parameters, if present\n   */\n  fillHost(hosts: HostTile[], ap?: IActionParameter[]): HostTile[] {\n    return hosts.map((h) => ({ ...h, disabled: disableHost(h, ap) }));\n  }\n\n  fillComponent(pc: IComponent[], ap: IActionParameter[]) {\n    return pc.map(\n      (c) =>\n        new CompTile(\n          c,\n          ap ? ap.filter((a) => a.service === c.service_name && a.component === c.name).map((b) => b.action) : null\n        )\n    );\n  }\n\n  setRelations(rel: Post[], cs: CompTile[], hs: HostTile[], ap: IActionParameter[]) {\n    rel.forEach((p) => {\n      const host = hs.find((h) => h.id === p.host_id),\n        component = cs.find((s) => s.id === p.component_id);\n      if (host && component) {\n        if (ap) {\n          component.relations = [...component.relations, host];\n          const clone_component = { ...component };\n          clone_component.disabled = component.actions.every((k) => k !== 'remove');\n          host.relations = [...host.relations, clone_component];\n        } else {\n          host.relations = [...host.relations, component];\n          component.relations = [...component.relations, host];\n        }\n      }\n    });\n  }\n  //#endregion\n\n  //#region FormGrop and validation for Components\n  formFill(components: CompTile[], hosts: HostTile[], form: FormGroup) {\n    components.map((a) =>\n      form.addControl(\n        `${a.service_id}/${a.id}`,\n        new FormControl(a.relations.length, this.validateConstraints(a, hosts.length))\n      )\n    );\n  }\n\n  /**\n   * ```\n  https://docs.arenadata.io/adcm/sdk/config.html#components\n  [1] – exactly once component shoud be installed;\n  [0,1] – one or zero component shoud be installed;\n  [1,2] – one or two component shoud be installed;\n  [0,+] – zero or any more component shoud be installed (default value);\n  [1,odd] – one or more component shoud be installed; total amount should be odd\n  [0,odd] – zero or more component shoud be installed; if more than zero, total amount should be odd\n  [odd] – the same as [1,odd]\n  [1,+] – one or any more component shoud be installed;\n  [+] – component shoud be installed on all hosts of cluster.\n  ```\n */\n  validateConstraints(component: CompTile, hostLength: number) {\n    const getError = (constraint: TConstraint, relations: HostTile[]) => {\n      if (!constraint?.length) return null;\n      const [a1, a2, a3] = constraint;\n      const countRelations = relations.length;\n      const depend = () =>\n        relations.some((a) => a.relations.some((b) => b.id === component.id))\n          ? null\n          : 'Must be installed because it is a dependency of another component';\n      if (a3 && a3 === 'depend') return depend();\n      else if (a2) {\n        switch (a2) {\n          case 'depend':\n            return depend();\n          case 'odd':\n            return countRelations % 2 && countRelations >= a1\n              ? null\n              : a1 === 0\n              ? 'Total amount should be odd.'\n              : `Must be installed at least ${a1} components. Total amount should be odd.`;\n          case '+':\n          default:\n            return countRelations < a1 ? `Must be installed at least ${a1} components.` : null;\n        }\n      } else {\n        switch (a1) {\n          case 0:\n            return null;\n          case 'depend':\n            return depend();\n          case '+':\n            return countRelations < hostLength ? 'Component should be installed on all hosts of cluster.' : null;\n          case 'odd':\n            return countRelations % 2 ? null : 'One or more component should be installed. Total amount should be odd.';\n          default:\n            return countRelations !== a1 ? `Exactly ${a1} component should be installed` : null;\n        }\n      }\n    };\n    return (): ValidationErrors => {\n      const { limit, relations } = component;\n      if (limit) {\n        const error = getError(limit, relations);\n        return error ? { error } : null;\n      }\n      return null;\n    };\n  }\n\n  setFormValue(c: CompTile, form: FormGroup) {\n    form.controls[`${c.service_id}/${c.id}`].setValue(c.relations);\n  }\n\n  //#endregion\n\n  //#region Removing links and dependencies\n\n  clearDependencies(comp: CompTile, state: StatePost, cs: CompTile[], hs: HostTile[], form: FormGroup) {\n    const getLimitsFromState = (prototype_id: number) => cs.find((b) => b.prototype_id === prototype_id).limit;\n    if (comp.requires?.length) {\n      findDependencies(comp, cs).forEach((a) => {\n        a.limit = getLimitsFromState(a.prototype_id);\n        a.notification = '';\n      });\n\n      state.data.map((a) =>\n        checkDependencies(\n          cs.find((b) => b.id === a.component_id),\n          cs\n        )\n      );\n\n      form.reset();\n      this.formFill(cs, hs, form);\n    }\n  }\n\n  //#endregion\n\n  //#region handler user events\n  divorce(both: [CompTile, HostTile], cs: CompTile[], hs: HostTile[], state: StatePost, form: FormGroup) {\n    const [component, host] = both;\n\n    component.isLink = false;\n    component.relations = component.relations.filter((r) => r.id !== host.id);\n    host.isLink = false;\n    host.relations = host.relations.filter((r) => r.id !== component.id);\n\n    state.delete(new Post(host.id, component.service_id, component.id));\n    this.clearDependencies(component, state, cs, hs, form);\n    this.setFormValue(component, form);\n  }\n\n  next(\n    target: Tile,\n    stream: IStream,\n    cs: CompTile[],\n    hs: HostTile[],\n    state: StatePost,\n    load: StatePost,\n    form: FormGroup\n  ) {\n    stream.linkSource.forEach((s) => (s.isLink = false));\n    if (stream.selected) stream.selected.isSelected = false;\n\n    if (stream.link) this.handleLink(stream.link, target, state, cs, hs, load, form);\n    else if (stream.selected !== target) {\n      target.isSelected = true;\n      target.relations.forEach(\n        (e) => (stream.linkSource.find((s) => s.name === e.name && s.id === e.id).isLink = true)\n      );\n    }\n  }\n\n  handleLink(\n    link: Tile,\n    target: Tile,\n    state: StatePost,\n    cs: CompTile[],\n    hs: HostTile[],\n    load: StatePost,\n    form: FormGroup\n  ) {\n    const isComp = target instanceof CompTile;\n    const component = (isComp ? target : link) as CompTile;\n    const host = isComp ? link : target;\n\n    if (link.relations.find((e) => e.id === target.id)) {\n      if (checkActions(host.id, component, 'remove', load)) this.divorce([component, host], cs, hs, state, form);\n      return;\n    } else if (checkConstraint(component.limit, component.relations.length)) {\n      if (!checkActions(host.id, component, 'add', load)) return;\n      if (component.requires?.length) {\n        const requires = checkRequires(component, cs);\n        if (requires.length) {\n          this.dialog4Requires(requires);\n          return;\n        } else {\n          checkDependencies(component, cs);\n          form.reset();\n          this.formFill(cs, hs, form);\n        }\n      }\n      link.relations.push(target);\n      target.relations.push(link);\n      target.isLink = true;\n      state.add(new Post(host.id, component.service_id, component.id));\n    }\n    this.setFormValue(component, form);\n  }\n\n  dialog4Requires(model: IRequires[]) {\n    this.dialog\n      .open(DialogComponent, {\n        data: {\n          title: 'This component cannot be installed without the following dependencies.',\n          component: DependenciesComponent,\n          model,\n          controls: ['Install All', 'It is clear'],\n        },\n      })\n      .beforeClosed()\n      .pipe(\n        filter((a) => a),\n        map((_) => model.map((a) => ({ prototype_id: a.prototype_id }))),\n        switchMap((result) => this.add.addService(result))\n      )\n      .subscribe();\n  }\n  //#endregion\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "add",
                        "type": "AddService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "add",
                        "type": "AddService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-b0c22a173b4aa743a242886bef8a0b1b",
            "file": "src/app/services/task.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "eventFilter",
                            "type": "EventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EventMessage>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventFilter",
                            "type": "EventFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                },
                {
                    "name": "list",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IListResult<Task>>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { IListResult } from '@adwp-ui/widgets';\n\nimport { EventMessage, selectMessage, SocketState } from '@app/core/store';\nimport { EventableService, EventFilter } from '@app/models/eventable-service';\nimport { Task } from '@app/core/types';\nimport { ApiService } from '@app/core/api';\nimport { EntityService } from '@app/abstract/entity-service';\nimport { environment } from '@env/environment';\n\n@Injectable()\nexport class TaskService extends EntityService<Task> implements EventableService {\n\n  constructor(\n    private store: Store<SocketState>,\n    protected api: ApiService,\n  ) {\n    super(api);\n  }\n\n  get(id: number, params: { [key: string]: string } = {}): Observable<Task> {\n    return this.api.get(`${environment.apiRoot}task/${id}/`, params);\n  }\n\n  list(params: { [key: string]: string } = {}): Observable<IListResult<Task>> {\n    return this.api.get(`${environment.apiRoot}task/`, params);\n  }\n\n  events(eventFilter?: EventFilter): Observable<EventMessage> {\n    return this.store.pipe(\n      selectMessage,\n      filter(event => event?.object?.type === 'task'),\n      filter(event => !eventFilter?.events || eventFilter.events.includes(event?.event)),\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "EntityService",
            "type": "injectable"
        },
        {
            "name": "TooltipService",
            "id": "injectable-TooltipService-0aa6c34b3edfef5dfe8a28653d0685f0",
            "file": "src/app/shared/components/tooltip/tooltip.service.ts",
            "properties": [
                {
                    "name": "position$",
                    "defaultValue": "this.positionSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "positionSource",
                    "defaultValue": "new Subject<TooltipOptions>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "timeOut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [
                        {
                            "name": "withoutTimout",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "500"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "withoutTimout",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "500",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isShow",
                    "args": [
                        {
                            "name": "source",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "TooltipDisplayOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: show a tooltip if there is a condition\n\n",
                    "description": "<p>TODO: show a tooltip if there is a condition</p>\n",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "TooltipDisplayOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1460,
                                "end": 1467,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "mouseEnterTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mouseLeaveTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "TooltipDisplayOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "TooltipDisplayOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\nimport { BaseEntity } from '@app/core/types/api';\nimport { Subject } from 'rxjs';\n\nexport type ComponentName = 'issue' | 'status' | undefined;\nexport type PositionType = 'top' | 'right' | 'bottom' | 'left';\nexport interface TooltipOptions {\n  event: MouseEvent;\n  source: HTMLElement;\n  options: TooltipDisplayOptions;\n}\n\nexport interface TooltipDisplayOptions {\n  content: string | BaseEntity;\n  componentName: ComponentName;\n  position: PositionType;\n  condition: boolean;\n}\n\n@Injectable()\nexport class ComponentData {\n  path: string;\n  current: any;\n  emitter: EventEmitter<any>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TooltipService {\n  private positionSource = new Subject<TooltipOptions>();\n  position$ = this.positionSource.asObservable();\n  timeOut: any;\n\n  /**\n   * TODO: show a tooltip if there is a condition\n   *\n   * @returns\n   * @memberof TooltipComponent\n   */\n  isShow(source: HTMLElement, options: TooltipDisplayOptions) {\n    if (options.condition) {\n      return source.offsetWidth !== source.scrollWidth;\n    }\n    return true;\n  }\n\n  show(event: MouseEvent, source: HTMLElement, options: TooltipDisplayOptions) {\n    this.positionSource.next();\n    clearTimeout(this.timeOut);\n    if (this.isShow(source, options)) {\n      this.positionSource.next({ event, source, options });\n    }\n  }\n\n  hide(withoutTimout = false, timeout = 500) {\n    if (withoutTimout) {\n      this.positionSource.next();\n      return;\n    }\n\n    this.timeOut = setTimeout(() => this.positionSource.next(), timeout);\n  }\n\n  mouseEnterTooltip() {\n    clearTimeout(this.timeOut);\n  }\n\n  mouseLeaveTooltip() {\n    this.hide();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "UsersService",
            "id": "injectable-UsersService-f509a3802cb60762fa3f0173645f0df6",
            "file": "src/app/admin/users/users.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\n\nexport interface User {\n  username: string;\n  password: string;\n  confirm: string;\n  change_password: string;\n}\n\nconst USER_LINK = `${environment.apiRoot}user/`;\n\n@Injectable()\nexport class UsersService {\n  constructor(private http: HttpClient) {}\n\n  public getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(USER_LINK);\n  }\n\n  public addUser(username: string, password: string): Observable<User> {\n    return this.http.post<User>(USER_LINK, { username, password });\n  }\n\n  public clearUser(user: User): Observable<User> {\n    return this.http.delete<User>(`${USER_LINK}${user.username}/`);\n  }\n\n  public changePassword(value: string, link: string): Observable<User> {\n    return this.http.patch<User>(link, { 'password': value });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "YspecService",
            "id": "injectable-YspecService-236ea186c68ad07c4fefea3b5504940f",
            "file": "src/app/shared/configuration/yspec/yspec.service.ts",
            "properties": [
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYspec",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "rule",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'root'"
                        },
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "IYContainer | IYField",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rule",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'root'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dict",
                    "args": [
                        {
                            "name": "items",
                            "type": "IRoot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IYContainer",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "IRoot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dict_key_selection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "field",
                    "args": [
                        {
                            "name": "field",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IYField",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRule",
                    "args": [
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IYContainer",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "one_of",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IRoot } from '@app/core/types';\n\nimport { IFieldOptions, controlType, IValidator, TNBase, TNReq } from '../types';\nimport { getControlType, getPattern } from '../services/field.service';\n\nexport type TMatch = TNBase | TNReq;\n\n/**\n *```\n {\n    match: matchType;\n    selector?: string;\n    variants?: { [key: string]: string };\n    item?: string;\n    items?: IRoot;        // { [key: string]: string; }\n    required_items?: string[];\n    default_item?: string;\n }\n ```\n */\ninterface IYRoot {\n  match: TMatch;\n  selector?: string;\n  variants?: { [key: string]: string };\n  item?: string;\n  items?: IRoot;\n  required_items?: string[];\n  default_item?: string;\n}\n\n/**\n *```\n {\n    [key: string]: IYRoot;\n }\n ```\n */\nexport interface IYspec {\n  [key: string]: IYRoot;\n}\n\n/**\n *```\n{\n    name:         string;\n    path:         string[];\n    type:         simpleType;\n    controlType:  controlType;\n    validator:    ValidatorInfo;\n}\n *```\n */\nexport interface IYField {\n  name: string;\n  path: string[];\n  type: TNBase;\n  controlType: controlType;\n  validator: IValidator;\n}\n\n/**\n * ```\n * {\n *   name:      string;\n *   type:      reqursionType;    // 'list' | 'dict'\n *   options:   IYContainer | IYField | (IYContainer | IYField)[];\n * }\n *```\n */\nexport interface IYContainer {\n  name: string;\n  type: TNReq;\n  options: IYContainer | IYField | (IYContainer | IYField)[];\n}\n\nexport interface IStructure extends IFieldOptions {\n  rules: { options: any; type: string; name: string };\n}\n\n@Injectable()\nexport class YspecService {\n  private root: IYspec;\n\n  set Root(yspec: IYspec) {\n    this.root = yspec;\n  }\n\n  get Root() {\n    return this.root;\n  }\n\n  build(rule = 'root', path: string[] = []): IYContainer | IYField {\n    const { match, item, items } = this.Root[rule];\n\n    switch (match) {\n      case 'list':\n        return this.list(item, path);\n      case 'dict':\n        return this.dict(items, path);\n      // case 'one_of':\n      //   return this.one_of();\n      // case 'dict_key_selection':\n      //   return this.dict_key_selection();\n      default:\n        return this.field({ type: match, path });\n    }\n  }\n\n  field(field: { type: TNBase; path: string[] }): IYField {\n    const name = field.path.reverse()[0];\n    return {\n      name,\n      type: field.type,\n      path: field.path,\n      controlType: getControlType(field.type),\n      validator: {\n        required: this.findRule(field.path, 'required_items'),\n        pattern: getPattern(field.type),\n      },\n    };\n  }\n\n  findRule(path: string[], name: string): boolean {\n    const [field, parent] = path;\n    const rule = this.Root[parent];\n    return !!(rule && rule[name] && Array.isArray(rule[name]) && rule[name].includes(field));\n  }\n\n  list(item: string, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return { type: 'list', name, options: this.build(item, [...path, item]) };\n  }\n\n  dict(items: IRoot, path: string[]): IYContainer {\n    const name = [...path].reverse()[0] || 'root';\n    return {\n      type: 'dict',\n      name,\n      options: Object.keys(items).map((item_name: string) => this.build(items[item_name], [...path, item_name])),\n    };\n  }\n\n  one_of() {}\n\n  dict_key_selection() {}\n}\n",
            "accessors": {
                "Root": {
                    "name": "Root",
                    "setSignature": {
                        "name": "Root",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "yspec",
                                "type": "IYspec",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "yspec",
                                "type": "IYspec",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "Root",
                        "type": "",
                        "returnType": "",
                        "line": 100
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-6aa37ec183c4f94a4c0c050edcaa66c0",
            "file": "src/app/core/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { authCheck, AuthState, isAuthenticated } from './auth.store';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n  constructor(private store: Store<AuthState>, private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    this.store.dispatch(authCheck());\n    const a$ = this.store.pipe(select(isAuthenticated));\n\n    a$.pipe(\n      filter(a => !a),\n      tap(() => {\n        this.authService.redirectUrl = state.url;\n        this.router.navigate(['/login']);\n      })\n    ).subscribe();\n\n    return a$;\n  }\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-8b2b2f6267e7f95cbf755655ac303c24",
            "file": "src/app/core/http-interseptors/auth-interseptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addAuthHeader",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<any>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpErrorResponse, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { AuthService } from '@app/core/auth/auth.service';\nimport { ChannelService, keyChannelStrim, PreloaderService } from '../services';\n\nconst EXCLUDE_URLS = ['/api/v1/token/', '/assets/config.json'];\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService, private preloader: PreloaderService, private router: Router, private channel: ChannelService) {}\n\n  addAuthHeader(request: HttpRequest<any>): HttpRequest<any> {\n    const token = this.authService.token;\n    if (token && !EXCLUDE_URLS.includes(request.url)) {\n      const setParams = request.url.split('?').find((a, i) => i === 1 && a.includes('noview')) ? {} : { view: 'interface' };\n      request = request.clone({ setHeaders: { Authorization: `Token ${token}` }, setParams });\n    }\n\n    return request;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    this.preloader.start();\n    request = this.addAuthHeader(request);\n    return next.handle(request).pipe(\n      catchError((res: HttpErrorResponse) => {\n        if (res.status === 401 || res.status === 403) {\n          this.authService.redirectUrl = this.router.url;\n          this.router.navigate(['/login']);\n        }\n\n        if (res.status === 500) this.router.navigate(['/500']);\n\n        /** no need to show notification because error handling on landing page */\n        const exclude = ['USER_NOT_FOUND', 'AUTH_ERROR', 'CONFIG_NOT_FOUND'];\n\n        if (!exclude.includes(res.error.code)) {\n          const message =\n            res.statusText === 'Unknown Error' || res.statusText === 'Gateway Timeout'\n              ? 'No connection to back-end. Check your internet connection.'\n              : `[ ${res.statusText.toUpperCase()} ] ${res.error.code ? ` ${res.error.code} -- ${res.error.desc}` : res.error?.detail || ''}`;\n          this.channel.next(keyChannelStrim.notifying, `${message}::error`);\n        }\n\n        return throwError(res);\n      }),\n      finalize(() => this.preloader.end())\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "preloader",
                        "type": "PreloaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "preloader",
                        "type": "PreloaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "CachingInterseptor",
            "id": "injectable-CachingInterseptor-33c7f2d8238c74f2deb2b16860d97790",
            "file": "src/app/core/http-interseptors/caching-interseptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpResponse, HttpHandler, HttpHeaders, HttpEvent } from '@angular/common/http';\nimport { RequestCache } from './request-cache.service';\nimport { of, Observable } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class CachingInterseptor implements HttpInterceptor {\n  constructor(private cache: RequestCache) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    if (!isCachable(req)) return next.handle(req);\n\n    const cachedResponse = this.cache.get(req);\n\n    // cache-then-refresh\n    if (req.headers.get('x-refresh')) {\n      const results$ = sendRequest(req, next, this.cache);\n      return cachedResponse ? results$.pipe(startWith(cachedResponse)) : results$;\n    }\n\n    return cachedResponse ? of(cachedResponse) : sendRequest(req, next, this.cache);\n  }\n}\n\nfunction isCachable(req: HttpRequest<any>) {\n  const method = req.method,\n    url = req.url;\n  return req.params.get('c') ? true : false;\n}\n\nfunction sendRequest(req: HttpRequest<any>, next: HttpHandler, cache: RequestCache): Observable<HttpEvent<any>> {\n  const noHeaderClone = req.clone({ headers: new HttpHeaders() });\n\n  return next.handle(noHeaderClone).pipe(\n    tap(event => {\n      if (event instanceof HttpResponse) cache.put(req, event);\n    })\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cache",
                        "type": "RequestCache",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "cache",
                        "type": "RequestCache",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AdwpBaseListDirective",
            "id": "class-AdwpBaseListDirective-4b89898f1052fa2db6eb6d952db555cf",
            "file": "src/app/abstract-directives/adwp-base-list.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject } from 'rxjs';\nimport { Paging } from '@adwp-ui/widgets';\nimport { Sort } from '@angular/material/sort';\nimport { ParamMap } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { BaseListDirective } from '@app/shared/components/list/base-list.directive';\nimport { TypeName } from '@app/core/types';\nimport { ListDirective } from '@app/abstract-directives/list.directive';\nimport { ListService } from '@app/shared/components/list/list.service';\nimport { SocketState } from '@app/core/store';\n\nexport class AdwpBaseListDirective extends BaseListDirective {\n\n  paging: BehaviorSubject<Paging>;\n  sorting: BehaviorSubject<Sort> = new BehaviorSubject<Sort>(null);\n\n  constructor(\n    protected parent: ListDirective,\n    protected service: ListService,\n    protected store: Store<SocketState>,\n  ) {\n    super(parent, service, store);\n  }\n\n  checkType(typeName: string, referenceTypeName: TypeName): boolean {\n    if (referenceTypeName === 'servicecomponent') {\n      return typeName === 'component';\n    }\n\n    return (referenceTypeName ? referenceTypeName.split('2')[0] : referenceTypeName) === typeName;\n  }\n\n  routeListener(limit: number, page: number, ordering: string, params: ParamMap) {\n    this.paging.next({ pageIndex: page + 1, pageSize: limit });\n    if (ordering) {\n      const direction = ordering[0] === '-' ? 'desc' : 'asc';\n      const active = ordering[0] === '-' ? ordering.substr(1) : ordering;\n      this.sorting.next({ direction, active });\n    }\n\n    this.listParams = params;\n    this.refresh();\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parent",
                        "type": "ListDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "parent",
                        "type": "ListDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "paging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Paging>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sorting",
                    "defaultValue": "new BehaviorSubject<Sort>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Sort>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "limit",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "listParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParamMap",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "reload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entities",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "socket$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                }
            ],
            "methods": [
                {
                    "name": "checkType",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "referenceTypeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceTypeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "routeListener",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "calcSort",
                    "args": [
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Sort",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "checkParam",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "item",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "getClusters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "getNextPageCluster",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "initColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "initListItemEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "initRouteListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "initSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "license",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "listEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "EmmitRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EmmitRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "onLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "startListenSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseListDirective"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseListDirective",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-44fb262d2bcd410bff4ac18f6ada327a",
            "file": "e2e/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser } from 'protractor';\n\nexport class AppPage {  \n  navigateTo() {\n    return browser.get('/');\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Back",
            "id": "class-Back-a77f96cd644e5211741a053e7028f0c2",
            "file": "src/app/core/store/router/router.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { NavigationExtras } from '@angular/router';\n\nexport const GO = '[Router] Go';\nexport const BACK = '[Router] Back';\nexport const FORWARD = '[Router] Forward';\n\nexport class Go implements Action {\n  readonly type = GO;\n\n  constructor(\n    public payload: {\n      path: any[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class Back implements Action {\n  readonly type = BACK;\n}\n\nexport class Forward implements Action {\n  readonly type = FORWARD;\n}\n\nexport type RouterActionsUnion = Go | Back | Forward;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "BACK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "BaseListDirective",
            "id": "class-BaseListDirective-8686b2996dc23fd6b135de183a41f1f3",
            "file": "src/app/shared/components/list/base-list.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MatDialog } from '@angular/material/dialog';\nimport { ParamMap } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { filter, mergeMap, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport { IListResult } from '@adwp-ui/widgets';\nimport { Sort } from '@angular/material/sort';\nimport { Observable, Subject } from 'rxjs';\n\nimport { clearMessages, EventMessage, getMessage, SocketState } from '@app/core/store';\nimport { Bundle, EmmitRow, Entities, Host as AdcmHost, TypeName } from '@app/core/types';\nimport { DialogComponent } from '@app/shared/components';\nimport { ListResult } from '@app/models/list-result';\nimport { ListService } from './list.service';\nimport { ListDirective } from '@app/abstract-directives/list.directive';\nimport { ICluster } from '@app/models/cluster';\n\n\nconst TemporaryEntityNameConverter = (currentName: Partial<TypeName>): string => {\n\n  if (currentName === 'group_config') return 'group-config';\n  if (currentName === 'group_config_hosts') return 'group-config-hosts';\n\n  return currentName;\n};\n\ninterface IRowHost extends AdcmHost {\n  clusters: Partial<ICluster>[];\n  page: number;\n}\n\nexport class BaseListDirective {\n\n  socket$: Observable<any>;\n  destroy$ = new Subject();\n\n  row: Entities;\n  listParams: ParamMap;\n  limit = 10;\n  typeName: TypeName;\n\n  reload: (result: ListResult<Entities>) => void;\n\n  constructor(\n    protected parent: ListDirective,\n    protected service: ListService,\n    protected store: Store<SocketState>,\n  ) {}\n\n  takeUntil<T>() {\n    return takeUntil<T>(this.destroy$);\n  }\n\n  startListenSocket(): void {\n    this.socket$.pipe(tap(m => this.socketListener(m))).subscribe();\n  }\n\n  initSocket() {\n    this.socket$ = this.store.pipe(\n      this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object));\n  }\n\n  initColumns() {\n    this.parent.columns = this.service.initInstance(this.typeName).columns;\n  }\n\n  initListItemEvent() {\n    this.parent.listItemEvt\n      .pipe(this.takeUntil())\n      .subscribe({ next: (event: EmmitRow) => this.listEvents(event) });\n  }\n\n  calcSort(ordering: string): Sort {\n    let sort: Sort;\n    if (ordering) {\n      sort = {\n        direction: ordering[0] === '-' ? 'desc' : 'asc',\n        active: ordering[0] === '-' ? ordering.substr(1) : ordering,\n      };\n    }\n\n    return sort;\n  }\n\n  routeListener(limit: number, page: number, ordering: string, params: ParamMap) {\n\n    this.parent.paginator.pageSize = limit;\n    if (page === 0) {\n      this.parent.paginator.firstPage();\n    } else {\n      this.parent.paginator.pageIndex = page;\n    }\n    if (ordering && !this.parent.sort.active) {\n      this.parent.sort.direction = ordering[0] === '-' ? 'desc' : 'asc';\n      this.parent.sort.active = ordering[0] === '-' ? ordering.substr(1) : ordering;\n      this.parent.sortParam = ordering;\n    }\n\n    this.listParams = params;\n    this.refresh();\n  }\n\n  initRouteListener() {\n    this.parent.route.paramMap\n      .pipe(\n        this.takeUntil(),\n        filter((p) => this.checkParam(p))\n      )\n      .subscribe((p) => this.routeListener(+p.get('limit') || 10, +p.get('page'), p.get('ordering'), p));\n  }\n\n  init(): void {\n    this.initSocket();\n    this.initColumns();\n    this.initListItemEvent();\n    this.initRouteListener();\n    this.startListenSocket();\n  }\n\n  destroy() {\n    this.parent.listItemEvt.complete();\n\n    this.destroy$.next();\n    this.destroy$.complete();\n\n    this.store.dispatch(clearMessages());\n  }\n\n  checkParam(p: ParamMap): boolean {\n    const listParamStr = localStorage.getItem('list:param');\n    if (!p.keys.length && listParamStr) {\n      const json = JSON.parse(listParamStr);\n      if (json[this.typeName]) {\n        this.parent.router.navigate(['./', json[this.typeName]], { relativeTo: this.parent.route });\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkType(typeName: string, referenceTypeName: TypeName): boolean {\n    return (referenceTypeName ? referenceTypeName.split('2')[0] : referenceTypeName) === typeName;\n  }\n\n  socketListener(m: EventMessage): void {\n    const stype = (x: string) => `${m.object.type}${m.object.details.type ? `2${m.object.details.type}` : ''}` === x;\n\n    const checkUpgradable = () => (m.event === 'create' || m.event === 'delete') && m.object.type === 'bundle' && this.typeName === 'cluster';\n    const changeList = (name?: string) => stype(name ?? this.typeName) && (m.event === 'create' || m.event === 'delete' || m.event === 'add' || m.event === 'remove');\n    const createHostPro = () => stype('host2provider') && m.event === 'create';\n    const jobComplete = () => (m.event === 'change_job_status') && m.object.type === 'task' && m.object.details.value === 'success';\n    const rewriteRow = (row: Entities) => this.service.checkItem(row).subscribe((item) => Object.keys(row).map((a) => (row[a] = item[a])));\n\n    if (checkUpgradable() || changeList(TemporaryEntityNameConverter(this.typeName)) || createHostPro() || jobComplete()) {\n      this.refresh(m.object.id);\n      return;\n    }\n\n    // events for the row of list\n    if (this.parent.data.data.length) {\n      const row = this.parent.data.data.find((a) => a.id === m.object.id);\n      if (!row) return;\n\n      if (m.event === 'add' && stype('host2cluster')) rewriteRow(row);\n\n      if (this.checkType(m.object.type, this.typeName)) {\n        if (m.event === 'change_state') row.state = m.object.details.value;\n        if (m.event === 'change_status') row.status = +m.object.details.value;\n        if (m.event === 'change_job_status') row.status = m.object.details.value;\n        if (m.event === 'upgrade') rewriteRow(row);\n      }\n    }\n  }\n\n  refresh(id?: number) {\n    if (id) this.parent.current = { id };\n    this.service.getList(this.listParams, this.typeName).subscribe((list: IListResult<Entities>) => {\n      if (this.reload) {\n        this.reload(list);\n      }\n      this.parent.dataSource = list;\n    });\n  }\n\n  listEvents(event: EmmitRow) {\n    const createUrl = (a: string[]) => this.parent.router.createUrlTree(['./', this.row.id, ...a], { relativeTo: this.parent.route });\n    const nav = (a: string[]) => this.parent.router.navigateByUrl(createUrl(a));\n\n    this.row = event.row;\n    const { cmd, row, item } = event;\n\n    if (['title', 'status', 'config', 'import'].includes(cmd)) {\n      nav(cmd === 'title' ? [] : [cmd]);\n    } else if (cmd === 'new-tab') {\n      const url = this.parent.router.serializeUrl(createUrl([]));\n      window.open(url, '_blank');\n    } else {\n      this[cmd](row || item);\n    }\n  }\n\n  onLoad() {}\n\n  license() {\n    const row = this.row as Bundle;\n\n    const closedDialog$ = (text: string, dialog: MatDialog) =>\n      dialog\n        .open(DialogComponent, {\n          data: {\n            title: `Accept license agreement`,\n            text,\n            controls: { label: 'Do you accept the license agreement?', buttons: ['Yes', 'No'] },\n          },\n        })\n        .beforeClosed();\n\n    const showDialog = (info: { text: string }) =>\n      closedDialog$(info.text, this.parent.dialog).pipe(\n        filter((yes) => yes),\n        switchMap(() => this.service.acceptLicense(`${row.license_url}accept/`).pipe(tap((_) => (row.license = 'accepted'))))\n      );\n\n    this.service.getLicenseInfo(row.license_url).pipe(this.takeUntil(), mergeMap(showDialog)).subscribe();\n  }\n\n  delete(item?: Entities) {\n    this.service\n      .delete(item ?? this.row)\n      .pipe(this.takeUntil())\n      .subscribe(() => (this.parent.current = null));\n  }\n\n  // host\n  getClusters() {\n    const row = this.row as IRowHost;\n    if (!row.clusters) {\n      row.page = 0;\n      this.service\n        .getClustersForHost({ limit: this.limit, page: 0 })\n        .pipe(this.takeUntil())\n        .subscribe((list) => (row.clusters = list));\n    }\n  }\n\n  getNextPageCluster() {\n    const row = this.row as IRowHost;\n    const count = row.clusters.length;\n    if (count === (row.page + 1) * this.limit) {\n      row.page++;\n      this.service\n        .getClustersForHost({ limit: this.limit, page: row.page })\n        .pipe(this.takeUntil())\n        .subscribe((list) => (row.clusters = [...row.clusters, ...list]));\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parent",
                        "type": "ListDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "parent",
                        "type": "ListDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "limit",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "listParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParamMap",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "reload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entities",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "socket$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methods": [
                {
                    "name": "calcSort",
                    "args": [
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Sort",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkParam",
                    "args": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkType",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "referenceTypeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceTypeName",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "item",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Entities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getClusters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNextPageCluster",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initListItemEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initRouteListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "license",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "EmmitRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EmmitRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "routeListener",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ordering",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startListenSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CompTile",
            "id": "class-CompTile-a875bd9ec8a9450bd7b364337c366dfb",
            "file": "src/app/shared/host-components-map/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, Host, IRequires } from '@app/core/types';\n\nexport type ActionParam = 'add' | 'remove';\nexport type TConstraintValue = number | '+' | 'odd' | 'depend';\nexport type TConstraint = TConstraintValue[];\n\nexport interface IRawHosComponent {\n  component: IComponent[];\n  host: Partial<Host>[];\n  hc: Post[];\n}\n\nexport interface Post {\n  id?: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class Post implements Post {\n  constructor(public host_id: number, public service_id: number, public component_id: number, public id?: number) {}\n}\n\n/**\n *```\n  {\n    id: number;\n    name: string;\n    relations: Tile[] = [];\n    isSelected?: boolean;\n    isLink?: boolean;\n    limit?: Constraint;\n    disabled: boolean;\n    actions?: ActionParam[];\n    color?: 'none' | 'white' | 'gray' | 'yellow';\n    notification?: string;\n  }\n ```\n * @class Tile\n */\nexport class Tile {\n  id: number;\n  name: string;\n  relations: Tile[] = [];\n  isSelected?: boolean;\n  isLink?: boolean;\n  limit?: TConstraint;\n  disabled: boolean;\n  actions?: ActionParam[];\n  color?: 'none' | 'white' | 'gray' | 'yellow';\n  notification?: string;\n}\n\nexport class HostTile extends Tile {\n  constructor(rawHost: Partial<Host>) {\n    super();\n    this.id = rawHost.id;\n    this.name = rawHost.fqdn;\n  }\n}\n\nexport class CompTile extends Tile {\n  prototype_id: number;\n  service_id: number;\n  component: string;\n  requires: IRequires[];\n  constructor(rawComponent: IComponent, public actions?: ActionParam[]) {\n    super();\n    this.id = rawComponent.id;\n    this.service_id = rawComponent.service_id;\n    this.component = `${rawComponent.service_name}/${rawComponent.name}`;\n    this.name = rawComponent.display_name;\n    this.disabled = rawComponent.service_state !== 'created';\n    this.limit = rawComponent.constraint;\n    this.requires = rawComponent.requires;\n    this.prototype_id = rawComponent.prototype_id;\n  }\n}\n\n/**\n * State user selection\n *\n * @class StatePost\n */\nexport class StatePost {\n  private _data: Post[];\n\n  constructor() {\n    this._data = [];\n  }\n\n  private _compare(a: Post, b: Post) {\n    return a.host_id === b.host_id && a.service_id === b.service_id && a.component_id === b.component_id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  add(post: Post) {\n    const f = this._data.find((p) => this._compare(p, post));\n    if (!f) this._data.push(post);\n    else if (!f.id) f.id = post.id;\n  }\n\n  delete(post: Post) {\n    this._data = this._data.filter((p) => !this._compare(p, post));\n  }\n\n  clear() {\n    this._data = [];\n  }\n\n  update(data: Post[]) {\n    data.forEach((a) => this.add(new Post(a.host_id, a.service_id, a.component_id, a.id)));\n  }\n}\n/**\n *```\n  {\n    link: Tile;\n    linkSource: Tile[];\n    selected: Tile;\n  }\n  *```\n */\nexport interface IStream {\n  link: Tile;\n  linkSource: Tile[];\n  selected: Tile;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rawComponent",
                        "type": "IComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actions",
                        "type": "ActionParam[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "rawComponent",
                        "type": "IComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "ActionParam[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionParam[]",
                    "optional": true,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "requires",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRequires[]",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "service_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"none\" | \"white\" | \"gray\" | \"yellow\"",
                    "optional": true,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "isLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TConstraint",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "notification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "relations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "inheritance": {
                        "file": "Tile"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Tile",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConfigAttributeFactory",
            "id": "class-ConfigAttributeFactory-651cfdba3f000923bbee8d3d05505de6",
            "file": "src/app/shared/configuration/attributes/attribute.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Inject, Injectable, InjectionToken, TemplateRef, Type } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { isBoolean, isEmptyObject } from '@app/core/types';\nimport { FieldComponent } from '@app/shared/configuration/field/field.component';\n\nexport const ATTRIBUTES_OPTIONS = new InjectionToken('Attributes options');\n\nexport interface AttributeOptions {\n  name: ConfigAttributeNames;\n  wrapper?: Type<AttributeWrapper>;\n  options?: ConfigAttributeOptions;\n}\n\nexport type AttributesOptions = Record<ConfigAttributeNames, AttributeOptions>\n\nexport interface AttributeWrapper {\n  fieldTemplate: TemplateRef<any>;\n  wrapperOptions: ConfigAttributeOptions;\n  fieldOptions: IFieldOptions;\n  attributeForm: FormGroup;\n  parametersForm: FormGroup;\n  field: FieldComponent;\n}\n\nexport enum ConfigAttributeNames {\n  // an attribute for adding config parameters to group\n  GROUP_KEYS = 'group_keys',\n  // an attribute for config parameters that determines whether this parameter can be added to the config group\n  CUSTOM_GROUP_KEYS = 'custom_group_keys'\n}\n\nexport interface ConfigAttributesJSON {\n  [key: string]: any;\n}\n\nexport interface ConfigAttributeOptions {\n  tooltipText?: string;\n\n  [key: string]: any;\n}\n\nexport type ConfigAttribute = AttributeOptions & { value: ConfigAttributesJSON, form: FormGroup };\n\nexport type Attributes = Map<ConfigAttributeNames, ConfigAttribute>;\n\n@Injectable()\nexport class AttributeService {\n\n  private readonly _activeAttributes: Partial<ConfigAttributeNames>[] = [\n    ConfigAttributeNames.GROUP_KEYS,\n    ConfigAttributeNames.CUSTOM_GROUP_KEYS\n  ];\n\n  get attributes(): Attributes {\n    return this._attributes;\n  }\n\n  private _attributes: Attributes;\n\n  constructor(@Inject(ATTRIBUTES_OPTIONS) private _configs: AttributesOptions, private _fb: FormBuilder) {\n  }\n\n  init(json: ConfigAttributesJSON): void {\n    this._attributes = this._createAttributes(this._activeAttributes, json, this._configs);\n  }\n\n  getByName(name: ConfigAttributeNames): ConfigAttribute {\n    return this._attributes.has(name) ? this._attributes.get(name) : undefined;\n  }\n\n  private _createAttributes(_activeAttributes: Partial<ConfigAttributeNames>[], json: ConfigAttributesJSON, configs: AttributesOptions): Attributes {\n    const isEmptyAttrs = !Object.keys(json || {}).length;\n    const isActiveAttrsPresent = !!Object.keys(json || {}).filter((x: ConfigAttributeNames) => this._activeAttributes.includes(x)).length;\n    if (isEmptyAttrs || !isActiveAttrsPresent) {\n      return;\n    }\n\n    return new Map(this._activeAttributes.map((attr) => [\n      attr,\n      new ConfigAttributeFactory(this._fb).create(attr, json[attr], configs[attr], json),\n    ]));\n  }\n\n\n  rawAttributes() {\n    let json = {};\n    if (this._attributes) {\n      for (const [key, value] of this._attributes.entries()) {\n        json = {\n          ...json,\n          [key]: value.form.value\n        };\n      }\n    }\n\n    return json;\n  }\n}\n\nexport const createFormForAttribute = (fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n};\n\n\nexport class ConfigAttributeFactory {\n\n  constructor(private fb: FormBuilder) {}\n\n  create(name: ConfigAttributeNames, value: ConfigAttributesJSON, options: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n    if (!this[name]) {\n      return;\n    }\n\n    return this[name](value, options, json);\n  }\n\n  [ConfigAttributeNames.GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options,\n    wrapper\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return {\n      name,\n      value,\n      wrapper,\n      options,\n      form\n    };\n  }\n\n  [ConfigAttributeNames.CUSTOM_GROUP_KEYS](value: ConfigAttributesJSON, {\n    name,\n    options\n  }: AttributeOptions, json: ConfigAttributesJSON): ConfigAttribute {\n\n    const form = createFormForAttribute(this.fb, json, name);\n\n    return { name, value, options, form };\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "name",
                            "type": "ConfigAttributeNames",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "AttributeOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConfigAttribute",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "ConfigAttributeNames",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "AttributeOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "args": [
                        {
                            "name": "value",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AttributeOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConfigAttribute",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "AttributeOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "args": [
                        {
                            "name": "value",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AttributeOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConfigAttribute",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "AttributeOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "json",
                            "type": "ConfigAttributesJSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Configuration",
            "id": "class-Configuration-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "IFieldStack[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "IFieldStack[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "attr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfigAttr",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFieldStack[]",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 74
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IConfig"
            ]
        },
        {
            "name": "ContextManager",
            "id": "class-ContextManager-ed3a3a7c183131d19d99b08e7c8de4e0",
            "file": "src/app/core/types/context-manager.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ContextManager {\n    constructor(typeName: string) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "typeName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "typeName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateHelper",
            "id": "class-DateHelper-0378511aedd8526bea7730dba4a4a240",
            "file": "src/app/helpers/date-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DateTime } from 'luxon';\n\nexport class DateHelper {\n\n  static short(date: string) {\n    return DateTime.fromISO(date).setLocale('en').toFormat('FF');\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "short",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DetailsFactory",
            "id": "class-DetailsFactory-5922a056325c58af02a41603676764e9",
            "file": "src/app/factories/details.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LeftMenuItem } from '../shared/details/left-menu/left-menu.component';\nimport { LabelMenuItemComponent } from '../shared/details/left-menu-items/label-menu-item/label-menu-item.component';\nimport { StatusMenuItemComponent } from '@app/shared/details/left-menu-items/status-menu-item/status-menu-item.component';\nimport { LogMenuItemComponent } from '@app/shared/details/left-menu-items/log-menu-item/log-menu-item.component';\nimport { TypeName } from '@app/core/types';\nimport { ConcernMenuItemComponent } from '@app/shared/details/left-menu-items/concern-menu-item/concern-menu-item.component';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\nexport class DetailsFactory {\n\n  static labelMenuItem(label: string, link: string): LeftMenuItem {\n    return {\n      label,\n      link,\n      component: LabelMenuItemComponent,\n    };\n  }\n\n  static concernMenuItem(label: string, link: string, cause: string, type: ConcernEventType, owner_type: TypeName): LeftMenuItem {\n    return {\n      label,\n      link,\n      data: { cause, type, owner_type },\n      component: ConcernMenuItemComponent,\n    };\n  }\n\n  static statusMenuItem(label: string, link: string, entityType: TypeName): LeftMenuItem {\n    return {\n      label,\n      link,\n      data: { entityType },\n      component: StatusMenuItemComponent,\n    };\n  }\n\n  static logMenuItem(label: string, link: string, logId: number): LeftMenuItem {\n    return {\n      label,\n      link,\n      data: { logId },\n      component: LogMenuItemComponent,\n    };\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "concernMenuItem",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cause",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ConcernEventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "owner_type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LeftMenuItem",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cause",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "ConcernEventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "owner_type",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "labelMenuItem",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LeftMenuItem",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logMenuItem",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "logId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LeftMenuItem",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "logId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusMenuItem",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entityType",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LeftMenuItem",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityType",
                            "type": "TypeName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EntityService",
            "id": "class-EntityService-cf44d7994264b717b6a3ad4e6000bbb4",
            "file": "src/app/abstract/entity-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\n\nimport { ApiService } from '@app/core/api';\n\nexport abstract class EntityService<T> {\n\n  constructor(\n    protected api: ApiService,\n  ) {\n  }\n\n  abstract get(id: number, params?: { [key: string]: string }): Observable<T>;\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FieldFactory",
            "id": "class-FieldFactory-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "params",
                            "type": "(TNForm | TNForm[])[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturn group if params as array\n",
                    "description": "<p>return group if params as array</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "(TNForm | TNForm[])[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addGroup",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "TNForm[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFieldStack[]",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "TNForm[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FieldStack",
            "id": "class-FieldStack-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "TNForm",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "value",
                        "type": "null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "required",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    },
                    {
                        "name": "read_only",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "activatable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "TNForm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "required",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "read_only",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activatable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "default",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TValue",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "limits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILimits",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "name",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "read_only",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "required",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "subname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TNForm",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ui_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUIoptions",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "Limits": {
                    "name": "Limits",
                    "setSignature": {
                        "name": "Limits",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "limits",
                                "type": "ILimits",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "limits",
                                "type": "ILimits",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "UIOptions": {
                    "name": "UIOptions",
                    "setSignature": {
                        "name": "UIOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "options",
                                "type": "IUIoptions",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "IUIoptions",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFieldStack"
            ]
        },
        {
            "name": "Forward",
            "id": "class-Forward-a77f96cd644e5211741a053e7028f0c2",
            "file": "src/app/core/store/router/router.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { NavigationExtras } from '@angular/router';\n\nexport const GO = '[Router] Go';\nexport const BACK = '[Router] Back';\nexport const FORWARD = '[Router] Forward';\n\nexport class Go implements Action {\n  readonly type = GO;\n\n  constructor(\n    public payload: {\n      path: any[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class Back implements Action {\n  readonly type = BACK;\n}\n\nexport class Forward implements Action {\n  readonly type = FORWARD;\n}\n\nexport type RouterActionsUnion = Go | Back | Forward;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "FORWARD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GenName",
            "id": "class-GenName-a14c51920fb5cd299c091f6e62420ca5",
            "file": "src/app/shared/add-component/naming.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { randomInteger } from '@app/core/types/func';\n\nconst rivers: string[] = [\n  'Amur',\n  'Anadyr',\n  'Angara',\n  'Colorado',\n  'Congo',\n  'Desna',\n  'Dnieper',\n  'Don',\n  'Itrysh',\n  'Kama',\n  'Limpopo',\n  'Mekong',\n  'Mississippi',\n  'Nile',\n  'Ob',\n  'Oka',\n  'Pechora',\n  'Rhine',\n  'Ural',\n  'Volga',\n  'Yangtze',\n  'Yenisei',\n  'Yukon',\n  'Zambezi',\n];\n\nconst adjectives: string[] = [\n  'Ancient',\n  'Beautiful',\n  'Big',\n  'Blue',\n  'Broad',\n  'Clear',\n  'Cold',\n  'Dark',\n  'Deep',\n  'Distant',\n  'Down',\n  'Dry',\n  'Famous',\n  'Fear',\n  'Flowing',\n  'Frozen',\n  'Great',\n  'Holy',\n  'Huge',\n  'Icy',\n  'Large',\n  'Latter',\n  'Longest',\n  'Lovely',\n  'Lower',\n  'Mad',\n  'Magnificent',\n  'Majestic',\n  'Middle',\n  'Mighty',\n  'Muddy',\n  'Narrow',\n  'Noble',\n  'North',\n  'Placid',\n  'Polluted',\n  'Quiet',\n  'Rapid',\n  'Sacred',\n  'Shallow',\n  'Slow',\n  'Sluggish',\n  'Small',\n  'Swift',\n  'Tidal',\n  'Tributary',\n  'Turbulent',\n  'Wide',\n  'Wild',\n];\n\nexport class GenName {\n  public static do(prefix: string = '') {\n    return `${adjectives[randomInteger(adjectives.length - 1)]} ${rivers[randomInteger(rivers.length - 1)]}${prefix}`;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "do",
                    "args": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Go",
            "id": "class-Go-a77f96cd644e5211741a053e7028f0c2",
            "file": "src/app/core/store/router/router.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { NavigationExtras } from '@angular/router';\n\nexport const GO = '[Router] Go';\nexport const BACK = '[Router] Back';\nexport const FORWARD = '[Router] Forward';\n\nexport class Go implements Action {\n  readonly type = GO;\n\n  constructor(\n    public payload: {\n      path: any[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class Back implements Action {\n  readonly type = BACK;\n}\n\nexport class Forward implements Action {\n  readonly type = FORWARD;\n}\n\nexport type RouterActionsUnion = Go | Back | Forward;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "GO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "HavingStatusTreeAbstractService",
            "id": "class-HavingStatusTreeAbstractService-ac4a211ede81d2fdb53aad014397edf4",
            "file": "src/app/abstract/having-status-tree.abstract.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\n\nimport { StatusTree, StatusTreeSubject } from '../models/status-tree';\nimport { EntityService } from '@app/abstract/entity-service';\nimport { AdcmEntity } from '@app/models/entity';\n\nexport abstract class HavingStatusTreeAbstractService<StatusTreeType extends StatusTreeSubject, EntityType extends AdcmEntity> extends EntityService<EntityType> {\n\n  abstract getStatusTree(id: number): Observable<StatusTreeType>;\n  abstract entityStatusTreeToStatusTree(input: StatusTreeType, ...args): StatusTree[];\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "entityStatusTreeToStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTree[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatusTree",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StatusTreeType>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntityService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "EntityService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HCmComponent",
            "id": "class-HCmComponent-b54e687297e8b02797d55193fc2ec35c",
            "file": "src/app/shared/host-components-map/test/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, IRequires } from '@app/core/types';\nimport { newArray } from '@app/core/types/func';\n\nimport { Post, TConstraint } from '../types';\n\nexport class HCmRequires implements IRequires {\n  name: string;\n  display_name: string;\n  components?: IRequires[];\n  constructor(public prototype_id: number) {\n    this.name = `name_${prototype_id}`;\n    this.display_name = `component_display_name_${prototype_id}`;\n  }\n}\n\nexport class HostComponent {\n  id: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class HcmHost {\n  constructor(public fqdn: string, public id: number) {}\n}\n\nexport class HCmComponent {\n  name: string;\n  display_name: string;\n  service_name: string;\n  service_state = 'created';\n  prototype_id: number;\n  constraint: TConstraint = null;\n  requires: HCmRequires[];\n  constructor(public id: number, public service_id: number) {\n    this.prototype_id = id;\n    this.name = `component_${id}`;\n    this.display_name = `component_display_name_${id}`;\n    this.service_name = `service_${service_id}`;\n  }\n}\n\n/**\n * Array with specific service id and components with id by index [1, count]\n * see: class HCmComponent\n*/\nexport const ComponentFactory = (count: number, service_id: number): IComponent[] =>\n  newArray<IComponent>(count, (_, i) => new HCmComponent(i + 1, service_id) as IComponent);\n\nexport const HCFactory = (host_id: number, service_id: number, components: number): Post[] =>\n  newArray(components, (_, i) => new Post(host_id, service_id, i + 1, i + 1));\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service_id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service_id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "constraint",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TConstraint",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "requires",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HCmRequires[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "service_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "service_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "service_state",
                    "defaultValue": "'created'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HcmHost",
            "id": "class-HcmHost-b54e687297e8b02797d55193fc2ec35c",
            "file": "src/app/shared/host-components-map/test/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, IRequires } from '@app/core/types';\nimport { newArray } from '@app/core/types/func';\n\nimport { Post, TConstraint } from '../types';\n\nexport class HCmRequires implements IRequires {\n  name: string;\n  display_name: string;\n  components?: IRequires[];\n  constructor(public prototype_id: number) {\n    this.name = `name_${prototype_id}`;\n    this.display_name = `component_display_name_${prototype_id}`;\n  }\n}\n\nexport class HostComponent {\n  id: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class HcmHost {\n  constructor(public fqdn: string, public id: number) {}\n}\n\nexport class HCmComponent {\n  name: string;\n  display_name: string;\n  service_name: string;\n  service_state = 'created';\n  prototype_id: number;\n  constraint: TConstraint = null;\n  requires: HCmRequires[];\n  constructor(public id: number, public service_id: number) {\n    this.prototype_id = id;\n    this.name = `component_${id}`;\n    this.display_name = `component_display_name_${id}`;\n    this.service_name = `service_${service_id}`;\n  }\n}\n\n/**\n * Array with specific service id and components with id by index [1, count]\n * see: class HCmComponent\n*/\nexport const ComponentFactory = (count: number, service_id: number): IComponent[] =>\n  newArray<IComponent>(count, (_, i) => new HCmComponent(i + 1, service_id) as IComponent);\n\nexport const HCFactory = (host_id: number, service_id: number, components: number): Post[] =>\n  newArray(components, (_, i) => new Post(host_id, service_id, i + 1, i + 1));\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fqdn",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "fqdn",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "fqdn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HCmRequires",
            "id": "class-HCmRequires-b54e687297e8b02797d55193fc2ec35c",
            "file": "src/app/shared/host-components-map/test/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, IRequires } from '@app/core/types';\nimport { newArray } from '@app/core/types/func';\n\nimport { Post, TConstraint } from '../types';\n\nexport class HCmRequires implements IRequires {\n  name: string;\n  display_name: string;\n  components?: IRequires[];\n  constructor(public prototype_id: number) {\n    this.name = `name_${prototype_id}`;\n    this.display_name = `component_display_name_${prototype_id}`;\n  }\n}\n\nexport class HostComponent {\n  id: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class HcmHost {\n  constructor(public fqdn: string, public id: number) {}\n}\n\nexport class HCmComponent {\n  name: string;\n  display_name: string;\n  service_name: string;\n  service_state = 'created';\n  prototype_id: number;\n  constraint: TConstraint = null;\n  requires: HCmRequires[];\n  constructor(public id: number, public service_id: number) {\n    this.prototype_id = id;\n    this.name = `component_${id}`;\n    this.display_name = `component_display_name_${id}`;\n    this.service_name = `service_${service_id}`;\n  }\n}\n\n/**\n * Array with specific service id and components with id by index [1, count]\n * see: class HCmComponent\n*/\nexport const ComponentFactory = (count: number, service_id: number): IComponent[] =>\n  newArray<IComponent>(count, (_, i) => new HCmComponent(i + 1, service_id) as IComponent);\n\nexport const HCFactory = (host_id: number, service_id: number, components: number): Post[] =>\n  newArray(components, (_, i) => new Post(host_id, service_id, i + 1, i + 1));\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "prototype_id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "prototype_id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRequires[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "prototype_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IRequires"
            ]
        },
        {
            "name": "HostComponent",
            "id": "class-HostComponent-b54e687297e8b02797d55193fc2ec35c",
            "file": "src/app/shared/host-components-map/test/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, IRequires } from '@app/core/types';\nimport { newArray } from '@app/core/types/func';\n\nimport { Post, TConstraint } from '../types';\n\nexport class HCmRequires implements IRequires {\n  name: string;\n  display_name: string;\n  components?: IRequires[];\n  constructor(public prototype_id: number) {\n    this.name = `name_${prototype_id}`;\n    this.display_name = `component_display_name_${prototype_id}`;\n  }\n}\n\nexport class HostComponent {\n  id: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class HcmHost {\n  constructor(public fqdn: string, public id: number) {}\n}\n\nexport class HCmComponent {\n  name: string;\n  display_name: string;\n  service_name: string;\n  service_state = 'created';\n  prototype_id: number;\n  constraint: TConstraint = null;\n  requires: HCmRequires[];\n  constructor(public id: number, public service_id: number) {\n    this.prototype_id = id;\n    this.name = `component_${id}`;\n    this.display_name = `component_display_name_${id}`;\n    this.service_name = `service_${service_id}`;\n  }\n}\n\n/**\n * Array with specific service id and components with id by index [1, count]\n * see: class HCmComponent\n*/\nexport const ComponentFactory = (count: number, service_id: number): IComponent[] =>\n  newArray<IComponent>(count, (_, i) => new HCmComponent(i + 1, service_id) as IComponent);\n\nexport const HCFactory = (host_id: number, service_id: number, components: number): Post[] =>\n  newArray(components, (_, i) => new Post(host_id, service_id, i + 1, i + 1));\n",
            "properties": [
                {
                    "name": "component_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "host_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "service_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HostTile",
            "id": "class-HostTile-a875bd9ec8a9450bd7b364337c366dfb",
            "file": "src/app/shared/host-components-map/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, Host, IRequires } from '@app/core/types';\n\nexport type ActionParam = 'add' | 'remove';\nexport type TConstraintValue = number | '+' | 'odd' | 'depend';\nexport type TConstraint = TConstraintValue[];\n\nexport interface IRawHosComponent {\n  component: IComponent[];\n  host: Partial<Host>[];\n  hc: Post[];\n}\n\nexport interface Post {\n  id?: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class Post implements Post {\n  constructor(public host_id: number, public service_id: number, public component_id: number, public id?: number) {}\n}\n\n/**\n *```\n  {\n    id: number;\n    name: string;\n    relations: Tile[] = [];\n    isSelected?: boolean;\n    isLink?: boolean;\n    limit?: Constraint;\n    disabled: boolean;\n    actions?: ActionParam[];\n    color?: 'none' | 'white' | 'gray' | 'yellow';\n    notification?: string;\n  }\n ```\n * @class Tile\n */\nexport class Tile {\n  id: number;\n  name: string;\n  relations: Tile[] = [];\n  isSelected?: boolean;\n  isLink?: boolean;\n  limit?: TConstraint;\n  disabled: boolean;\n  actions?: ActionParam[];\n  color?: 'none' | 'white' | 'gray' | 'yellow';\n  notification?: string;\n}\n\nexport class HostTile extends Tile {\n  constructor(rawHost: Partial<Host>) {\n    super();\n    this.id = rawHost.id;\n    this.name = rawHost.fqdn;\n  }\n}\n\nexport class CompTile extends Tile {\n  prototype_id: number;\n  service_id: number;\n  component: string;\n  requires: IRequires[];\n  constructor(rawComponent: IComponent, public actions?: ActionParam[]) {\n    super();\n    this.id = rawComponent.id;\n    this.service_id = rawComponent.service_id;\n    this.component = `${rawComponent.service_name}/${rawComponent.name}`;\n    this.name = rawComponent.display_name;\n    this.disabled = rawComponent.service_state !== 'created';\n    this.limit = rawComponent.constraint;\n    this.requires = rawComponent.requires;\n    this.prototype_id = rawComponent.prototype_id;\n  }\n}\n\n/**\n * State user selection\n *\n * @class StatePost\n */\nexport class StatePost {\n  private _data: Post[];\n\n  constructor() {\n    this._data = [];\n  }\n\n  private _compare(a: Post, b: Post) {\n    return a.host_id === b.host_id && a.service_id === b.service_id && a.component_id === b.component_id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  add(post: Post) {\n    const f = this._data.find((p) => this._compare(p, post));\n    if (!f) this._data.push(post);\n    else if (!f.id) f.id = post.id;\n  }\n\n  delete(post: Post) {\n    this._data = this._data.filter((p) => !this._compare(p, post));\n  }\n\n  clear() {\n    this._data = [];\n  }\n\n  update(data: Post[]) {\n    data.forEach((a) => this.add(new Post(a.host_id, a.service_id, a.component_id, a.id)));\n  }\n}\n/**\n *```\n  {\n    link: Tile;\n    linkSource: Tile[];\n    selected: Tile;\n  }\n  *```\n */\nexport interface IStream {\n  link: Tile;\n  linkSource: Tile[];\n  selected: Tile;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rawHost",
                        "type": "Partial<Host>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "rawHost",
                        "type": "Partial<Host>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionParam[]",
                    "optional": true,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"none\" | \"white\" | \"gray\" | \"yellow\"",
                    "optional": true,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "isLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TConstraint",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "notification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "Tile"
                    }
                },
                {
                    "name": "relations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "inheritance": {
                        "file": "Tile"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Tile",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IssueHelper",
            "id": "class-IssueHelper-dc8aa95f7949659a3f7b85c169ab436c",
            "file": "src/app/helpers/issue-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IIssues } from '../models/issue';\n\nexport class IssueHelper {\n\n  static isIssue(issue: IIssues): boolean {\n    return !!(issue && Object.keys(issue).length);\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "isIssue",
                    "args": [
                        {
                            "name": "issue",
                            "type": "IIssues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "issue",
                            "type": "IIssues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Limits",
            "id": "class-Limits-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "yspec",
                        "type": "IYspec",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "yspec",
                        "type": "IYspec",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "option",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "read_only",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "stateType[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYField | IYContainer",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "yspec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYspec",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "Rules": {
                    "name": "Rules",
                    "setSignature": {
                        "name": "Rules",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "rules",
                                "type": "IYField | IYContainer",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "rules",
                                "type": "IYField | IYContainer",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ListFactory",
            "id": "class-ListFactory-505028d528229bf4882d10af2d9da1f6",
            "file": "src/app/factories/list.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponentColumn, IValueColumn, IButtonsColumn, ILinkColumn } from '@adwp-ui/widgets';\nimport { ComponentRef } from '@angular/core';\n\nimport { StateColumnComponent } from '@app/components/columns/state-column/state-column.component';\nimport { StatusColumnComponent, StatusData } from '@app/components/columns/status-column/status-column.component';\nimport { AdwpListDirective } from '@app/abstract-directives/adwp-list.directive';\nimport { UpgradeComponent } from '@app/shared/components';\nimport { ActionsButtonComponent } from '@app/components/actions-button/actions-button.component';\nimport { BaseEntity } from '@app/core/types';\nimport { ConcernListDirective } from '@app/abstract-directives/concern-list.directive';\n\nexport class ListFactory {\n\n  static nameColumn(sort: string = 'name'): IValueColumn<any> {\n    return {\n      label: 'Name',\n      sort,\n      value: (row) => row.display_name || row.name,\n    };\n  }\n\n  static fqdnColumn(): IValueColumn<any> {\n    return {\n      label: 'FQDN',\n      sort: 'fqdn',\n      className: 'width30pr',\n      headerClassName: 'width30pr',\n      value: row => row.fqdn,\n    };\n  }\n\n  static descriptionColumn(): IValueColumn<any> {\n    return {\n      label: 'Description',\n      value: (row) => row.description,\n    };\n  }\n\n  static stateColumn(): IComponentColumn<any> {\n    return {\n      label: 'State',\n      sort: 'state',\n      type: 'component',\n      className: 'width100',\n      headerClassName: 'width100',\n      component: StateColumnComponent,\n    };\n  }\n\n  static statusColumn<T>(listDirective: AdwpListDirective<T>): IComponentColumn<T> {\n    return {\n      label: 'Status',\n      sort: 'status',\n      type: 'component',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      component: StatusColumnComponent,\n      instanceTaken: (componentRef: ComponentRef<StatusColumnComponent<T>>) => {\n        componentRef.instance.onClick\n          .pipe(listDirective.takeUntil())\n          .subscribe((data: StatusData<any>) => listDirective.gotoStatus(data));\n      }\n    };\n  }\n\n  static actionsButton<T extends BaseEntity>(listDirective: ConcernListDirective<T>): IComponentColumn<T> {\n    return {\n      label: 'Actions',\n      type: 'component',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      component: ActionsButtonComponent,\n      instanceTaken: (componentRef: ComponentRef<ActionsButtonComponent<T>>) => {\n        componentRef.instance.onMouseenter\n          .pipe(listDirective.takeUntil())\n          .subscribe((row: T) => {\n            listDirective.rewriteRow(row);\n          });\n      },\n    };\n  }\n\n  static importColumn<T>(listDirective: AdwpListDirective<T>): IButtonsColumn<T> {\n    return {\n      label: 'Import',\n      type: 'buttons',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      buttons: [{\n        icon: 'import_export',\n        callback: (row) => listDirective.baseListDirective.listEvents({ cmd: 'import', row }),\n      }]\n    };\n  }\n\n  static configColumn<T>(listDirective: AdwpListDirective<T>): IButtonsColumn<T> {\n    return {\n      label: 'Config',\n      type: 'buttons',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      buttons: [{\n        icon: 'settings',\n        callback: (row) => listDirective.baseListDirective.listEvents({ cmd: 'config', row }),\n      }]\n    };\n  }\n\n  static bundleColumn(): IValueColumn<any> {\n    return {\n      label: 'Bundle',\n      sort: 'prototype_display_name',\n      value: (row) => [row.prototype_display_name || row.prototype_name, row.prototype_version, row.edition].join(' '),\n    };\n  }\n\n  static updateColumn(): IComponentColumn<any> {\n    return {\n      label: 'Upgrade',\n      type: 'component',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      component: UpgradeComponent,\n    };\n  }\n\n  static deleteColumn<T>(listDirective: AdwpListDirective<T>): IButtonsColumn<T> {\n    return {\n      type: 'buttons',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      buttons: [{\n        icon: 'delete',\n        callback: (row, event) => listDirective.delete(event, row),\n      }]\n    };\n  }\n\n  static providerColumn(): ILinkColumn<any> {\n    return {\n      type: 'link',\n      label: 'Provider',\n      sort: 'provider_name',\n      value: row => row.provider_name,\n      url: row => `/provider/${row.provider_id}`,\n    };\n  }\n\n  static keyColumn(): IValueColumn<any> {\n    return {\n      label: 'Parameter',\n      value: (row) => row.key,\n    };\n  }\n\n  static valueColumn(): IValueColumn<any> {\n    return {\n      label: 'Value',\n      className: 'width30pr',\n      headerClassName: 'width30pr',\n      value: (row) => row.value,\n    };\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "actionsButton",
                    "args": [
                        {
                            "name": "listDirective",
                            "type": "ConcernListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IComponentColumn<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listDirective",
                            "type": "ConcernListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "bundleColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "IValueColumn<any>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configColumn",
                    "args": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IButtonsColumn<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteColumn",
                    "args": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IButtonsColumn<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "descriptionColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "IValueColumn<any>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fqdnColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "IValueColumn<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "importColumn",
                    "args": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IButtonsColumn<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "IValueColumn<any>",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nameColumn",
                    "args": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'name'"
                        }
                    ],
                    "optional": false,
                    "returnType": "IValueColumn<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'name'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "providerColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "ILinkColumn<any>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stateColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "IComponentColumn<any>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusColumn",
                    "args": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IComponentColumn<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "listDirective",
                            "type": "AdwpListDirective<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "IComponentColumn<any>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "valueColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "IValueColumn<any>",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginPage",
            "id": "class-LoginPage-977bf5dbdbd43649b038d4a82c6e9c87",
            "file": "e2e/login/login.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class LoginPage {\n  private credentials = {\n    username: 'admin',\n    password: 'admin',\n  };\n\n  navigateTo() {\n    return browser.get('/login');\n  }\n\n  fillCredentials(credentials: any = this.credentials) {\n    element(by.css('[placeholder=\"Login\"]')).sendKeys(credentials.username);\n    element(by.css('[placeholder=\"Password\"]')).sendKeys(credentials.password);\n    this.getButton().click();\n  }\n\n  getErrorMessage() {\n    return element(by.css('.warn')).getText();\n  }\n\n  getButton() {\n      return element(by.tagName('button'));\n  }\n}\n",
            "properties": [
                {
                    "name": "credentials",
                    "defaultValue": "{\n    username: 'admin',\n    password: 'admin',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fillCredentials",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.credentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.credentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrorMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObjectsHelper",
            "id": "class-ObjectsHelper-b3e1566deba281613f43dbe612ff8260",
            "file": "src/app/helpers/objects-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { JobObject, JobType } from '../core/types';\n\nexport class ObjectsHelper {\n\n  static getObject(objects: JobObject[], type: JobType): JobObject {\n    return objects.find(object => object.type === type);\n  }\n\n  static getObjectUrl(object: JobObject, objects: JobObject[]): string[] {\n    if (object.type === 'cluster' || !ObjectsHelper.getCluster(objects)) {\n      return ['/', object.type, `${object.id}`];\n    } else if (object.type === 'component' && ObjectsHelper.getService(objects)) {\n      return ['/', 'cluster', `${ObjectsHelper.getCluster(objects).id}`, 'service', `${ObjectsHelper.getService(objects).id}`, object.type, `${object.id}`];\n    } else if (object.type === 'component' && !ObjectsHelper.getService(objects)) {\n      return ['/', 'cluster', `${ObjectsHelper.getCluster(objects).id}`, 'host_component'];\n    } else {\n      return ['/', 'cluster', `${ObjectsHelper.getCluster(objects).id}`, object.type, `${object.id}`];\n    }\n  }\n\n  static sortObjects(objects: JobObject[]): JobObject[] {\n    return [\n      ObjectsHelper.getObject(objects, 'cluster'),\n      ObjectsHelper.getObject(objects, 'service'),\n      ObjectsHelper.getObject(objects, 'component'),\n      ObjectsHelper.getObject(objects, 'provider'),\n      ObjectsHelper.getObject(objects, 'host'),\n    ].filter(Boolean);\n  }\n\n  static getCluster(objects: JobObject[]): JobObject {\n    return ObjectsHelper.getObject(objects, 'cluster');\n  }\n\n  static getService(objects: JobObject[]): JobObject {\n    return ObjectsHelper.getObject(objects, 'service');\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getCluster",
                    "args": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "JobObject",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObject",
                    "args": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "JobType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "JobObject",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "JobType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObjectUrl",
                    "args": [
                        {
                            "name": "object",
                            "type": "JobObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "JobObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getService",
                    "args": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "JobObject",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortObjects",
                    "args": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "JobObject[]",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "JobObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RequestCache",
            "id": "class-RequestCache-8a514e04e9e3c150b655bc69be645c5e",
            "file": "src/app/core/http-interseptors/request-cache.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse } from '@angular/common/http';\n\nconst maxAge = Number.MAX_VALUE; // maximum cache age (ms)\n\ninterface RequestCacheEntry {\n  url: string;\n  response: HttpResponse<any>;\n  lastRead: number;\n}\n\nexport abstract class RequestCache {\n  abstract get(req: HttpRequest<any>): HttpResponse<any> | undefined;\n  abstract put(req: HttpRequest<any>, response: HttpResponse<any>): void;\n}\n\n@Injectable()\nexport class RequestCacheService implements RequestCache {\n  cache = new Map<string, RequestCacheEntry>();\n\n  constructor() {}\n\n  get(req: HttpRequest<any>): HttpResponse<any> | undefined {\n    const url = req.urlWithParams;\n    const cached = this.cache.get(url);\n\n    if (!cached) return undefined;\n\n    const isExpired = cached.lastRead < Date.now() - maxAge;\n\n    const expired = isExpired ? 'Expired ' : '';\n    // this.messanger.add(new Message(`${expired}cached response for \"${url}\".`));\n\n    return isExpired ? undefined : cached.response;\n  }\n\n  put(req: HttpRequest<any>, response: HttpResponse<any>): void {\n    const url = req.urlWithParams;\n    // this.messanger.add(new Message(`Caching response from \"${url}\".` ));\n\n    const entry = { url, response, lastRead: Date.now() };\n    this.cache.set(url, entry);\n\n    const expired = Date.now() - maxAge;\n\n    this.cache.forEach(c => {\n      if (c.lastRead < expired) this.cache.delete(c.url);\n    });\n\n    // this.messanger.add(new Message(`Request cache size: ${this.cache.size}.`));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpResponse | undefined",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "response",
                            "type": "HttpResponse<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "response",
                            "type": "HttpResponse<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RouteSerializer",
            "id": "class-RouteSerializer-8dd1bd3a3ce3f8be4547bb2e68025ad1",
            "file": "src/app/core/store/router/route-serializer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { RouterStateSerializer } from '@ngrx/router-store';\nimport { RouterStateSnapshot, Params } from '@angular/router';\n\nexport interface RouterStateUrl {\n  url: string;\n  params: Params;\n  queryParams: Params;\n}\n\nexport class RouteSerializer implements RouterStateSerializer<RouterStateUrl> {\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n    let route = routerState.root;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    const {\n      url,\n      root: { queryParams },\n    } = routerState;\n    const { params } = route;\n\n    // Only return an object including the URL, params and query params\n    // instead of the entire snapshot\n    return { url, params, queryParams };\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RouterStateUrl",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RouterStateSerializer"
            ]
        },
        {
            "name": "StartPage",
            "id": "class-StartPage-e4e774d0f67b20e2c020b586e5ac123b",
            "file": "e2e/start/start.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, element, by } from 'protractor';\n\nexport class StartPage {\n  navigateTo() {\n    return browser.get('/admin/intro');\n  }\n\n  getPageTitleText() {\n      return element(by.css('.mat-card-title')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getPageTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StatePost",
            "id": "class-StatePost-a875bd9ec8a9450bd7b364337c366dfb",
            "file": "src/app/shared/host-components-map/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, Host, IRequires } from '@app/core/types';\n\nexport type ActionParam = 'add' | 'remove';\nexport type TConstraintValue = number | '+' | 'odd' | 'depend';\nexport type TConstraint = TConstraintValue[];\n\nexport interface IRawHosComponent {\n  component: IComponent[];\n  host: Partial<Host>[];\n  hc: Post[];\n}\n\nexport interface Post {\n  id?: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class Post implements Post {\n  constructor(public host_id: number, public service_id: number, public component_id: number, public id?: number) {}\n}\n\n/**\n *```\n  {\n    id: number;\n    name: string;\n    relations: Tile[] = [];\n    isSelected?: boolean;\n    isLink?: boolean;\n    limit?: Constraint;\n    disabled: boolean;\n    actions?: ActionParam[];\n    color?: 'none' | 'white' | 'gray' | 'yellow';\n    notification?: string;\n  }\n ```\n * @class Tile\n */\nexport class Tile {\n  id: number;\n  name: string;\n  relations: Tile[] = [];\n  isSelected?: boolean;\n  isLink?: boolean;\n  limit?: TConstraint;\n  disabled: boolean;\n  actions?: ActionParam[];\n  color?: 'none' | 'white' | 'gray' | 'yellow';\n  notification?: string;\n}\n\nexport class HostTile extends Tile {\n  constructor(rawHost: Partial<Host>) {\n    super();\n    this.id = rawHost.id;\n    this.name = rawHost.fqdn;\n  }\n}\n\nexport class CompTile extends Tile {\n  prototype_id: number;\n  service_id: number;\n  component: string;\n  requires: IRequires[];\n  constructor(rawComponent: IComponent, public actions?: ActionParam[]) {\n    super();\n    this.id = rawComponent.id;\n    this.service_id = rawComponent.service_id;\n    this.component = `${rawComponent.service_name}/${rawComponent.name}`;\n    this.name = rawComponent.display_name;\n    this.disabled = rawComponent.service_state !== 'created';\n    this.limit = rawComponent.constraint;\n    this.requires = rawComponent.requires;\n    this.prototype_id = rawComponent.prototype_id;\n  }\n}\n\n/**\n * State user selection\n *\n * @class StatePost\n */\nexport class StatePost {\n  private _data: Post[];\n\n  constructor() {\n    this._data = [];\n  }\n\n  private _compare(a: Post, b: Post) {\n    return a.host_id === b.host_id && a.service_id === b.service_id && a.component_id === b.component_id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  add(post: Post) {\n    const f = this._data.find((p) => this._compare(p, post));\n    if (!f) this._data.push(post);\n    else if (!f.id) f.id = post.id;\n  }\n\n  delete(post: Post) {\n    this._data = this._data.filter((p) => !this._compare(p, post));\n  }\n\n  clear() {\n    this._data = [];\n  }\n\n  update(data: Post[]) {\n    data.forEach((a) => this.add(new Post(a.host_id, a.service_id, a.component_id, a.id)));\n  }\n}\n/**\n *```\n  {\n    link: Tile;\n    linkSource: Tile[];\n    selected: Tile;\n  }\n  *```\n */\nexport interface IStream {\n  link: Tile;\n  linkSource: Tile[];\n  selected: Tile;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 97
            },
            "properties": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post[]",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "<p>State user selection</p>\n",
            "rawdescription": "\n\nState user selection\n\n",
            "methods": [
                {
                    "name": "_compare",
                    "args": [
                        {
                            "name": "a",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "data",
                            "type": "Post[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Post[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 107
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Tile",
            "id": "class-Tile-a875bd9ec8a9450bd7b364337c366dfb",
            "file": "src/app/shared/host-components-map/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IComponent, Host, IRequires } from '@app/core/types';\n\nexport type ActionParam = 'add' | 'remove';\nexport type TConstraintValue = number | '+' | 'odd' | 'depend';\nexport type TConstraint = TConstraintValue[];\n\nexport interface IRawHosComponent {\n  component: IComponent[];\n  host: Partial<Host>[];\n  hc: Post[];\n}\n\nexport interface Post {\n  id?: number;\n  host_id: number;\n  service_id: number;\n  component_id: number;\n}\n\nexport class Post implements Post {\n  constructor(public host_id: number, public service_id: number, public component_id: number, public id?: number) {}\n}\n\n/**\n *```\n  {\n    id: number;\n    name: string;\n    relations: Tile[] = [];\n    isSelected?: boolean;\n    isLink?: boolean;\n    limit?: Constraint;\n    disabled: boolean;\n    actions?: ActionParam[];\n    color?: 'none' | 'white' | 'gray' | 'yellow';\n    notification?: string;\n  }\n ```\n * @class Tile\n */\nexport class Tile {\n  id: number;\n  name: string;\n  relations: Tile[] = [];\n  isSelected?: boolean;\n  isLink?: boolean;\n  limit?: TConstraint;\n  disabled: boolean;\n  actions?: ActionParam[];\n  color?: 'none' | 'white' | 'gray' | 'yellow';\n  notification?: string;\n}\n\nexport class HostTile extends Tile {\n  constructor(rawHost: Partial<Host>) {\n    super();\n    this.id = rawHost.id;\n    this.name = rawHost.fqdn;\n  }\n}\n\nexport class CompTile extends Tile {\n  prototype_id: number;\n  service_id: number;\n  component: string;\n  requires: IRequires[];\n  constructor(rawComponent: IComponent, public actions?: ActionParam[]) {\n    super();\n    this.id = rawComponent.id;\n    this.service_id = rawComponent.service_id;\n    this.component = `${rawComponent.service_name}/${rawComponent.name}`;\n    this.name = rawComponent.display_name;\n    this.disabled = rawComponent.service_state !== 'created';\n    this.limit = rawComponent.constraint;\n    this.requires = rawComponent.requires;\n    this.prototype_id = rawComponent.prototype_id;\n  }\n}\n\n/**\n * State user selection\n *\n * @class StatePost\n */\nexport class StatePost {\n  private _data: Post[];\n\n  constructor() {\n    this._data = [];\n  }\n\n  private _compare(a: Post, b: Post) {\n    return a.host_id === b.host_id && a.service_id === b.service_id && a.component_id === b.component_id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  add(post: Post) {\n    const f = this._data.find((p) => this._compare(p, post));\n    if (!f) this._data.push(post);\n    else if (!f.id) f.id = post.id;\n  }\n\n  delete(post: Post) {\n    this._data = this._data.filter((p) => !this._compare(p, post));\n  }\n\n  clear() {\n    this._data = [];\n  }\n\n  update(data: Post[]) {\n    data.forEach((a) => this.add(new Post(a.host_id, a.service_id, a.component_id, a.id)));\n  }\n}\n/**\n *```\n  {\n    link: Tile;\n    linkSource: Tile[];\n    selected: Tile;\n  }\n  *```\n */\nexport interface IStream {\n  link: Tile;\n  linkSource: Tile[];\n  selected: Tile;\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionParam[]",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"none\" | \"white\" | \"gray\" | \"yellow\"",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TConstraint",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "notification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "relations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">{\nid: number;\nname: string;\nrelations: Tile[] = [];\nisSelected?: boolean;\nisLink?: boolean;\nlimit?: Constraint;\ndisabled: boolean;\nactions?: ActionParam[];\ncolor?: &#39;none&#39; | &#39;white&#39; | &#39;gray&#39; | &#39;yellow&#39;;\nnotification?: string;\n}</code></pre></div>",
            "rawdescription": "\n\n```\n{\nid: number;\nname: string;\nrelations: Tile[] = [];\nisSelected?: boolean;\nisLink?: boolean;\nlimit?: Constraint;\ndisabled: boolean;\nactions?: ActionParam[];\ncolor?: 'none' | 'white' | 'gray' | 'yellow';\nnotification?: string;\n}\n```\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UIOptions",
            "id": "class-UIOptions-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IUIoptions"
            ]
        },
        {
            "name": "YContainer",
            "id": "class-YContainer-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "YField",
            "id": "class-YField-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Yspec",
            "id": "class-Yspec-e7cc495d69a4fedb6c84456abf0fbd99",
            "file": "src/app/shared/configuration/tests/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IFieldOptions } from './../types';\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getControlType, getKey, getOptions, getValidator, getValue, TFormOptions, IOutput } from '../services/field.service';\n\nimport { IConfig, IConfigAttr, IFieldStack, ILimits, IPanelOptions, IUIoptions, stateType, TNForm, TValue } from '../types';\nimport { IYContainer, IYField, IYspec } from '../yspec/yspec.service';\n\nexport class YContainer {}\n\nexport class YField {}\n\nexport class Yspec {\n  constructor() {}\n}\n\nexport class UIOptions implements IUIoptions {}\n\nexport class Limits {\n  min: number;\n  max: number;\n  option: any;\n  read_only: stateType[];\n  active: boolean;\n  rules: IYField | IYContainer;\n  constructor(public yspec: IYspec) {}\n  set Rules(rules: IYField | IYContainer) {\n    this.rules = rules;\n  }\n}\n\nexport class FieldStack implements IFieldStack {\n  subname: string;\n  display_name: string;\n  default: TValue = null;\n  description?: string;\n  limits: ILimits;\n  ui_options: IUIoptions;\n\n  constructor(\n    id: number,\n    public type: TNForm,\n    public name: string = null,\n    public value = null,\n    public required = true,\n    public read_only = false,\n    public activatable = false\n  ) {\n    const dn = `field_${type}_${id}`;\n    this.name = !this.name ? dn : this.name;\n    this.subname = this.name === dn ? '' : `subname_${type}_${id}`;\n    this.display_name = `display_${this.name}_${this.subname}`;\n    this.value = getValue(this.type)(this.value, this.default, this.required);\n  }\n\n  set Limits(limits: ILimits) {\n    this.limits = limits;\n  }\n  set UIOptions(options: IUIoptions) {\n    this.ui_options = options;\n  }\n}\n\nexport class Configuration implements IConfig {\n  id?: number;\n  date?: string;\n  description?: string;\n  attr?: IConfigAttr;\n  constructor(public config: IFieldStack[]) {}\n}\n\nexport class FieldFactory {\n  public static addGroup(id: number, params: TNForm[]): IFieldStack[] {\n    const group = new FieldStack(id, 'group');\n    return params.reduce((p, c, i) => [...p, new FieldStack(i, c, group.name)], [group]);\n  }\n\n  /**\n   * return group if params as array\n   */\n  public static add(params: (TNForm | TNForm[])[]) {\n    return params.reduce<IFieldStack[]>(\n      (p, c, i) => [...p, ...(Array.isArray(c) ? this.addGroup(i, c) : [new FieldStack(i, c)])],\n      []\n    );\n  }\n}\n\nconst toPanel = (a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n});\n\nconst toField = (a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n});\n\nexport const toFormOptions = (data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n};\n\nexport const setValue = (data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    );\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ActionsDirective",
            "id": "directive-ActionsDirective-4a99492dc98d6050cef89c3777395d3d",
            "file": "src/app/shared/components/actions/actions.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { IAction } from '@app/core/types';\n\nimport { DialogComponent } from '../dialog.component';\nimport { ActionMasterComponent as component } from './master/master.component';\n\nexport interface ActionParameters {\n  cluster?: {\n    id: number;\n    hostcomponent: string;\n  };\n  actions: IAction[];\n}\n\n@Directive({\n  selector: '[appActions]'\n})\nexport class ActionsDirective {\n  @Input('appActions') inputData: ActionParameters;\n\n  constructor(private dialog: MatDialog) {}\n\n  @HostListener('click')\n  onClick() {\n    this.dialog.closeAll();\n    const dialogModel: MatDialogConfig = this.prepare();\n    this.dialog.open(DialogComponent, dialogModel);\n  }\n\n  prepare(): MatDialogConfig {\n    const maxWidth = '1400px';\n    const model = this.inputData;\n\n    if (!model.actions?.length) return { data: { title: 'No parameters for run the action', model: null, component: null } };\n\n    const act = model.actions[0];\n    const isMulty = model.actions.length > 1;\n\n    const width = isMulty || act.config?.config.length || act.hostcomponentmap?.length ? '90%' : '400px';\n    const title = act.ui_options?.disclaimer ? act.ui_options.disclaimer : isMulty ? 'Run an actions?' : `Run an action [ ${act.display_name} ]?`;\n\n    return {\n      width,\n      maxWidth,\n      data: {\n        title,\n        model,\n        component,\n      }\n    };\n  }\n}\n",
            "selector": "[appActions]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "ActionParameters"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "prepare",
                    "args": [],
                    "optional": false,
                    "returnType": "MatDialogConfig",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "AdwpListDirective",
            "id": "directive-AdwpListDirective-81b84d7ac1e15eb131c3e3aa3705da0a",
            "file": "src/app/abstract-directives/adwp-list.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnInit } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { IColumns, IListResult, Paging, RowEventData } from '@adwp-ui/widgets';\nimport { Sort } from '@angular/material/sort';\nimport { PageEvent } from '@angular/material/paginator';\n\nimport { ListDirective } from './list.directive';\nimport { AdwpBaseListDirective } from './adwp-base-list.directive';\nimport { BaseEntity, Entities } from '@app/core/types';\n\n@Directive({\n  selector: '[appAdwpList]',\n})\nexport abstract class AdwpListDirective<T> extends ListDirective implements OnInit {\n\n  abstract listColumns: IColumns<T>;\n\n  data$: BehaviorSubject<IListResult<T>> = new BehaviorSubject(null);\n\n  paging: BehaviorSubject<Paging> = new BehaviorSubject<Paging>(null);\n  sorting: BehaviorSubject<Sort> = new BehaviorSubject<Sort>(null);\n\n  defaultSort: Sort = { active: 'id', direction: 'desc' };\n\n  reload(data: IListResult<Entities>) {\n    this.data$.next(data as any);\n  }\n\n  initBaseListDirective() {\n    this.baseListDirective = new AdwpBaseListDirective(this, this.service, this.store);\n    this.baseListDirective.typeName = this.type;\n    this.baseListDirective.reload = this.reload.bind(this);\n    (this.baseListDirective as AdwpBaseListDirective).paging = this.paging;\n    (this.baseListDirective as AdwpBaseListDirective).sorting = this.sorting;\n    this.baseListDirective.init();\n  }\n\n  ngOnInit() {\n    this.initBaseListDirective();\n  }\n\n  clickRow(data: RowEventData) {\n    this.clickCell(data.event, 'title', data.row);\n  }\n\n  auxclickRow(data: RowEventData) {\n    this.clickCell(data.event, 'new-tab', data.row);\n  }\n\n  changeCount(count: number) {}\n\n  getPageIndex(): number {\n    return this.paging.value.pageIndex - 1;\n  }\n\n  getPageSize(): number {\n    return this.paging.value.pageSize;\n  }\n\n  onChangePaging(paging: Paging): void {\n    this.paging.next(paging);\n\n    const pageEvent = new PageEvent();\n    pageEvent.pageIndex = this.getPageIndex();\n    pageEvent.length = this.data$.value.count;\n    pageEvent.pageSize = this.getPageSize();\n\n    this.pageHandler(pageEvent);\n  }\n\n  onChangeSort(sort: Sort): void {\n    this.sorting.next(sort);\n    this.changeSorting(sort);\n  }\n\n  getSort(): Sort {\n    return this.sorting.value;\n  }\n\n  rewriteRow(row: BaseEntity) {\n    this.service.checkItem(row).subscribe((item) => Object.keys(row).map((a) => (row[a] = item[a])));\n  }\n\n  findRow(id: number): BaseEntity {\n    return this.data.data.find((item) => item.id === id);\n  }\n\n}\n",
            "selector": "[appAdwpList]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IListResult<T>>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "defaultSort",
                    "defaultValue": "{ active: 'id', direction: 'desc' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sort",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "listColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumns<T>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "paging",
                    "defaultValue": "new BehaviorSubject<Paging>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Paging>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sorting",
                    "defaultValue": "new BehaviorSubject<Sort>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Sort>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "auxclickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeCount",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRow",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BaseEntity",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageSize",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSort",
                    "args": [],
                    "optional": false,
                    "returnType": "Sort",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initBaseListDirective",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangePaging",
                    "args": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reload",
                    "args": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rewriteRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "BaseDetailAbstractDirective",
            "id": "directive-BaseDetailAbstractDirective-dbebb9f675cf1f93860242df7c87e5b9",
            "file": "src/app/abstract-directives/base-detail.abstract.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Injector, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, convertToParamMap, ParamMap } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\nimport { ChannelService, keyChannelStrim } from '../core/services';\nimport { ClusterService, WorkerInstance } from '../core/services/cluster.service';\nimport { EventMessage, getNavigationPath, setPathOfRoute, SocketState } from '../core/store';\nimport { EmmitRow, Host, IAction, Job } from '../core/types';\nimport { SocketListenerDirective } from '@app/shared/directives';\nimport { IDetails } from '@app/models/details';\nimport { AdcmEntity } from '../models/entity';\nimport { IIssues } from '../models/issue';\nimport { IssueHelper } from '../helpers/issue-helper';\nimport { ICluster } from '../models/cluster';\n\n@Directive({\n  selector: '[appBaseDetailAbstract]',\n})\nexport abstract class BaseDetailAbstractDirective extends SocketListenerDirective implements OnInit, OnDestroy {\n  subscription$: Subscription;\n  upgradable = false;\n  actions: IAction[] = [];\n  status: number | string;\n  issue: IIssues;\n  current: IDetails;\n  currentName = '';\n\n  navigationPath: Observable<AdcmEntity[]> = this.store.select(getNavigationPath).pipe(this.takeUntil());\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n  ) {\n    super(socket);\n  }\n\n  get Current() {\n    return this.service.Current;\n  }\n\n  initContext(param: ParamMap): Observable<WorkerInstance> {\n    return this.service.getContext(param);\n  }\n\n  ngOnInit(): void {\n    this.subscription$ = this.route.paramMap.pipe(\n      switchMap((param) => this.initContext(param)),\n      tap((w) => this.run(w)),\n      this.takeUntil(),\n    ).subscribe();\n\n    super.startListenSocket();\n  }\n\n  ngOnDestroy(): void {\n    this.service.clearWorker();\n  }\n\n  get isIssue() {\n    return IssueHelper.isIssue(this.issue);\n  }\n\n  run(w: WorkerInstance) {\n    const {\n      id,\n      name,\n      typeName,\n      action,\n      actions,\n      issue,\n      status,\n      prototype_name,\n      prototype_display_name,\n      prototype_version,\n      bundle_id,\n      state,\n    } = w.current;\n    const { upgradable, upgrade, hostcomponent } = w.current as ICluster;\n    const { log_files, objects } = w.current as Job;\n    const { provider_id } = w.current as Host;\n\n    this.currentName = name;\n    this.actions = actions;\n    this.upgradable = upgradable;\n    this.status = status;\n\n    const parent = w.current.typeName === 'cluster' ? null : w.cluster;\n    this.issue = issue;\n\n    this.current = {\n      parent,\n      id,\n      name,\n      typeName,\n      actions,\n      action,\n      issue,\n      upgradable,\n      upgrade,\n      status,\n      state,\n      log_files,\n      objects,\n      prototype_name,\n      prototype_display_name,\n      prototype_version,\n      provider_id,\n      bundle_id,\n      hostcomponent,\n    };\n  }\n\n  scroll(stop: { direct: -1 | 1 | 0; screenTop: number }) {\n    this.channel.next(keyChannelStrim.scroll, stop);\n  }\n\n  reset() {\n    if (this.subscription$) {\n      this.subscription$.unsubscribe();\n    }\n    this.subscription$ = this.service.reset().pipe(\n      this.takeUntil(),\n      tap((a) => this.run(a)),\n      this.takeUntil(),\n    ).subscribe();\n  }\n\n  socketListener(m: EventMessage) {\n    if ((m.event === 'create' || m.event === 'delete') && m.object.type === 'bundle') {\n      this.reset();\n      return;\n    }\n\n    const type = m.object.type === 'component' ? 'servicecomponent' : m.object.type;\n    if (this.Current?.typeName === type && this.Current?.id === m.object.id) {\n      if (this.service.Current.typeName === 'job' && (m.event === 'change_job_status' || m.event === 'add_job_log')) {\n        this.reset();\n        return;\n      }\n\n      if (m.event === 'change_state' || m.event === 'upgrade') {\n        this.reset();\n        return;\n      }\n\n      if (m.event === 'change_status') this.status = +m.object.details.value;\n    }\n\n  }\n\n  refresh(event: EmmitRow): void {\n    const { row } = event;\n\n    const params: ParamMap = convertToParamMap({ cluster: row.id });\n    this.store.dispatch(setPathOfRoute({ params }));\n\n  }\n}\n",
            "selector": "[appBaseDetailAbstract]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDetails",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "currentName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIssues",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "navigationPath",
                    "defaultValue": "this.store.select(getNavigationPath).pipe(this.takeUntil())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AdcmEntity[]>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "subscription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "upgradable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "initContext",
                    "args": [
                        {
                            "name": "param",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WorkerInstance>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "event",
                            "type": "EmmitRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EmmitRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "w",
                            "type": "WorkerInstance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "w",
                            "type": "WorkerInstance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scroll",
                    "args": [
                        {
                            "name": "stop",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stop",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "Current": {
                    "name": "Current",
                    "getSignature": {
                        "name": "Current",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                },
                "isIssue": {
                    "name": "isIssue",
                    "getSignature": {
                        "name": "isIssue",
                        "type": "",
                        "returnType": "",
                        "line": 76
                    }
                }
            }
        },
        {
            "name": "BaseDirective",
            "id": "directive-BaseDirective-7f95d972aa2e0bf28838c5beb72bc3dc",
            "file": "src/app/shared/directives/base.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnDestroy } from '@angular/core';\nimport { EventMessage } from '@app/core/store';\nimport { MonoTypeOperatorFunction, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[appBase]'\n})\nexport class BaseDirective implements OnDestroy {\n  destroy$ = new Subject();\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  takeUntil<T>(): MonoTypeOperatorFunction<T> {\n    return takeUntil<T>(this.destroy$);\n  }\n}\nexport interface ISocketListener {\n  socketListener: (m: EventMessage) => void;\n}\n",
            "selector": "[appBase]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "BaseFormDirective",
            "id": "directive-BaseFormDirective-a8060909d158ae3a5edc1970e85b3bef",
            "file": "src/app/shared/add-component/base-form.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { ADD_SERVICE_PROVIDER, IAddService } from '@app/shared/add-component/add-service-model';\n\n@Directive({\n  selector: '[appBaseForm]',\n})\nexport class BaseFormDirective extends BaseDirective {\n  form = new FormGroup({});\n\n  constructor(\n    @Inject(ADD_SERVICE_PROVIDER) public service: IAddService,\n    public dialog: MatDialog,\n  ) {\n    super();\n  }\n\n  onCancel(): void {\n    this.form.reset();\n    this.dialog.closeAll();\n  }\n\n  save() {}\n}\n",
            "selector": "[appBaseForm]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "IAddService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "IAddService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseMapListDirective",
            "id": "directive-BaseMapListDirective-c4849ca5fb4d9a382681ce222fff0dff",
            "file": "src/app/shared/form-elements/map.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Directive, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { FieldDirective } from './field.directive';\n\n@Directive({\n  selector: '[appBaseMapList]'\n})\nexport class BaseMapListDirective extends FieldDirective implements OnInit {\n  asList: boolean;\n  items = new FormArray([]);\n\n  constructor(private fb: FormBuilder) {\n    super();\n  }\n\n  ngOnInit() {\n    if (!Object.keys(this.field.value || {}).length) this.control.setValue('');\n    this.reload();\n    this.items.valueChanges.pipe(\n      this.takeUntil()\n    ).subscribe((a: { key: string; value: string }[]) => this.prepare(a));\n\n    this.control.statusChanges.pipe(\n      this.takeUntil()\n    ).subscribe((state) => {\n      if (state === 'DISABLED') {\n        this.items.controls.forEach((control) => {\n          control.disable({ emitEvent: false });\n        });\n      } else {\n        this.items.controls.forEach((control) => {\n          control.enable({ emitEvent: false });\n        });\n      }\n    });\n  }\n\n  prepare(a: { key: string; value: string }[]) {\n    let value = this.asList ? a.map(b => b.value).filter(c => c) : a.length ? a.reduce((p, c) => ({\n      ...p,\n      [c.key]: c.value\n    }), {}) : null;\n    if (value && this.asList) value = (value as Array<string>).length ? value : null;\n    this.control.setValue(value);\n  }\n\n  reload() {\n    this.items.reset([]);\n    this.items.controls = [];\n    const fieldValue = this.field.value ? { ...(this.field.value as Object) } : {};\n    Object.keys(fieldValue).forEach(a => this.items.push(this.fb.group({\n      key: [{ value: a, disabled: this.control.disabled }, Validators.required],\n      value: [{ value: fieldValue[a], disabled: this.control.disabled }],\n    })));\n  }\n\n  add() {\n    const group = this.fb.group({ key: ['', Validators.required], value: '' });\n    this.items.push(group);\n    group.controls['key'].markAsTouched();\n  }\n\n  check(item: FormGroup) {\n    return item.controls['key'].hasError('required');\n  }\n\n  clear(i: number) {\n    this.items.removeAt(i);\n  }\n}\n\n@Component({\n  selector: 'app-fields-list',\n  templateUrl: './map-list.template.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class FieldListComponent extends BaseMapListDirective {\n  asList = true;\n}\n\n@Component({\n  selector: 'app-fields-map',\n  templateUrl: './map-list.template.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class FieldMapComponent extends BaseMapListDirective {\n  asList = false;\n}\n",
            "selector": "[appBaseMapList]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "asList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "items",
                    "defaultValue": "new FormArray([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "check",
                    "args": [
                        {
                            "name": "item",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepare",
                    "args": [
                        {
                            "name": "a",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ColorOptionDirective",
            "id": "directive-ColorOptionDirective-ca251c92bac56e96d78d6d88c07663e2",
            "file": "src/app/shared/configuration/tools/color-option.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, AfterViewInit, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appColorOption]'\n})\nexport class ColorOptionDirective implements AfterViewInit {\n  \n  @Input('appColorOption')\n  colorOption: string;\n\n  constructor(private el: ElementRef, private render: Renderer2) { }\n\n  ngAfterViewInit(): void {\n    const pchb = this.el.nativeElement.firstElementChild;\n    this.render.setStyle(pchb, 'backgroundColor', this.colorOption);\n  }\n}\n",
            "selector": "[appColorOption]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appColorOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ConcernListDirective",
            "id": "directive-ConcernListDirective-97129e475fc97cc978e474980a72c99c",
            "file": "src/app/abstract-directives/concern-list.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\n\nimport { AdwpListDirective } from './adwp-list.directive';\nimport { ListService } from '../shared/components/list/list.service';\nimport { SocketState } from '../core/store';\nimport { ConcernService } from '../services/concern.service';\nimport { ConcernEventType } from '../models/concern/concern-reason';\n\n@Directive({\n  selector: '[appConcernList]',\n})\nexport abstract class ConcernListDirective<T> extends AdwpListDirective<T> implements OnInit {\n\n  abstract eventTypes: ConcernEventType[];\n\n  constructor(\n    protected service: ListService,\n    protected store: Store<SocketState>,\n    public route: ActivatedRoute,\n    public router: Router,\n    public dialog: MatDialog,\n    protected concernService: ConcernService,\n  ) {\n    super(service, store, route, router, dialog);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.concernService.events({ types: this.eventTypes })\n      .pipe(this.takeUntil())\n      .subscribe(resp => {\n        const row = this.findRow(resp.object.id);\n        if (row) {\n          this.rewriteRow(row);\n        }\n      });\n  }\n\n}\n",
            "selector": "[appConcernList]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "eventTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConcernEventType[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ConfigFieldMarker",
            "id": "directive-ConfigFieldMarker-7f8905d3248056843c8691d2f355bad7",
            "file": "src/app/shared/configuration/attributes/config-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[configField]'\n})\nexport class ConfigFieldMarker {\n  constructor(public template: TemplateRef<any>) {\n  }\n\n}\n",
            "selector": "[configField]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ConfirmEqualValidatorDirective",
            "id": "directive-ConfirmEqualValidatorDirective-5ed7a95456ab0cc12447d26b365cbcd8",
            "file": "src/app/shared/form-elements/confirm-equal-validator.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, Validator } from '@angular/forms';\n\n@Directive({\n  selector: '[appConfirmEqualValidator]',\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: ConfirmEqualValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class ConfirmEqualValidatorDirective implements Validator {\n  @Input() appConfirmEqualValidator: string;\n\n  validate(control: AbstractControl): { [key: string]: any } | null {\n    const controlToCompare = control.parent.controls[this.appConfirmEqualValidator];\n    if (controlToCompare && controlToCompare.value !== control.value) return { notEqual: true };\n    return null;\n  }\n}\n",
            "selector": "[appConfirmEqualValidator]",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: ConfirmEqualValidatorDirective, multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "appConfirmEqualValidator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "Validator"
            ]
        },
        {
            "name": "DetailAbstractDirective",
            "id": "directive-DetailAbstractDirective-0a1325c8cd7bd6be0aa9ca378bebb622",
            "file": "src/app/abstract-directives/detail.abstract.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { switchMap } from 'rxjs/operators';\nimport { Directive, OnInit } from '@angular/core';\n\nimport { BaseDetailAbstractDirective } from './base-detail.abstract.directive';\nimport { LeftMenuItem } from '@app/shared/details/left-menu/left-menu.component';\nimport { AdcmEntity } from '@app/models/entity';\nimport { EntityService } from '@app/abstract/entity-service';\n\n@Directive({\n  selector: '[appDetailAbstract]',\n})\nexport abstract class DetailAbstractDirective<EntityType extends AdcmEntity> extends BaseDetailAbstractDirective implements OnInit {\n\n  entity: EntityType;\n\n  abstract leftMenu: LeftMenuItem[];\n  protected abstract subjectService: EntityService<EntityType>;\n  abstract entityParam: string;\n\n  entityReceived(entity: EntityType): void {\n    this.entity = entity;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.route.params.pipe(\n      switchMap((params) => this.subjectService.get(params[this.entityParam])),\n      this.takeUntil(),\n    ).subscribe((entity) => this.entityReceived(entity));\n  }\n\n}\n",
            "selector": "[appDetailAbstract]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "entityParam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "leftMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeftMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DynamicDirective",
            "id": "directive-DynamicDirective-417b7397318b007b139d072bc712681f",
            "file": "src/app/shared/directives/dynamic.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef, EventEmitter } from '@angular/core';\n\n/**\n * @param name string required name action\n * @param data any\n */\nexport interface DynamicEvent {\n  name: string;\n  data?: any;\n}\n\nexport interface DynamicComponent {\n  event?: EventEmitter<any>;\n  model?: any;\n  onEnterKey?: () => void;\n}\n\n@Directive({\n  selector: '[appDynamic]',\n})\nexport class DynamicDirective {\n  constructor(public viewContainerRef: ViewContainerRef) {}\n}\n",
            "selector": "[appDynamic]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FieldDirective",
            "id": "directive-FieldDirective-ed712f4322fbb9bf0fca84c6dd7dec50",
            "file": "src/app/shared/form-elements/field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { IFieldOptions } from '../configuration/types';\nimport { BaseDirective } from '../directives';\n\n@Directive({\n  selector: '[appField]'\n})\nexport class FieldDirective extends BaseDirective implements OnInit {\n  @Input() form: FormGroup;\n  @Input() field: IFieldOptions;\n\n  ngOnInit() {\n    this.control.markAllAsTouched();\n  }\n\n  get control() {\n    return this.form.controls[this.field.name];\n  }\n\n  get isValid() {\n    if (this.field.read_only) return true;\n    const control = this.control;\n    return control.valid && (control.dirty || control.touched);\n  }\n\n  hasError(name: string) {\n    return this.control.hasError(name);\n  }\n}\n",
            "selector": "[appField]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions"
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "ForTestDirective",
            "id": "directive-ForTestDirective-4bddeac80fcef482d5dbd9695ebb0c2b",
            "file": "src/app/shared/directives/for-test.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appForTest]',\n})\nexport class ForTestDirective implements OnInit {\n  @Input('appForTest') attr: string;\n  constructor(private el: ElementRef) {}\n\n  ngOnInit() {\n    // old attrname = test\n    this.el.nativeElement.setAttribute('adcm_test', this.attr);\n  }\n}\n",
            "selector": "[appForTest]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appForTest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HolderDirective",
            "id": "directive-HolderDirective-0ac793ac5e8d784427b2a424b66c502e",
            "file": "src/app/shared/host-components-map/holder.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n  selector: '[appHolder]',\n})\nexport class HolderDirective {\n  ps: { short: HTMLElement; long: HTMLElement };\n\n  @Input('appHolder') set scroll(data: { direct: -1 | 1 | 0; scrollTop: number }) {\n    if (data) {\n      if (!this.ps) this.getPs();\n      else if (this.ps.short.clientHeight + data.scrollTop < this.ps.long.clientHeight) this.ps.short.style.marginTop = `${Math.floor(data.scrollTop)}px`;\n    }\n  }\n\n  constructor(private el: ElementRef) {}\n\n  getPs() {\n    const els: HTMLElement[] = [...this.el.nativeElement.children];\n    if (els.length) {\n      const a = els[0].querySelector<HTMLElement>('.wrapper'),\n        b = els[1].querySelector<HTMLElement>('.wrapper');\n      this.ps = a.clientHeight < b.clientHeight ? { short: a, long: b } : { short: b, long: a };\n    }\n  }\n}\n",
            "selector": "[appHolder]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appHolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "ps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getPs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "scroll": {
                    "name": "scroll",
                    "setSignature": {
                        "name": "scroll",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "HoverDirective",
            "id": "directive-HoverDirective-b5eb8ecc9a72e8fcaeb28fd53316e59b",
            "file": "src/app/entry/task/hover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, ContentChild, Renderer2 } from '@angular/core';\nimport { MatIcon } from '@angular/material/icon';\n\n@Directive({\n  selector: '[appHoverStatusTask]'\n})\nexport class HoverDirective {\n  @ContentChild('taskIcon') icon: MatIcon;\n  @HostListener('mouseover') onHover() {\n    const icon = this.icon._elementRef.nativeElement;\n    this.re.removeClass(icon, 'icon-locked');\n    icon.innerText = 'block';\n  }\n  @HostListener('mouseout') onOut() {\n    const icon = this.icon._elementRef.nativeElement;\n    this.re.addClass(icon, 'icon-locked');\n    icon.innerText = 'autorenew';\n  }\n  constructor(private re: Renderer2) {}\n}\n",
            "selector": "[appHoverStatusTask]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseout",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20
                }
            ],
            "propertiesClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatIcon",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'taskIcon'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                },
                {
                    "name": "onOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseout'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "re",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "re",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HoverDirective",
            "id": "directive-HoverDirective-ec340ca11b388c9173e1d8d44335b611-1",
            "file": "src/app/shared/directives/hover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appHover]',\n})\nexport class HoverDirective {\n  constructor(private el: ElementRef) {}\n\n  @HostListener('mouseenter')\n  onmouseenter() {\n    this.el.nativeElement.style.backgroundColor = 'rgba(255, 255, 255, 0.12)';\n    this.el.nativeElement.style.cursor = 'pointer';\n  }\n\n  @HostListener('mouseleave')\n  onmouseleave() {\n    this.el.nativeElement.style.backgroundColor = 'transparent';\n    this.el.nativeElement.style.cursor = 'defautl';\n  }\n}\n",
            "selector": "[appHover]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onmouseenter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                },
                {
                    "name": "onmouseleave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HoverDirective-1"
        },
        {
            "name": "InfinityScrollDirective",
            "id": "directive-InfinityScrollDirective-b6ddac5ac67b6dfcc2a9f719cbc4112c",
            "file": "src/app/shared/directives/infinity-scroll.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Renderer2, Host, OnInit, Output, EventEmitter } from '@angular/core';\nimport { MatSelect } from '@angular/material/select';\n\nconst POINT_WHEN_EMMIT = 100;\n\n@Directive({\n  selector: '[appInfinityScroll]',\n})\nexport class InfinityScrollDirective implements OnInit {\n  @Output() topScrollPoint = new EventEmitter();\n\n  constructor(private renderer: Renderer2, @Host() private el: MatSelect) {}\n\n  ngOnInit(): void {\n    if ('openedChange' in this.el) this.el.openedChange.subscribe((open: boolean) => this.registerPanel(open));\n    else this.renderer.listen(this.el, 'scroll', this.onScrollPanel.bind(this));\n  }\n\n  registerPanel(open: boolean) {\n    if (open) {\n      const panel = (this.el as MatSelect).panel.nativeElement;\n      this.renderer.listen(panel, 'scroll', this.onScrollPanel.bind(this));\n    }\n  }\n\n  onScrollPanel(event: any) {\n    const target = event.target;\n\n    const height = Array.from<HTMLElement>(target.children).reduce((p, c) => p + c.clientHeight, 0) - target.clientHeight;\n    if (target.scrollTop > height - POINT_WHEN_EMMIT) this.topScrollPoint.emit();\n  }\n}\n",
            "selector": "[appInfinityScroll]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "topScrollPoint",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScrollPanel",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerPanel",
                    "args": [
                        {
                            "name": "open",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "open",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "MatSelect",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "MatSelect",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ListDirective",
            "id": "directive-ListDirective-b2732117053d4e2c44a2067ed2b98ce7",
            "file": "src/app/abstract-directives/list.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, Inject, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatSort, Sort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BaseDirective, EventHelper } from '@adwp-ui/widgets';\n\nimport { EmmitRow, TypeName } from '@app/core/types';\nimport { BaseListDirective } from '@app/shared/components/list/base-list.directive';\nimport { SocketState } from '@app/core/store';\nimport { ListService } from '@app/shared/components/list/list.service';\nimport { DialogComponent } from '@app/shared/components';\nimport { StatusData } from '@app/components/columns/status-column/status-column.component';\nimport { ICluster } from '@app/models/cluster';\nimport { LIST_SERVICE_PROVIDER } from '@app/shared/components/list/list-service-token';\n\nenum Direction {\n  '' = '',\n  'asc' = '',\n  'desc' = '-',\n}\n\n@Directive({\n  selector: '[appAbstractList]',\n})\nexport abstract class ListDirective extends BaseDirective implements OnInit, OnDestroy {\n\n  @Input() type: TypeName;\n\n  baseListDirective: BaseListDirective;\n\n  current: any = {};\n\n  @Input()\n  columns: Array<string>;\n\n  @Output()\n  listItemEvt = new EventEmitter<EmmitRow>();\n\n  paginator: MatPaginator;\n\n  sort: MatSort;\n\n  data: MatTableDataSource<any> = new MatTableDataSource([]);\n\n  @Output() pageEvent = new EventEmitter<PageEvent>();\n\n  addToSorting = false;\n\n  @Input()\n  set dataSource(data: { results: any; count: number }) {\n    if (data) {\n      const list = data.results;\n      this.data = new MatTableDataSource<any>(list);\n      this.changeCount(data.count);\n      this.listItemEvt.emit({ cmd: 'onLoad', row: list[0] });\n    }\n  }\n\n  sortParam = '';\n\n  constructor(\n    @Inject(LIST_SERVICE_PROVIDER) protected service: ListService,\n    protected store: Store<SocketState>,\n    public route: ActivatedRoute,\n    public router: Router,\n    public dialog: MatDialog,\n  ) {\n    super();\n  }\n\n  changeCount(count: number): void {\n    this.paginator.length = count;\n  }\n\n  clickCell($e: MouseEvent, cmd?: string, row?: any, item?: any): void {\n    EventHelper.stopPropagation($e);\n    this.current = row;\n    this.listItemEvt.emit({ cmd, row, item });\n  }\n\n  ngOnInit(): void {\n    this.baseListDirective = new BaseListDirective(this, this.service, this.store);\n    this.baseListDirective.typeName = this.type;\n    this.baseListDirective.init();\n  }\n\n  ngOnDestroy(): void {\n    this.baseListDirective.destroy();\n    super.ngOnDestroy();\n  }\n\n  delete($event: MouseEvent, row: any): void {\n    EventHelper.stopPropagation($event);\n    this.dialog\n      .open(DialogComponent, {\n        data: {\n          title: `Deleting  \"${row.name || row.fqdn}\"`,\n          text: 'Are you sure?',\n          controls: ['Yes', 'No'],\n        },\n      })\n      .beforeClosed()\n      .pipe(filter((yes) => yes))\n      .subscribe(() => this.listItemEvt.emit({ cmd: 'delete', row }));\n  }\n\n  getPageIndex(): number {\n    return this.paginator.pageIndex;\n  }\n\n  getPageSize(): number {\n    return this.paginator.pageSize;\n  }\n\n  changeSorting(sort: Sort): void {\n    const _filter = this.route.snapshot.paramMap.get('filter') || '';\n    const pageIndex = this.getPageIndex();\n    const pageSize = this.getPageSize();\n    const ordering = this.getSortParam(sort);\n\n    this.router.navigate(\n      [\n        './',\n        {\n          page: pageIndex,\n          limit: pageSize,\n          filter: _filter,\n          ordering,\n        },\n      ],\n      { relativeTo: this.route }\n    );\n\n    this.sortParam = ordering;\n  }\n\n  getSortParam(a: Sort): string {\n    const params: { [key: string]: string[] } = {\n      prototype_version: ['prototype_display_name', 'prototype_version'],\n    };\n\n    if (a) {\n      const dumb = params[a.active] ? params[a.active] : [a.active],\n        active = dumb.map((b: string) => `${Direction[a.direction]}${b}`).join(',');\n\n      const current = this.sortParam;\n      if (current && this.addToSorting) {\n        const result = current\n          .split(',')\n          .filter((b) => dumb.every((d) => d !== b.replace('-', '')))\n          .join(',');\n        return [result, a.direction ? active : ''].filter((e) => e).join(',');\n      }\n\n      return a.direction ? active : '';\n    } else {\n      return '';\n    }\n  }\n\n  getSort(): Sort {\n    return this.sort;\n  }\n\n  pageHandler(pageEvent: PageEvent): void {\n    this.pageEvent.emit(pageEvent);\n    localStorage.setItem('limit', String(pageEvent.pageSize));\n    const f = this.route.snapshot.paramMap.get('filter') || '';\n    const ordering = this.getSortParam(this.getSort());\n    this.router.navigate(['./', { page: pageEvent.pageIndex, limit: pageEvent.pageSize, filter: f, ordering }], {\n      relativeTo: this.route,\n    });\n  }\n\n  gotoStatus(data: StatusData<ICluster>): void {\n    this.clickCell(data.event, data.action, data.row);\n  }\n\n}\n",
            "selector": "[appAbstractList]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Array<string>"
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "literal type"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "TypeName"
                }
            ],
            "outputsClass": [
                {
                    "name": "listItemEvt",
                    "defaultValue": "new EventEmitter<EmmitRow>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageEvent",
                    "defaultValue": "new EventEmitter<PageEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "addToSorting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "baseListDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseListDirective",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "current",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "data",
                    "defaultValue": "new MatTableDataSource([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "sortParam",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "changeCount",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSorting",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clickCell",
                    "args": [
                        {
                            "name": "$e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cmd",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cmd",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageSize",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSort",
                    "args": [],
                    "optional": false,
                    "returnType": "Sort",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSortParam",
                    "args": [
                        {
                            "name": "a",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gotoStatus",
                    "args": [
                        {
                            "name": "data",
                            "type": "StatusData<ICluster>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "StatusData<ICluster>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageHandler",
                    "args": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "MenuItemAbstractDirective",
            "id": "directive-MenuItemAbstractDirective-a01f00b70a77d7759db2385b1debcabb",
            "file": "src/app/abstract-directives/menu-item.abstract.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input } from '@angular/core';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { AdcmEntity } from '../models/entity';\n\n@Directive({\n  selector: '[appMenuItemAbstract]',\n})\nexport abstract class MenuItemAbstractDirective<EntityType extends AdcmEntity = AdcmEntity> extends BaseDirective {\n\n  protected _entity: EntityType;\n\n  @Input() label: string;\n  @Input() link: string;\n  @Input() get entity(): EntityType {\n      return this._entity;\n  }\n  set entity(value: EntityType) {\n      this._entity = value;\n  }\n  @Input() data: any;\n\n}\n",
            "selector": "[appMenuItemAbstract]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any"
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EntityType"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "accessors": {
                "entity": {
                    "name": "entity",
                    "setSignature": {
                        "name": "entity",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "EntityType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "EntityType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "entity",
                        "type": "",
                        "returnType": "EntityType",
                        "line": 15
                    }
                }
            }
        },
        {
            "name": "MTextareaDirective",
            "id": "directive-MTextareaDirective-be20a57ee4266c26b8475a8d6b07cdca",
            "file": "src/app/shared/directives/m-textarea.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input, OnDestroy, OnInit } from '@angular/core';\nimport { getProfile, ProfileService, ProfileState, setTextareaHeight } from '@app/core/store';\nimport { Store } from '@ngrx/store';\n\nimport { BaseDirective } from './base.directive';\n\n// textarea Material\nconst PADDING_TOP_BOTTOM = 16;\n\n@Directive({\n  selector: '[appMTextarea]',\n  providers: [ProfileService],\n})\nexport class MTextareaDirective extends BaseDirective implements OnInit, OnDestroy {\n  flag = false;\n  @Input('appMTextarea')\n  key: string;\n\n  constructor(private el: ElementRef, private profile: Store<ProfileState>) {\n    super();\n  }\n\n  @HostListener('mousedown')\n  mouseDown() {\n    this.flag = true;\n  }\n\n  ngOnInit(): void {\n    window.addEventListener('mouseup', () => {\n      this.profile\n        .select(getProfile)\n        .pipe(this.takeUntil())\n        .subscribe(p => {\n          const data = p.textarea;\n          const old = data[this.key];\n          const value = +this.el.nativeElement.offsetHeight - PADDING_TOP_BOTTOM;\n          if (this.flag && old !== value) this.profile.dispatch(setTextareaHeight({ key: this.key, value }));\n          this.flag = false;\n        });\n    });\n\n    this.profile\n      .select(getProfile)\n      .pipe(this.takeUntil())\n      .subscribe(p => {\n        const k = Object.keys(p.textarea).find(key => key === this.key);\n        if (k) (this.el.nativeElement as HTMLTextAreaElement).style.height = p.textarea[k] + 'px';\n      });\n  }\n}\n",
            "selector": "[appMTextarea]",
            "providers": [
                {
                    "name": "ProfileService"
                }
            ],
            "inputsClass": [
                {
                    "name": "appMTextarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mousedown",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                }
            ],
            "propertiesClass": [
                {
                    "name": "flag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "mouseDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profile",
                        "type": "Store<ProfileState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profile",
                        "type": "Store<ProfileState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MultiSortDirective",
            "id": "directive-MultiSortDirective-c283848e261b136d5b4037a8f5f58071",
            "file": "src/app/shared/components/list/multi-sort.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appMultiSort]',\n})\nexport class MultiSortDirective {\n  shiftKey = false;\n  private params: string[] = [];\n\n  @Input('appMultiSort') set sortParam(param: string) {\n    const el = this.el.nativeElement;\n    this.params = param.split(',');\n    this.hideAllArrows(el);\n    setTimeout(() => this.params.map((p) => this.preCell(p, el)), 0);\n  }\n\n  @Output() mousedownevent = new EventEmitter<boolean>();\n\n  @HostListener('mousedown', ['$event']) onmousedown(e: MouseEvent) {\n    this.shiftKey = e.shiftKey;\n    this.mousedownevent.emit(e.shiftKey);\n  }\n\n  @HostListener('mouseover', ['$event.target']) onmouseover(h: HTMLElement) {\n    const el = this.el.nativeElement;\n    this.params.map((p) => this.preCell(p, el));\n  }\n\n  @HostListener('mouseout', ['$event.target']) mouseleave(row: HTMLElement) {\n    const el = this.el.nativeElement;\n    setTimeout(() => this.params.map((p) => this.preCell(p, el)), 300);\n  }\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  hideAllArrows(el: any) {\n    Array.from<HTMLElement>(el.getElementsByTagName('mat-header-cell')).forEach((e) => {\n      const a = e.querySelector('div.mat-sort-header-container>div.mat-sort-header-arrow');\n      if (a) this.renderer.setStyle(a, 'opacity', 0);\n    });\n  }\n\n  preCell(p: string, el: HTMLElement) {\n    const direction = p[0] === '-' ? 'descending' : 'ascending',\n      active = p[0] === '-' ? p.substr(1) : p;\n\n    const column = el.querySelector(`mat-header-cell.mat-column-${active}`) || el.querySelector(`mat-header-cell[mat-sort-header=\"${active}\"]`);\n    if (p && column) {\n      this.renderer.setAttribute(column, 'aria-sort', direction);\n\n      const container = column.querySelector('div.mat-sort-header-container');\n      this.renderer.addClass(container, 'mat-sort-header-sorted');\n\n      const arrow = container.querySelector('div.mat-sort-header-arrow');\n      if (arrow) {\n        this.renderer.setStyle(arrow, 'opacity', 1);\n        this.renderer.setStyle(arrow, 'transform', 'translateY(0px)');\n\n        const indicator = arrow.querySelector('div.mat-sort-header-indicator');\n        this.renderer.setStyle(indicator, 'transform', direction === 'descending' ? 'translateY(10px)' : 'translateY(0px)');\n\n        if (direction === 'descending') {\n          const left = indicator.querySelector('.mat-sort-header-pointer-left');\n          this.renderer.setStyle(left, 'transform', 'rotate(45deg)');\n\n          const right = indicator.querySelector('.mat-sort-header-pointer-right');\n          this.renderer.setStyle(right, 'transform', 'rotate(-45deg)');\n        }\n      }\n    }\n  }\n}\n",
            "selector": "[appMultiSort]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appMultiSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "mousedownevent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30
                },
                {
                    "name": "mouseout",
                    "args": [
                        {
                            "name": "row",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40
                },
                {
                    "name": "mouseover",
                    "args": [
                        {
                            "name": "h",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                }
            ],
            "propertiesClass": [
                {
                    "name": "params",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "shiftKey",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "hideAllArrows",
                    "args": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseleave",
                    "args": [
                        {
                            "name": "row",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseout', ['$event.target']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onmousedown",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onmouseover",
                    "args": [
                        {
                            "name": "h",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover', ['$event.target']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "h",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "preCell",
                    "args": [
                        {
                            "name": "p",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sortParam": {
                    "name": "sortParam",
                    "setSignature": {
                        "name": "sortParam",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "param",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "param",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PopoverContentDirective",
            "id": "directive-PopoverContentDirective-0880cc0a0ba2915551e48a7dba5f219f",
            "file": "src/app/abstract-directives/popover-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { PopoverInput } from '../directives/popover.directive';\n\nexport type PopoverEventFunc = (event: any) => void;\n\n@Directive({\n  selector: '[appAbstractPopoverContent]',\n})\nexport abstract class PopoverContentDirective extends BaseDirective {\n\n  abstract data: PopoverInput;\n\n  event?: PopoverEventFunc;\n\n}\n",
            "selector": "[appAbstractPopoverContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverInput",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverEventFunc",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": []
        },
        {
            "name": "PopoverDirective",
            "id": "directive-PopoverDirective-828cf763235e75cd27e094ca706187a9",
            "file": "src/app/directives/popover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ComponentFactory, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, HostListener, Input, OnDestroy, OnInit, Renderer2, Type, ViewContainerRef, } from '@angular/core';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { PopoverComponent } from '@app/components/popover/popover.component';\nimport { PopoverContentDirective, PopoverEventFunc } from '@app/abstract-directives/popover-content.directive';\n\nexport interface PopoverInput { [inputKey: string]: any; }\n\n@Directive({\n  selector: '[appPopover]'\n})\nexport class PopoverDirective extends BaseDirective implements OnInit, OnDestroy {\n\n  containerRef: ComponentRef<PopoverComponent>;\n  factory: ComponentFactory<PopoverComponent>;\n  leaveListener: () => void;\n\n  shown = false;\n  timeoutId: any;\n\n  @Input() component: Type<PopoverContentDirective>;\n  @Input() data: PopoverInput = {};\n  @Input() event: PopoverEventFunc;\n  @Input() hideTimeout = 0;\n\n  constructor(\n    private elementRef: ElementRef,\n    public viewContainer: ViewContainerRef,\n    public componentFactoryResolver: ComponentFactoryResolver,\n    public renderer: Renderer2,\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.factory = this.componentFactoryResolver.resolveComponentFactory(PopoverComponent);\n  }\n\n  hideComponent() {\n    if (!this.timeoutId) {\n      this.timeoutId = setTimeout(() => {\n        this.clear();\n        this.shown = false;\n        this.timeoutId = undefined;\n      }, this.hideTimeout);\n    }\n  }\n\n  checkReEnter() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = undefined;\n    }\n  }\n\n  @HostListener('mouseenter') mouseEnter() {\n    this.checkReEnter();\n    if (this.component && !this.shown) {\n      this.containerRef = this.viewContainer.createComponent(this.factory);\n      this.containerRef.instance.component = this.component;\n      this.containerRef.instance.data = this.data;\n      this.containerRef.instance.event = this.event;\n\n      this.leaveListener = this.renderer.listen(\n        this.elementRef.nativeElement.parentElement,\n        'mouseleave',\n        () => this.hideComponent(),\n      );\n\n      this.renderer.listen(\n        this.containerRef.location.nativeElement,\n        'mouseenter',\n        () => this.checkReEnter(),\n      );\n\n      this.shown = true;\n    }\n  }\n\n  clear() {\n    if (this.containerRef) {\n      this.containerRef.destroy();\n    }\n\n    this.viewContainer.clear();\n\n    if (this.leaveListener) {\n      this.elementRef.nativeElement.parentElement.removeEventListener('mouseleave', this.leaveListener);\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.clear();\n  }\n\n}\n",
            "selector": "[appPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Type<PopoverContentDirective>"
                },
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "PopoverInput"
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "PopoverEventFunc"
                },
                {
                    "name": "hideTimeout",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentFactoryResolver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentFactoryResolver",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "containerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<PopoverComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "factory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentFactory<PopoverComponent>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "leaveListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "shown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "timeoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "viewContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkReEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ScrollDirective",
            "id": "directive-ScrollDirective-e2a0df59940a2b7306c7c01804345ad1",
            "file": "src/app/shared/directives/scroll.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n@Directive({\n  selector: '[appScroll]',\n})\nexport class ScrollDirective {\n  private scrollTop = 0;\n\n  @Output() read = new EventEmitter<{ direct: -1 | 1 | 0; scrollTop: number }>();\n\n  @HostListener('scroll', ['$event.target']) onscroll(e: Element) {\n\n    const { scrollHeight, scrollTop, clientHeight } = e;\n\n    if (scrollTop < this.scrollTop) this.read.emit({ direct: -1, scrollTop });\n    else this.read.emit( { direct: 1, scrollTop });    \n    \n    if (scrollHeight <= scrollTop + clientHeight) this.read.emit({ direct: 0, scrollTop });\n\n    this.scrollTop = scrollTop;\n\n  }\n}\n",
            "selector": "[appScroll]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "read",
                    "defaultValue": "new EventEmitter<{ direct: -1 | 1 | 0; scrollTop: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "scroll",
                    "args": [
                        {
                            "name": "e",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                }
            ],
            "propertiesClass": [
                {
                    "name": "scrollTop",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onscroll",
                    "args": [
                        {
                            "name": "e",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'scroll', ['$event.target']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "SocketListenerDirective",
            "id": "directive-SocketListenerDirective-fa0c54661488f8a796fa76d8835736e4",
            "file": "src/app/shared/directives/socketListener.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { filter, tap } from 'rxjs/operators';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { EventMessage, getMessage, SocketState, clearMessages } from '@app/core/store';\n\n@Directive({\n  selector: '[appBase]',\n})\n@Injectable()\nexport class SocketListenerDirective extends BaseDirective implements OnDestroy {\n  socket$ = this.socket.pipe(this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object));\n\n  constructor(private socket: Store<SocketState>) {\n    super();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.socket.dispatch(clearMessages());\n  }\n\n  startListenSocket(): void {\n    this.socket$.pipe(\n      tap(m => this.socketListener(m))\n    ).subscribe();\n  }\n\n  socketListener(m: EventMessage) {\n    console.warn('No implemented socketListener method', m);\n  }\n}\n",
            "selector": "[appBase]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "socket$",
                    "defaultValue": "this.socket.pipe(this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startListenSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StatusAbstractDirective",
            "id": "directive-StatusAbstractDirective-9e65b4957844903d90f9c54452cc2f0f",
            "file": "src/app/abstract-directives/status.abstract.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnInit, ViewChild } from '@angular/core';\nimport { BaseDirective } from '@adwp-ui/widgets';\nimport { BehaviorSubject } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\nimport { StatusTreeSubject } from '../models/status-tree';\nimport { Folding } from '../components/status-tree/status-tree.component';\nimport { EventMessage, selectMessage, SocketState } from '../core/store';\nimport { HavingStatusTreeAbstractService } from '../abstract/having-status-tree.abstract.service';\nimport { AdcmEntity } from '@app/models/entity';\n\n@Directive({\n  selector: '[appStatusAbstract]',\n})\nexport abstract class StatusAbstractDirective<StatusTreeType extends StatusTreeSubject, EntityType extends AdcmEntity> extends BaseDirective implements OnInit {\n\n  @ViewChild('tree', { static: false }) tree: any;\n\n  loading = false;\n\n  entity: EntityType;\n  entityId: number;\n  statusTree = new BehaviorSubject<StatusTreeType>(null);\n\n  folding: Folding;\n\n  abstract getEntityIdFromParams(params: Params): number;\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected store: Store<SocketState>,\n    public entityService: HavingStatusTreeAbstractService<StatusTreeType, EntityType>,\n  ) {\n    super();\n  }\n\n  eventReceived(event: EventMessage): void {}\n\n  prepareListeners() {\n    return this.store.pipe(\n      selectMessage,\n      this.takeUntil(),\n      filter(event => event.event === 'change_status'),\n    ).subscribe((event: EventMessage) => this.eventReceived(event));\n  }\n\n  prepareStatusTree(input: StatusTreeType): StatusTreeType {\n    return input;\n  }\n\n  pipeData(): any {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(\n      this.takeUntil(),\n      tap(() => this.loading = true),\n      tap(() => this.folding = Folding.Expanded),\n      tap((params) => this.entityId = this.getEntityIdFromParams(params)),\n      switchMap(() => this.entityService.get(this.entityId)),\n      tap(entity => this.entity = entity),\n      switchMap(() => this.entityService.getStatusTree(this.entityId)),\n    ).subscribe((resp) => {\n      this.loading = false;\n      this.statusTree.next(this.prepareStatusTree(resp));\n      this.prepareListeners();\n    });\n  }\n\n  expandCollapseAll() {\n    if (this.tree.hasCollapsed()) {\n      this.tree.expandAll();\n    } else {\n      this.tree.collapseAll();\n    }\n  }\n\n}\n",
            "selector": "[appStatusAbstract]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "entityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HavingStatusTreeAbstractService<StatusTreeType | EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "folding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Folding",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "statusTree",
                    "defaultValue": "new BehaviorSubject<StatusTreeType>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "eventReceived",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expandCollapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEntityIdFromParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pipeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTreeType",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entityService",
                        "type": "HavingStatusTreeAbstractService<StatusTreeType | EntityType>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityService",
                        "type": "HavingStatusTreeAbstractService<StatusTreeType | EntityType>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-d74b801f6035df70b2158fb08675c0c8",
            "file": "src/app/shared/components/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\nimport { EventHelper } from '@adwp-ui/widgets';\n\nimport { BaseEntity } from '@app/core/types/api';\nimport { ComponentName, PositionType, TooltipService } from '../tooltip/tooltip.service';\n\n@Directive({\n  selector: '[appTooltip]',\n})\nexport class TooltipDirective {\n  @Input() appTooltip: string | BaseEntity;\n  @Input() appTooltipPosition: PositionType = 'bottom';\n  @Input() appTooltipComponent: ComponentName;\n\n  /**\n   * TODO: To show tooltip by condition [04.12.2019]\n   * ConditionType - under construction,\n   * Now - one the condition this is width and scroll of source\n   * tooltip.component.ts line: 118 checkBuild()\n   */\n  @Input() appTooltipShowByCondition: boolean;\n\n  constructor(private el: ElementRef, private tooltip: TooltipService) {}\n\n  @HostListener('mouseenter', ['$event']) menter(e: MouseEvent): void {\n    EventHelper.stopPropagation(e);\n    const options = {\n      content: this.appTooltip,\n      componentName: this.appTooltipComponent,\n      position: this.appTooltipPosition,\n      condition: this.appTooltipShowByCondition,\n    };\n    if (this.appTooltip) this.tooltip.show(e, this.el.nativeElement, options);\n  }\n\n  @HostListener('mouseleave') mleave(): void {\n    this.tooltip.hide();\n  }\n\n  @HostListener('click') mclick(): void {\n    this.tooltip.hide(true);\n  }\n}\n",
            "selector": "[appTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string | BaseEntity"
                },
                {
                    "name": "appTooltipComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ComponentName"
                },
                {
                    "name": "appTooltipPosition",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "PositionType"
                },
                {
                    "name": "appTooltipShowByCondition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "TODO: To show tooltip by condition [04.12.2019]\nConditionType - under construction,\nNow - one the condition this is width and scroll of source\ntooltip.component.ts line: 118 checkBuild()",
                    "description": "<p>TODO: To show tooltip by condition [04.12.2019]\nConditionType - under construction,\nNow - one the condition this is width and scroll of source\ntooltip.component.ts line: 118 checkBuild()</p>\n",
                    "line": 32,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51
                },
                {
                    "name": "mouseenter",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "mclick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "menter",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mleave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tooltip",
                        "type": "TooltipService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tooltip",
                        "type": "TooltipService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "ActionListComponent",
            "id": "component-ActionListComponent-b73a6cb5f4edff543cabc7c54faff0b1",
            "file": "src/app/shared/components/actions/action-list/action-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-list",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  *ngIf=\"!asButton; else btn\"\n  mat-icon-button\n  color=\"accent\"\n  [disabled]=\"disabled\"\n  [matMenuTriggerFor]=\"panel.menu\"\n  (click)=\"getData()\"\n  matTooltip=\"Choose action\"\n>\n  <mat-icon>play_circle_outline</mat-icon>\n</button>\n<ng-template #btn>\n  <button\n    mat-raised-button\n    color=\"accent\"\n    [disabled]=\"disabled\"\n    [matMenuTriggerFor]=\"panel.menu\"\n    (click)=\"getData()\"\n  >\n    <span>Run action</span>\n    &nbsp;\n    <mat-icon class=\"icon-locked running\" *ngIf=\"state === 'locked'; else pi\">autorenew</mat-icon>\n    <ng-template #pi><mat-icon>play_circle_outline</mat-icon></ng-template>\n  </button>\n</ng-template>\n<app-menu-item #panel [items]=\"actions$ | async\" [cluster]=\"cluster\"></app-menu-item>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": true,
                    "deprecationMessage": "in the fight against caching",
                    "jsdoctags": [
                        {
                            "pos": 1857,
                            "end": 1901,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 321,
                            "tagName": {
                                "pos": 1858,
                                "end": 1868,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>in the fight against caching</p>\n"
                        }
                    ],
                    "line": 59,
                    "type": "{}"
                },
                {
                    "name": "asButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean"
                },
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "literal type"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean"
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IAction[]>",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IAction } from '@app/core/types';\nimport { Observable } from 'rxjs';\n\nimport { ActionsService } from '../actions.service';\n\n@Component({\n  selector: 'app-action-list',\n  template: `\n    <button\n      *ngIf=\"!asButton; else btn\"\n      mat-icon-button\n      color=\"accent\"\n      [disabled]=\"disabled\"\n      [matMenuTriggerFor]=\"panel.menu\"\n      (click)=\"getData()\"\n      matTooltip=\"Choose action\"\n    >\n      <mat-icon>play_circle_outline</mat-icon>\n    </button>\n    <ng-template #btn>\n      <button\n        mat-raised-button\n        color=\"accent\"\n        [disabled]=\"disabled\"\n        [matMenuTriggerFor]=\"panel.menu\"\n        (click)=\"getData()\"\n      >\n        <span>Run action</span>\n        &nbsp;\n        <mat-icon class=\"icon-locked running\" *ngIf=\"state === 'locked'; else pi\">autorenew</mat-icon>\n        <ng-template #pi><mat-icon>play_circle_outline</mat-icon></ng-template>\n      </button>\n    </ng-template>\n    <app-menu-item #panel [items]=\"actions$ | async\" [cluster]=\"cluster\"></app-menu-item>\n  `,\n})\nexport class ActionListComponent {\n  @Input() cluster: { id: number; hostcomponent: string };\n  @Input() disabled: boolean;\n  @Input() asButton = false;\n  @Input() actionLink: string;\n  @Input() state: string;\n\n  /**\n   * @deprecated in the fight against caching\n   */\n  @Input() actions = [];\n\n  actions$: Observable<IAction[]>;\n\n  constructor(private service: ActionsService) {}\n\n  getData(): void {\n    // if (!this.actions.length) ADCM-1505 it's possible cache after finished job\n    this.actions$ = this.service.getActions(this.actionLink); //.subscribe((a) => (this.actions = a));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ActionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ActionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ActionMasterComponent",
            "id": "component-ActionMasterComponent-68dbd4ca65382ae9a71958c5b56e1f40",
            "file": "src/app/shared/components/actions/master/master.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MasterService"
                }
            ],
            "selector": "app-master",
            "styleUrls": [],
            "styles": [
                "\n      .action-button {\n        background: none !important;\n        margin: 6px 0;\n\n        &:hover {\n          background: rgba(255, 255, 255, 0.04) !important;\n        }\n      }\n\n      .controls-container {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n    "
            ],
            "templateUrl": [
                "./master.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "event",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<DynamicEvent>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionParameters",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "runBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'runBtn', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "whatShow",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "verbose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "choose",
                    "args": [
                        {
                            "name": "action",
                            "type": "IAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDisabled",
                    "args": [
                        {
                            "name": "value",
                            "type": "IValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "IValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnterKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "value",
                            "type": "IValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "IValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, OnInit, ViewChild } from '@angular/core';\nimport { IAction } from '@app/core/types';\nimport { DynamicComponent, DynamicEvent } from '@app/shared/directives/dynamic.directive';\n\nimport { BaseDirective } from '../../../directives/base.directive';\nimport { ActionParameters } from '../actions.directive';\n\nimport { IMasterData, IValue, MasterService, whatShow } from './master.service';\n\n@Component({\n  selector: 'app-master',\n  templateUrl: './master.component.html',\n  styles: [\n    `\n      .action-button {\n        background: none !important;\n        margin: 6px 0;\n\n        &:hover {\n          background: rgba(255, 255, 255, 0.04) !important;\n        }\n      }\n\n      .controls-container {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n    `,\n  ],\n  providers: [MasterService],\n})\nexport class ActionMasterComponent extends BaseDirective implements DynamicComponent, OnInit {\n  event: EventEmitter<DynamicEvent> = new EventEmitter();\n  model: ActionParameters;\n  action: IAction;\n  show: whatShow;\n\n  verbose = false;\n\n  @ViewChild('runBtn', { read: ElementRef }) runBtn: ElementRef;\n\n  constructor(private service: MasterService) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.model.actions.length === 1) this.choose(this.model.actions[0]);\n  }\n\n  choose(action: IAction) {\n    this.action = action;\n    this.show = this.service.spotShow(action);\n  }\n\n  isDisabled(value: IValue) {\n    return value && ((value.hostmap && value.hostmap.noValid) || (value.config && !value.config.form?.valid));\n  }\n\n  run(value: IValue = {}) {\n    const data: IMasterData = this.service.parseData(value);\n    if (data) {\n      data.verbose = this.verbose;\n    }\n    this.service\n      .send(this.action.run, data)\n      .pipe(this.takeUntil())\n      .subscribe(() => this.cancel());\n  }\n\n  onEnterKey() {\n    this.runBtn.nativeElement.click();\n  }\n\n  cancel() {\n    this.event.emit({ name: 'cancel' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .action-button {\n        background: none !important;\n        margin: 6px 0;\n\n        &:hover {\n          background: rgba(255, 255, 255, 0.04) !important;\n        }\n      }\n\n      .controls-container {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MasterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MasterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "DynamicComponent",
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"model?.actions.length === 0\">\n  <p>No data for the action!</p>\n</ng-container>\n\n<ng-container *ngIf=\"!action; else simple\">\n  <i>Let's choose first</i>\n  <mat-action-list>\n    <button class=\"action-button warn\" color=\"primary\" mat-list-item *ngFor=\"let action of model.actions\"\n      (click)=\"choose(action)\">{{ action.display_name }}</button>\n  </mat-action-list>\n  <p><button mat-raised-button (click)=\"cancel()\" color=\"primary\">Cancel</button></p>\n</ng-container>\n\n<ng-template #simple>\n  <div *ngIf=\"show === 'none'\">\n    <ng-container *ngTemplateOutlet=\"controls; context: { value: undefined }\"></ng-container>\n  </div>\n\n  <div *ngIf=\"show === 'config'\">\n    <app-action-master-config [action]=\"action\" #wc></app-action-master-config>\n    <ng-container *ngTemplateOutlet=\"controls; context: { value: { config: wc.fields } }\"></ng-container>\n  </div>\n\n  <div *ngIf=\"show === 'hostmap'\">\n    <app-service-host [tabIndex]=\"2\" [cluster]=\"model.cluster\" [hideButton]=\"true\" #hostmap\n      [actionParameters]=\"action.hostcomponentmap\" [fixedButton]=\"false\"></app-service-host>\n    <ng-container *ngTemplateOutlet=\"controls; context: { value: { hostmap: hostmap } }\"></ng-container>\n  </div>\n\n  <mat-horizontal-stepper #stepper linear *ngIf=\"show === 'stepper'\">\n    <mat-step [stepControl]=\"wcs.fields.form\">\n      <ng-template matStepLabel>Configuration</ng-template>\n      <app-action-master-config [action]=\"action\" #wcs></app-action-master-config>\n      <div class=\"controls\">\n        <button mat-raised-button (click)=\"cancel()\" color=\"primary\">Cancel</button>\n        <button mat-raised-button matStepperNext color=\"primary\">Next</button>\n      </div>\n    </mat-step>\n    <mat-step>\n      <ng-template matStepLabel>Host Components</ng-template>\n      <app-service-host [tabIndex]=\"2\" [cluster]=\"model.cluster\" #hms [hideButton]=\"true\"\n        [actionParameters]=\"action.hostcomponentmap\" [fixedButton]=\"false\"></app-service-host>\n      <ng-container *ngTemplateOutlet=\"controls; context: { value: { config: wcs.fields, hostmap: hms } }\">\n      </ng-container>\n    </mat-step>\n    <mat-step label=\"Done\"></mat-step>\n  </mat-horizontal-stepper>\n\n</ng-template>\n\n<ng-template #controls let-value=\"value\">\n  <div class=\"controls-container\">\n\n    <mat-checkbox [(ngModel)]=\"verbose\">Verbose</mat-checkbox>\n\n    <div class=\"controls\">\n      <ng-container *ngIf=\"model.actions.length > 1\">\n        <button mat-raised-button color=\"primary\" (click)=\"action = null\">Back</button>\n        <span [style.flex]=\"1\"></span>\n      </ng-container>\n\n      <button mat-raised-button (click)=\"cancel()\" color=\"primary\" tabindex=\"-1\">Cancel</button>\n      <button mat-raised-button #runBtn (click)=\"run(value)\" color=\"accent\" [disabled]=\"isDisabled(value)\" tabindex=\"1\">\n        Run\n      </button>\n    </div>\n\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ActionMasterConfigComponent",
            "id": "component-ActionMasterConfigComponent-01ad5f1230b2cda12feb3512193d26b9",
            "file": "src/app/shared/components/actions/master/action-master-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-master-config",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"config-tools\">\n  <mat-checkbox [(ngModel)]=\"advanced\" *ngIf=\"fields.isAdvanced\">Advanced</mat-checkbox>\n</div>\n<app-config-fields #fields [model]=\"action?.config\" [ngStyle]=\"{ display: 'inherit' }\"></app-config-fields>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IAction"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fields",
                    "defaultValue": "{} as ConfigFieldsComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigFieldsComponent",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fields'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\nimport { IAction } from '@app/core/types';\nimport { FieldService } from '@app/shared/configuration/services/field.service';\nimport { ConfigFieldsComponent } from '@app/shared/configuration/fields/fields.component';\n\n@Component({\n  selector: 'app-action-master-config',\n  template: `\n    <div class=\"config-tools\">\n      <mat-checkbox [(ngModel)]=\"advanced\" *ngIf=\"fields.isAdvanced\">Advanced</mat-checkbox>\n    </div>\n    <app-config-fields #fields [model]=\"action?.config\" [ngStyle]=\"{ display: 'inherit' }\"></app-config-fields>\n  `,\n})\nexport class ActionMasterConfigComponent {\n  @Input() action: IAction;\n\n  @ViewChild('fields') fields: ConfigFieldsComponent = {} as ConfigFieldsComponent;\n\n  set advanced(value: boolean) {\n    this.config.filterApply(this.fields.dataOptions, { advanced: value, search: '' });\n  }\n\n  constructor(private config: FieldService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "advanced": {
                    "name": "advanced",
                    "setSignature": {
                        "name": "advanced",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ActionsButtonComponent",
            "id": "component-ActionsButtonComponent-20d379ab2d05757a48d0fabebf3eecca",
            "file": "src/app/components/actions-button/actions-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-actions-button",
            "styleUrls": [
                "./actions-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./actions-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "T"
                }
            ],
            "outputsClass": [
                {
                    "name": "onMouseenter",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "EventHelper",
                    "defaultValue": "EventHelper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getClusterData",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: any; hostcomponent: any; action: any; }",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BaseDirective, EventHelper } from '@adwp-ui/widgets';\n\nimport { BaseEntity } from '@app/core/types';\n\n@Component({\n  selector: 'app-actions-button',\n  templateUrl: './actions-button.component.html',\n  styleUrls: ['./actions-button.component.scss']\n})\nexport class ActionsButtonComponent<T extends BaseEntity> extends BaseDirective {\n\n  EventHelper = EventHelper;\n\n  @Input() row: T;\n\n  @Output() onMouseenter = new EventEmitter<T>();\n\n  getClusterData(row: any) {\n    const { id, hostcomponent } = row.cluster || row;\n    const { action } = row;\n    return { id, hostcomponent, action };\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./actions-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseDirective",
            "templateData": "<app-concern-list-ref\n  *ngIf=\"row?.locked; else actions\"\n  [concerns]=\"row?.concerns\"\n  (mouseenter)=\"onMouseenter.emit(row)\"\n></app-concern-list-ref>\n\n<ng-template #actions>\n  <app-action-list\n    *ngIf=\"row\"\n    (click)=\"EventHelper.stopPropagation($event)\"\n    [actionLink]=\"row?.action\"\n    [cluster]=\"getClusterData(row)\"\n  ></app-action-list>\n</ng-template>\n"
        },
        {
            "name": "ActionsComponent",
            "id": "component-ActionsComponent-be4b635a5be5a21612ac922757aba43d",
            "file": "src/app/shared/components/actions/actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-actions",
            "styleUrls": [
                "./actions.component.scss"
            ],
            "styles": [],
            "template": "<div #wrap>\n  <button\n    tabindex=\"-1\"\n    *ngFor=\"let action of actions\"\n    #button\n    mat-stroked-button\n    color=\"warn\"\n    [appForTest]=\"'action_btn'\"\n    [disabled]=\"isIssue\"\n    [appActions]=\"{ cluster: cluster, actions: [action] }\"\n  >\n    {{ action.display_name }}\n  </button>\n</div>\n<button mat-icon-button [matMenuTriggerFor]=\"menu\" #more class=\"button-more\">\n  <mat-icon>more_vert</mat-icon>\n</button>\n<mat-menu #menu=\"matMenu\" class=\"menu-more\">\n  <button\n    tabindex=\"-1\"\n    mat-stroked-button\n    color=\"warn\"\n    class=\"menu-more-action\"\n    *ngFor=\"let a of forMenu\"\n    [appForTest]=\"'action_btn'\"\n    [disabled]=\"isIssue\"\n    [appActions]=\"{ cluster: cluster, actions: [a] }\"\n  >\n    {{ a.display_name }}\n  </button>\n</mat-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "literal type"
                },
                {
                    "name": "isIssue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean"
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'button', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "forMenu",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "more",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'more', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "stateButtons",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "trigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger, {static: true}"
                        }
                    ]
                },
                {
                    "name": "wrap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'wrap', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "calcWidth",
                    "args": [
                        {
                            "name": "w",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bw",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "w",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bw",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onresize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewChecked, Component, ElementRef, Input, OnInit, QueryList, Renderer2, ViewChild, ViewChildren } from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { IAction } from '@app/core/types';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime, tap } from 'rxjs/operators';\n\nimport { BaseDirective } from '../../directives/base.directive';\n\n@Component({\n  selector: 'app-actions',\n  template: `\n    <div #wrap>\n      <button\n        tabindex=\"-1\"\n        *ngFor=\"let action of actions\"\n        #button\n        mat-stroked-button\n        color=\"warn\"\n        [appForTest]=\"'action_btn'\"\n        [disabled]=\"isIssue\"\n        [appActions]=\"{ cluster: cluster, actions: [action] }\"\n      >\n        {{ action.display_name }}\n      </button>\n    </div>\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\" #more class=\"button-more\">\n      <mat-icon>more_vert</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\" class=\"menu-more\">\n      <button\n        tabindex=\"-1\"\n        mat-stroked-button\n        color=\"warn\"\n        class=\"menu-more-action\"\n        *ngFor=\"let a of forMenu\"\n        [appForTest]=\"'action_btn'\"\n        [disabled]=\"isIssue\"\n        [appActions]=\"{ cluster: cluster, actions: [a] }\"\n      >\n        {{ a.display_name }}\n      </button>\n    </mat-menu>\n  `,\n  styleUrls: ['./actions.component.scss'],\n})\nexport class ActionsComponent extends BaseDirective implements OnInit, AfterViewChecked {\n  actions: IAction[] = [];\n\n  @Input() isIssue: boolean;\n  @Input() cluster: { id: number; hostcomponent: string };\n  @Input() set source(actions: IAction[]) {\n    this.actions = actions;\n    if (!actions.length) this.render.setStyle(this.more.nativeElement, 'display', 'none');\n  }\n\n  stateButtons = 0;\n  forMenu: IAction[] = [];\n\n  @ViewChild('wrap', { read: ElementRef, static: true }) wrap: ElementRef;\n  @ViewChild('more', { read: ElementRef, static: true }) more: ElementRef;\n  @ViewChildren('button', { read: ElementRef }) buttons: QueryList<ElementRef>;\n  @ViewChild(MatMenuTrigger, { static: true }) trigger: MatMenuTrigger;\n\n  constructor(private render: Renderer2, private el: ElementRef) {\n    super();\n  }\n\n  ngOnInit() {\n    fromEvent(window, 'resize')\n      .pipe(\n        this.takeUntil(),\n        tap(() => this.trigger.closeMenu()),\n        debounceTime(500)\n      )\n      .subscribe(() => this.onresize());\n  }\n\n  ngAfterViewChecked(): void {\n    if (this.stateButtons !== this.buttons.length) {\n      this.stateButtons = this.buttons.length;\n      setTimeout(() => this.onresize(), 0);\n    }\n  }\n\n  onresize() {\n    const bw = this.buttons.map<number>((b) => b.nativeElement.offsetWidth + 10);\n    const elWidth = +this.el.nativeElement.clientWidth - 50;\n    const dw = this.calcWidth(elWidth, bw);\n    //\n    this.forMenu = this.actions.slice(dw[0]);\n    this.render.setStyle(this.wrap.nativeElement, 'width', `${dw[1]}px`);\n    this.render.setStyle(this.more.nativeElement, 'display', dw[2] ? 'block' : 'none');\n  }\n\n  calcWidth(w: number, bw: number[]): [number, number, boolean] {\n    return bw.reduce((p, c, i) => (p[2] || p[1] + c > w ? [p[0], p[1], true] : [i + 1, p[1] + c, false]), [0, 0, false]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: flex;\n    overflow: hidden;\n    width: 100%;\n    justify-content: flex-end;\n\n    & > div {\n        overflow: hidden;\n        margin-top: 4px;\n    }\n}\n\n.button-more {\n    display: none;\n}\n\n.menu-more-action {\n    display: block;\n    margin: 4px;\n}\n\nbutton {\n    margin-left: 10px;\n}\n",
                    "styleUrl": "./actions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "AfterViewChecked"
            ],
            "accessors": {
                "source": {
                    "name": "source",
                    "setSignature": {
                        "name": "source",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "actions",
                                "type": "IAction[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "actions",
                                "type": "IAction[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "AddButtonComponent",
            "id": "component-AddButtonComponent-93f92e3ae770a7c02b794002b8ed5639",
            "file": "src/app/shared/add-component/add-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-button",
            "styleUrls": [],
            "styles": [
                "button {margin-right: 6px;}"
            ],
            "template": "<ng-container *ngIf=\"!asIcon; else icon\">\n  <button [appForTest]=\"'create-btn'\" mat-raised-button color=\"accent\" (click)=\"showForm()\">\n    <mat-icon>library_add</mat-icon>&nbsp;<ng-content></ng-content>\n  </button>\n</ng-container>\n<ng-template #icon>\n  <button [appForTest]=\"'create-btn'\" mat-icon-button color=\"primary\" (click)=\"showForm()\">\n    <mat-icon>add</mat-icon>\n  </button>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "asIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Type<BaseFormDirective>"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "added",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "showForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, OnDestroy, Output, Type } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { DialogComponent } from '@app/shared/components';\nimport { BaseDirective } from '@app/shared/directives';\nimport { AddFormComponent } from './add-form.component';\nimport { ADD_SERVICE_PROVIDER, IAddService } from '@app/shared/add-component/add-service-model';\nimport { BaseFormDirective } from '@app/shared/add-component/base-form.directive';\n\n@Component({\n  selector: 'app-add-button',\n  template: `\n    <ng-container *ngIf=\"!asIcon; else icon\">\n      <button [appForTest]=\"'create-btn'\" mat-raised-button color=\"accent\" (click)=\"showForm()\">\n        <mat-icon>library_add</mat-icon>&nbsp;<ng-content></ng-content>\n      </button>\n    </ng-container>\n    <ng-template #icon>\n      <button [appForTest]=\"'create-btn'\" mat-icon-button color=\"primary\" (click)=\"showForm()\">\n        <mat-icon>add</mat-icon>\n      </button>\n    </ng-template>\n  `,\n  styles: ['button {margin-right: 6px;}'],\n})\nexport class AddButtonComponent extends BaseDirective implements OnDestroy {\n  @Input() asIcon = false;\n  @Input() name: string;\n  @Input() component: Type<BaseFormDirective>;\n  @Output() added = new EventEmitter();\n\n  constructor(@Inject(ADD_SERVICE_PROVIDER) private service: IAddService,\n              private dialog: MatDialog) {\n    super();\n  }\n\n  showForm(): void {\n    const model = this.service.model(this.name);\n    model.component = this.component;\n\n    const name = model.title || model.name;\n    const title = ['cluster', 'provider', 'host'];\n    this.dialog.open(DialogComponent, {\n      width: '75%',\n      maxWidth: '1400px',\n      data: {\n        title: `${title.includes(name) ? 'Create' : 'Add'} ${name}`,\n        component: AddFormComponent,\n        model,\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "button {margin-right: 6px;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "IAddService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "IAddService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "AddClusterComponent",
            "id": "component-AddClusterComponent-1a72eb27d779e6e25f38cc71fd9adb31",
            "file": "src/app/shared/add-component/add-cluster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-cluster",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [formGroup]=\"form\">\n  <app-bundles [form]=\"form\" [typeName]=\"'cluster'\" (prototypeChanged)=\"prototypeChanged($event)\"></app-bundles>\n  <app-input [form]=\"form\" [label]=\"'Cluster name'\" [controlName]=\"'name'\" [isRequired]=\"true\"></app-input>\n  <app-input [form]=\"form\" [label]=\"'Description'\" [controlName]=\"'description'\"></app-input>\n  <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "prototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StackBase",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sgn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prototypeChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { clearEmptyField, StackBase } from '@app/core/types';\nimport { BaseFormDirective } from './base-form.directive';\nimport { ICluster } from '@app/models/cluster';\n\n@Component({\n  selector: 'app-add-cluster',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <app-bundles [form]=\"form\" [typeName]=\"'cluster'\" (prototypeChanged)=\"prototypeChanged($event)\"></app-bundles>\n      <app-input [form]=\"form\" [label]=\"'Cluster name'\" [controlName]=\"'name'\" [isRequired]=\"true\"></app-input>\n      <app-input [form]=\"form\" [label]=\"'Description'\" [controlName]=\"'description'\"></app-input>\n      <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n    </ng-container>\n  `,\n})\nexport class AddClusterComponent extends BaseFormDirective implements OnInit, OnDestroy {\n\n  sgn: Subscription;\n  private prototype: StackBase;\n\n  ngOnInit() {\n    this.form = this.service.model('cluster').form;\n    this.sgn = this.service.genName(this.form);\n  }\n\n  ngOnDestroy() {\n    this.sgn.unsubscribe();\n  }\n\n  prototypeChanged(event: StackBase) {\n    this.prototype = event;\n  }\n\n  save() {\n    const data = clearEmptyField(this.form.value);\n    this.service\n      .add<ICluster>(data, 'cluster', this.prototype)\n      .pipe(take(1))\n      .subscribe((_) => this.onCancel());\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "BaseFormDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "AddConfigGroupComponent",
            "id": "component-AddConfigGroupComponent-78cf36b0bb911bad673967c298a8371f",
            "file": "src/app/config-groups/components/config-group-add/config-group-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: ADD_SERVICE_PROVIDER, useExisting: forwardRef(() => ConfigGroupAddService) }"
                }
            ],
            "selector": "app-config-group-add",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [formGroup]=\"form\">\n  <app-input [form]=\"form\" [label]=\"'Name'\" [controlName]=\"'name'\"></app-input>\n  <app-input [form]=\"form\" [label]=\"'Description'\" [controlName]=\"'description'\"></app-input>\n  <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, OnInit } from '@angular/core';\n\nimport { BaseFormDirective } from '../../../shared/add-component';\nimport { ADD_SERVICE_PROVIDER } from '../../../shared/add-component/add-service-model';\nimport { ConfigGroupAddService } from '../../service';\nimport { clearEmptyField } from '../../../core/types';\nimport { ConfigGroup } from '../../model';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-config-group-add',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <app-input [form]=\"form\" [label]=\"'Name'\" [controlName]=\"'name'\"></app-input>\n      <app-input [form]=\"form\" [label]=\"'Description'\" [controlName]=\"'description'\"></app-input>\n      <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n    </ng-container>\n  `,\n  providers: [\n    { provide: ADD_SERVICE_PROVIDER, useExisting: forwardRef(() => ConfigGroupAddService) }\n  ],\n})\nexport class AddConfigGroupComponent extends BaseFormDirective implements OnInit {\n\n  ngOnInit(): void {\n    this.form = this.service.model().form;\n  }\n\n  save(): void {\n    const data = clearEmptyField(this.form.value) as ConfigGroup;\n    this.service\n      .add(data)\n      .pipe(take(1))\n      .subscribe((_) => this.onCancel());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "BaseFormDirective",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AddFormComponent",
            "id": "component-AddFormComponent-66af7d2a91a5e5797fecc9e7c6c43b96",
            "file": "src/app/shared/add-component/add-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-form",
            "styleUrls": [],
            "styles": [],
            "template": "<div [style.minWidth.px]=\"450\">\n  <ng-container [ngSwitch]=\"model.name\">\n    <ng-container *ngSwitchCase=\"'provider'\">\n      <app-add-provider #cc></app-add-provider>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'host'\">\n      <app-add-host (event)=\"message($event)\" #cc></app-add-host>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'cluster'\">\n      <app-add-cluster #cc></app-add-cluster>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'service'\">\n      <app-add-service #cc></app-add-service>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'host2cluster'\">\n      <app-add-host2cluster (event)=\"message($event)\" #cc></app-add-host2cluster>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n      <ng-container *ngIf=\"!!model.component\">\n        <ng-container #cc *ngComponentOutlet=\"model.component\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseFormDirective",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cc'"
                        }
                    ]
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormModel",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "viewContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "message",
                    "args": [
                        {
                            "name": "m",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnterKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ViewContainerRef } from '@angular/core';\n\nimport { ChannelService, keyChannelStrim } from '@app/core/services';\nimport { DynamicComponent } from '@app/shared/directives';\nimport { BaseFormDirective } from './base-form.directive';\nimport { FormModel } from '@app/shared/add-component/add-service-model';\n\n@Component({\n  selector: 'app-add-form',\n  template: `\n    <div [style.minWidth.px]=\"450\">\n      <ng-container [ngSwitch]=\"model.name\">\n        <ng-container *ngSwitchCase=\"'provider'\">\n          <app-add-provider #cc></app-add-provider>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'host'\">\n          <app-add-host (event)=\"message($event)\" #cc></app-add-host>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'cluster'\">\n          <app-add-cluster #cc></app-add-cluster>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'service'\">\n          <app-add-service #cc></app-add-service>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"'host2cluster'\">\n          <app-add-host2cluster (event)=\"message($event)\" #cc></app-add-host2cluster>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <ng-container *ngIf=\"!!model.component\">\n            <ng-container #cc *ngComponentOutlet=\"model.component\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  `,\n})\nexport class AddFormComponent implements DynamicComponent {\n  model: FormModel;\n\n  constructor(private channel: ChannelService, public viewContainer: ViewContainerRef) {}\n\n  @ViewChild('cc') container: BaseFormDirective;\n\n  onEnterKey(): void {\n    if (this.container) {\n      if (this.container.form.valid) this.container.save();\n    }\n  }\n\n  message(m: string): void {\n    this.channel.next(keyChannelStrim.notifying, m);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "DynamicComponent"
            ]
        },
        {
            "name": "AddHostToConfigGroupComponent",
            "id": "component-AddHostToConfigGroupComponent-9354f627d58343ff3f0c88558d3cb8d2",
            "file": "src/app/config-groups/components/config-group-host-add/config-group-host-add.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config-group-host-add",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"list$ | async as list\">\n  <mat-selection-list #selectionList (selectionChange)=\"selectAll($event)\">\n    <mat-list-option *ngIf=\"list.count\">All</mat-list-option>\n    <mat-list-option [selected]=\"selected[host.id]\" *ngFor=\"let host of list.results\" [value]=\"host\">\n      {{ host.fqdn }}\n    </mat-list-option>\n  </mat-selection-list>\n  <mat-paginator *ngIf=\"list.count\" [length]=\"list.count\" [pageSizeOptions]=\"[10, 25, 50, 100]\"\n                 [pageIndex]=\"pageIndex\" [pageSize]=\"pageSize\"\n                 (page)=\"pageHandler($event)\"></mat-paginator>\n  <app-add-controls *ngIf=\"list.count; else not\" [title]=\"'Add'\" [disabled]=\"disabled\" (cancel)=\"onCancel()\"\n                    (save)=\"save()\"></app-add-controls>\n</ng-container>\n<ng-template #not>\n  <p>\n    <i>\n      There are no new hosts. You config group already has all of them.\n    </i>\n  </p>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectionList'"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "list$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ListResult<Host>>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "selected",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getAvailableHosts",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageHandler",
                    "args": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\nimport { Host } from '@app/core/types';\nimport { Observable } from 'rxjs';\n\nimport { BaseFormDirective } from '@app/shared/add-component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfigGroupHostAddService } from '../../service';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ListResult } from '@app/models/list-result';\nimport { PageEvent } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-config-group-host-add',\n  template: `\n    <ng-container *ngIf=\"list$ | async as list\">\n      <mat-selection-list #selectionList (selectionChange)=\"selectAll($event)\">\n        <mat-list-option *ngIf=\"list.count\">All</mat-list-option>\n        <mat-list-option [selected]=\"selected[host.id]\" *ngFor=\"let host of list.results\" [value]=\"host\">\n          {{ host.fqdn }}\n        </mat-list-option>\n      </mat-selection-list>\n      <mat-paginator *ngIf=\"list.count\" [length]=\"list.count\" [pageSizeOptions]=\"[10, 25, 50, 100]\"\n                     [pageIndex]=\"pageIndex\" [pageSize]=\"pageSize\"\n                     (page)=\"pageHandler($event)\"></mat-paginator>\n      <app-add-controls *ngIf=\"list.count; else not\" [title]=\"'Add'\" [disabled]=\"disabled\" (cancel)=\"onCancel()\"\n                        (save)=\"save()\"></app-add-controls>\n    </ng-container>\n    <ng-template #not>\n      <p>\n        <i>\n          There are no new hosts. You config group already has all of them.\n        </i>\n      </p>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AddHostToConfigGroupComponent extends BaseFormDirective implements OnInit {\n\n  selected: { [key: number]: boolean } = {};\n\n  get disabled() {\n    return !Object.keys(this.selected).length;\n  }\n\n  pageIndex = 0;\n  pageSize = 10;\n\n  list$: Observable<ListResult<Host>>;\n  @ViewChild('selectionList')\n  private list: MatSelectionList;\n\n  constructor(service: ConfigGroupHostAddService, dialog: MatDialog, private cluster: ClusterService) {\n    super(service, dialog);\n  }\n\n  ngOnInit(): void {\n    this.getAvailableHosts(this.pageIndex, this.pageSize);\n  }\n\n  selectAll(e: MatSelectionListChange): void {\n    const value = e.option.value;\n    if (!value) {\n      if (e.option.selected) {\n        this.list.selectAll();\n        this.list.options.filter((o) => !!o.value).forEach((o) => {\n          this.selected[o.value.id] = true;\n        });\n\n      } else {\n        this.list.deselectAll();\n\n        this.list.options.filter((o) => !!o.value).forEach((o) => {\n          if (this.selected[o.value.id]) {\n            delete this.selected[o.value.id];\n          }\n        });\n      }\n    } else {\n      if (this.selected[value.id]) {\n        delete this.selected[value.id];\n      } else {\n        this.selected[value.id] = true;\n      }\n    }\n  }\n\n  save(): void {\n    const groupId = this.service.Current.id;\n    const result = Object.entries(this.selected).map(([id]) => ({\n      host: +id,\n      group: groupId\n    }));\n\n    this.service\n      .add(result)\n      .pipe(this.takeUntil())\n      .subscribe(() => this.dialog.closeAll());\n  }\n\n  getAvailableHosts(pageIndex, pageSize): void {\n    const { typeName } = this.cluster.Current;\n    this.list$ = this.service.getListResults<Host>(typeName, { limit: pageSize, page: pageIndex });\n  }\n\n  pageHandler(pageEvent: PageEvent): void {\n    this.pageIndex = pageEvent.pageIndex;\n    this.pageSize = pageEvent.pageSize;\n    this.getAvailableHosts(this.pageIndex, this.pageSize);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ConfigGroupHostAddService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ConfigGroupHostAddService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cluster",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseFormDirective",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                }
            }
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-82c57e0b89a57234642fbe430f4f146b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "AppService"
                }
            ],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<app-top></app-top>\n<main>\n  <app-progress></app-progress>\n  <router-outlet></router-outlet>\n</main>\n<footer>\n  <div>\n    <span class=\"left\">\n      <span>VERSION: </span>\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://docs.arenadata.io/adcm/notes.html#ver-{{ versionData.version }}\"\n        >{{ versionData.version }}-{{ versionData.commit_id }}</a\n      >\n    </span>\n    <span>ARENADATA &copy; {{ currentYear }}</span>\n  </div>\n</footer>\n<div class=\"console hidden\"></div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentYear",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "versionData",
                    "defaultValue": "{ version: '', commit_id: '' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "console",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "css",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: move this to component and append through DomService (as TooltipComponent - line: 61)\nimportant - to approve with QA!\n",
                    "description": "<p>TODO: move this to component and append through DomService (as TooltipComponent - line: 61)\nimportant - to approve with QA!</p>\n",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "css",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit } from '@angular/core';\nimport { AppService, ChannelService, DomService, keyChannelStrim } from '@app/core/services';\nimport { filter } from 'rxjs/operators';\n\nimport { TooltipComponent } from '@app/shared/components/tooltip';\n\n/** Magic strings for marking loading stages and other, for ci tests */\nconst enum flagForConsole {\n  'profile' = 'profile',\n  'socket' = 'socket',\n  'load_complete' = 'load_complete',\n}\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <app-top></app-top>\n    <main>\n      <app-progress></app-progress>\n      <router-outlet></router-outlet>\n    </main>\n    <footer>\n      <div>\n        <span class=\"left\">\n          <span>VERSION: </span>\n          <a target=\"_blank\" rel=\"noopener\" href=\"https://docs.arenadata.io/adcm/notes.html#ver-{{ versionData.version }}\"\n            >{{ versionData.version }}-{{ versionData.commit_id }}</a\n          >\n        </span>\n        <span>ARENADATA &copy; {{ currentYear }}</span>\n      </div>\n    </footer>\n    <div class=\"console hidden\"></div>\n  `,\n  providers: [AppService],\n})\nexport class AppComponent implements OnInit {\n  currentYear = new Date().getFullYear();\n  versionData = { version: '', commit_id: '' };\n\n  constructor(\n    private elRef: ElementRef,\n    private service: AppService,\n    private radio: ChannelService,\n    private dom: DomService\n  ) {}\n\n  ngOnInit() {\n    this.dom.appendComponentToBody(TooltipComponent);\n\n    this.service.getRootAndCheckAuth().subscribe((c) => {\n      if (!c) this.elRef.nativeElement.innerHTML = '';\n      else this.versionData = { ...c };\n    });\n\n    this.service.initListeners();\n\n    this.service\n      .checkWSconnectStatus()\n      .pipe(filter((a) => a === 'open'))\n      .subscribe((_) => this.console('Socket status :: open', flagForConsole.socket));\n\n    this.service.checkUserProfile().subscribe((_) => this.console('User profile :: saved', flagForConsole.profile));\n\n    this.versionData = this.service.getVersion(this.versionData);\n\n    this.radio\n      .on<string>(keyChannelStrim.load_complete)\n      .subscribe((a) => this.console(a, flagForConsole.load_complete));\n  }\n\n  /**\n   * TODO: move this to component and append through DomService (as TooltipComponent - line: 61)\n   * important - to approve with QA!\n   */\n  console(text: string, css?: string) {\n    const console = this.elRef.nativeElement.querySelector('div.console');\n    if (!text) console.innerHTML = '';\n    else {\n      const create = () => document.createElement('p');\n      const isExist = () => console.querySelector(`.${css}`);\n      const inner = (p: HTMLElement) => (p.innerText = text);\n      const addClass = (p: HTMLElement) => p.classList.add(css);\n      const append = (p: HTMLElement) => console.appendChild(p);\n      const a = create();\n      inner(a);\n      if (css && !isExist()) {\n        addClass(a);\n        append(a);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "AppService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "radio",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dom",
                        "type": "DomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "AppService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "radio",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dom",
                        "type": "DomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "BellComponent",
            "id": "component-BellComponent-391bc2abd632d574b4523b00c2426438",
            "file": "src/app/components/bell/bell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bell",
            "styleUrls": [
                "./bell.component.scss"
            ],
            "styles": [],
            "template": "<div\n  appPopover\n  [component]=\"NotificationsComponent\"\n  [event]=\"bindedPopoverEvent\"\n  [data]=\"{ counts: counts, tasks: tasks }\"\n  class=\"bell-wrapper\"\n>\n  <div\n    class=\"circle\"\n    [ngStyle]=\"{ background: bellGradient }\"\n    routerLink=\"/task\"\n  >\n    <div class=\"animation hide\" (animationstart)=\"onAnimationStart()\" (animationend)=\"onAnimationEnd()\" #animation></div>\n    <div class=\"insider\">\n      <mat-icon>notifications</mat-icon>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animationElem",
                    "defaultValue": "new BehaviorSubject<Element>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "animationRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'animation', {static: false}"
                        }
                    ]
                },
                {
                    "name": "bellGradient",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "bindedPopoverEvent",
                    "defaultValue": "this.popoverEvent.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "counts",
                    "defaultValue": "new BehaviorSubject<NotificationsData>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "failedCount",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isAnimationRunning",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "NotificationsComponent",
                    "defaultValue": "NotificationsComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "runningCount",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "successCount",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "tasks",
                    "defaultValue": "new BehaviorSubject<TaskRaw[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "afterCountChanged",
                    "args": [
                        {
                            "name": "animationNeeds",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "animationNeeds",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decRunningCount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "endAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getChangeTaskObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EventMessage>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentCounts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Stats>",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLastTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Task[]>",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listenToJobs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnimationEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnimationStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "popoverEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startAnimation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "updatedTaskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskRaw",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "JobStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updatedTaskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "TaskRaw",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "JobStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';\nimport { BaseDirective } from '@adwp-ui/widgets';\nimport { BehaviorSubject, combineLatest, interval, Observable, zip } from 'rxjs';\nimport { filter, map, mergeMap, take, takeWhile } from 'rxjs/operators';\n\nimport { TaskService } from '@app/services/task.service';\nimport { ACKNOWLEDGE_EVENT, NotificationsComponent } from '@app/components/notifications/notifications.component';\nimport { JobStatus, Task, TaskRaw } from '@app/core/types';\nimport { EventMessage, ProfileService } from '@app/core/store';\nimport { Stats, StatsService } from '@app/services/stats.service';\n\nconst RUNNING_COLOR = '#FFEA00';\nconst SUCCESS_COLOR = '#1EE564';\nconst FAILED_COLOR = '#FF8A80';\n\nexport interface NotificationsData {\n  runningCount: number;\n  successCount: number;\n  failedCount: number;\n}\n\n@Component({\n  selector: 'app-bell',\n  template: `\n    <div\n      appPopover\n      [component]=\"NotificationsComponent\"\n      [event]=\"bindedPopoverEvent\"\n      [data]=\"{ counts: counts, tasks: tasks }\"\n      class=\"bell-wrapper\"\n    >\n      <div\n        class=\"circle\"\n        [ngStyle]=\"{ background: bellGradient }\"\n        routerLink=\"/task\"\n      >\n        <div class=\"animation hide\" (animationstart)=\"onAnimationStart()\" (animationend)=\"onAnimationEnd()\" #animation></div>\n        <div class=\"insider\">\n          <mat-icon>notifications</mat-icon>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./bell.component.scss']\n})\nexport class BellComponent extends BaseDirective implements AfterViewInit {\n\n  NotificationsComponent = NotificationsComponent;\n\n  @ViewChild('animation', { static: false }) animationRef: ElementRef;\n\n  runningCount = new BehaviorSubject<number>(0);\n  successCount = new BehaviorSubject<number>(0);\n  failedCount = new BehaviorSubject<number>(0);\n\n  bellGradient = '';\n\n  isAnimationRunning = new BehaviorSubject<boolean>(false);\n  animationElem = new BehaviorSubject<Element>(null);\n\n  counts = new BehaviorSubject<NotificationsData>(null);\n  tasks = new BehaviorSubject<TaskRaw[]>([]);\n\n  readonly bindedPopoverEvent = this.popoverEvent.bind(this);\n\n  constructor(\n    private taskService: TaskService,\n    private renderer: Renderer2,\n    private profileService: ProfileService,\n    private statsService: StatsService,\n  ) {\n    super();\n  }\n\n  popoverEvent(event: any) {\n    if (event === ACKNOWLEDGE_EVENT) {\n      const lastTaskId = this.tasks.value[0]?.id;\n      if (lastTaskId) {\n        this.profileService.setLastViewedTask(lastTaskId).subscribe();\n      }\n      this.tasks.next([]);\n      this.successCount.next(0);\n      this.runningCount.next(0);\n      this.failedCount.next(0);\n      this.afterCountChanged(false);\n    }\n  }\n\n  onAnimationStart() {\n    this.isAnimationRunning.next(true);\n  }\n\n  onAnimationEnd() {\n    this.isAnimationRunning.next(false);\n  }\n\n  startAnimation() {\n    if (this.animationElem.value && !this.isAnimationRunning.value) {\n      this.renderer.removeClass(this.animationElem.value, 'hide');\n      this.renderer.addClass(this.animationElem.value, 'animated');\n    }\n  }\n\n  endAnimation() {\n    if (this.animationElem.value) {\n      this.renderer.addClass(this.animationElem.value, 'hide');\n      this.renderer.removeClass(this.animationElem.value, 'animated');\n    }\n  }\n\n  afterCountChanged(animationNeeds = true) {\n    const total =  this.runningCount.value + this.successCount.value + this.failedCount.value;\n    if (total > 0) {\n      const degOne = 360 / total;\n      const degRunning = this.runningCount.value * degOne;\n      const degSuccess = this.successCount.value * degOne;\n      this.bellGradient =\n        `conic-gradient(`\n        + `${RUNNING_COLOR} 0deg ${degRunning}deg,`\n        + `${SUCCESS_COLOR} ${degRunning}deg ${degRunning + degSuccess}deg,`\n        + `${FAILED_COLOR} ${degRunning + degSuccess}deg 360deg)`;\n    } else {\n      this.bellGradient = 'transparent';\n    }\n    if (animationNeeds) {\n      this.startAnimation();\n    }\n  }\n\n  getChangeTaskObservable(): Observable<EventMessage> {\n    return this.taskService.events({ events: ['change_job_status'] }).pipe(this.takeUntil());\n  }\n\n  decRunningCount() {\n    const runningCount = this.runningCount.value - 1;\n    this.runningCount.next(runningCount < 0 ? 0 : runningCount);\n  }\n\n  updateTask(updatedTaskId: number, task: TaskRaw, status: JobStatus) {\n    const tasks: TaskRaw[] = this.tasks.value.slice();\n    const index = tasks.findIndex(item => item.id === updatedTaskId);\n    task.status = status;\n    tasks.splice(index, 1, task);\n    this.tasks.next(tasks);\n  }\n\n  listenToJobs() {\n    this.getChangeTaskObservable().subscribe((event) => {\n      const status = event.object.details.value;\n      if (status === 'running') {\n        this.runningCount.next(this.runningCount.value + 1);\n        this.afterCountChanged();\n      } else if (status === 'success') {\n        this.successCount.next(this.successCount.value + 1);\n        this.decRunningCount();\n        this.afterCountChanged();\n      } else if (status === 'failed') {\n        this.failedCount.next(this.failedCount.value + 1);\n        this.decRunningCount();\n        this.afterCountChanged();\n      }\n    });\n\n    this.getChangeTaskObservable().pipe(\n      filter(event => event.object.details.type === 'status'),\n      filter(event => event.object.details.value !== 'created'),\n    ).subscribe((event) => {\n      const tasks: TaskRaw[] = this.tasks.value.slice();\n      const updatedTaskId = event.object.id;\n      const index = tasks.findIndex(item => item.id === updatedTaskId);\n      if (index >= 0) {\n        const task: TaskRaw = Object.assign({}, tasks[index]);\n        this.taskService.get(updatedTaskId).subscribe((updatedTask) => this.updateTask(updatedTaskId, updatedTask, event.object.details.value));\n        tasks.splice(index, 1, task);\n        this.tasks.next(tasks);\n      } else {\n        this.taskService.get(event.object.id).subscribe((task) => {\n          task.status = event.object.details.value;\n          tasks.unshift(task);\n          this.tasks.next(tasks.slice(0, 5));\n        });\n      }\n    });\n  }\n\n  getCurrentCounts(): Observable<Stats> {\n    return this.profileService.getProfile().pipe(\n      take(1),\n      mergeMap((user) => this.statsService.tasks(user.profile?.lastViewedTask?.id)),\n    );\n  }\n\n  getLastTasks(): Observable<Task[]> {\n    return zip(\n      this.taskService.list({ ordering: '-finish_date', status: 'failed', limit: '5' }),\n      this.taskService.list({ ordering: '-finish_date', status: 'success', limit: '5' }),\n      this.taskService.list({ ordering: '-start_date', status: 'running', limit: '5' }),\n      this.profileService.getProfile(),\n    ).pipe(map(([failed, succeed, running, user]) => {\n      let tasks = [...failed.results, ...succeed.results, ...running.results].sort((a, b) => {\n        const getDateField = (task: Task) => task.status === 'failed' || task.status === 'success' ? task.finish_date : task.start_date;\n        const aDate = new Date(getDateField(a));\n        const bDate = new Date(getDateField(b));\n        return aDate.getDate() - bDate.getDate();\n      }).slice(0, 5);\n\n      if (user.profile?.lastViewedTask?.id) {\n        tasks = tasks.filter(task => task.id > user.profile.lastViewedTask.id);\n      }\n\n      return tasks;\n    }));\n  }\n\n  ngAfterViewInit(): void {\n    interval(200).pipe(\n      this.takeUntil(),\n      takeWhile(() => !this.animationElem.value),\n    ).subscribe(() => {\n      this.animationElem.next(this.animationRef ? this.animationRef.nativeElement : null);\n    });\n\n    this.animationElem.pipe(\n      this.takeUntil(),\n      filter((elem) => !!elem),\n      take(1),\n    ).subscribe(() => {\n      zip(this.getCurrentCounts(), this.getLastTasks())\n        .subscribe(([stats, tasks]) => {\n          this.runningCount.next(stats.running);\n          this.successCount.next(stats.success);\n          this.failedCount.next(stats.failed);\n          this.afterCountChanged(!!(stats.running || stats.success || stats.failed));\n          this.tasks.next(tasks);\n          this.listenToJobs();\n        });\n    });\n\n    this.isAnimationRunning.pipe(\n      this.takeUntil(),\n      filter(isRunning => !isRunning),\n    ).subscribe(() => this.endAnimation());\n\n    combineLatest(this.runningCount, this.successCount, this.failedCount)\n    .pipe(this.takeUntil())\n    .subscribe(\n      ([runningCount, successCount, failedCount]) => this.counts.next({\n        runningCount,\n        successCount,\n        failedCount,\n      })\n    );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".bell-wrapper {\n  width: 50px;\n  height: 50px;\n  background: none;\n}\n\n.circle {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background-repeat: no-repeat;\n\n  cursor: pointer;\n  position: relative;\n}\n\n@keyframes spinner {\n  0% {\n    transform: rotate(0deg);\n    opacity: 1;\n  }\n  50% {\n    transform: rotate(180deg);\n    opacity: 0.8;\n  }\n  75% {\n    transform: rotate(270deg);\n    opacity: 0.6;\n  }\n  100% {\n    transform: rotate(360deg);\n    opacity: 0;\n  }\n}\n\n.animation {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-repeat: no-repeat;\n  background-image: conic-gradient(#fff, #262d37);\n  animation-duration: 0.7s;\n  animation-timing-function: linear;\n}\n\n.animated {\n  animation-name: spinner;\n}\n\n.hide {\n  opacity: 0;\n}\n\n.insider {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  background: #262d37;\n  top: 7px;\n  left: 7px;\n  position: absolute;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n",
                    "styleUrl": "./bell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "statsService",
                        "type": "StatsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statsService",
                        "type": "StatsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "BooleanComponent",
            "id": "component-BooleanComponent-608a307417228c9438a976eea023f0a4",
            "file": "src/app/shared/form-elements/boolean.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MAT_CHECKBOX_DEFAULT_OPTIONS, useValue: options }"
                }
            ],
            "selector": "app-fields-boolean",
            "styleUrls": [],
            "styles": [
                ":host {height: 58px;} mat-error { font-size: 0.75em; margin-left: 14px; }"
            ],
            "template": "<ng-container [formGroup]=\"form\">\n  <mat-checkbox [formControlName]=\"field.name\" [indeterminate]=\"field.value === null\"\n                (click)=\"cbChange()\"></mat-checkbox>\n  <mat-error *ngIf=\"!isValid\">\n    <app-error-info [field]=\"field\" [control]=\"control\"></app-error-info>\n  </mat-error>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cbChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MAT_CHECKBOX_DEFAULT_OPTIONS } from '@angular/material/checkbox';\n\nimport { FieldDirective } from './field.directive';\n\nconst options = { clickAction: 'noop', color: 'accent' };\n\n@Component({\n  selector: 'app-fields-boolean',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <mat-checkbox [formControlName]=\"field.name\" [indeterminate]=\"field.value === null\"\n                    (click)=\"cbChange()\"></mat-checkbox>\n      <mat-error *ngIf=\"!isValid\">\n        <app-error-info [field]=\"field\" [control]=\"control\"></app-error-info>\n      </mat-error>\n    </ng-container>\n  `,\n  styles: [':host {height: 58px;} mat-error { font-size: 0.75em; margin-left: 14px; }'],\n  providers: [{ provide: MAT_CHECKBOX_DEFAULT_OPTIONS, useValue: options }]\n})\nexport class BooleanComponent extends FieldDirective {\n  cbChange() {\n    if (this.field.read_only || this.control.disabled) return;\n    const tape = this.field.validator.required ? [true, false] : [null, true, false];\n    this.field.value = tape[(tape.indexOf(this.field.value as boolean) + 1) % tape.length];\n    this.control.markAsDirty({\n      onlySelf: true\n    });\n    this.control.setValue(this.field.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {height: 58px;} mat-error { font-size: 0.75em; margin-left: 14px; }\n",
            "extends": "FieldDirective"
        },
        {
            "name": "BundleDetailsComponent",
            "id": "component-BundleDetailsComponent-c28a79ec9adbf1f7c16d7037e33e9edf",
            "file": "src/app/components/bundle/bundle-details/bundle-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bundle-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'bundle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.labelMenuItem('License', 'license'),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\nimport { Bundle } from '@app/core/types';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { BundleService } from '@app/services/bundle.service';\n\n@Component({\n  selector: 'app-bundle-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class BundleDetailsComponent extends DetailAbstractDirective<Bundle> {\n\n  entityParam = 'bundle';\n\n  leftMenu = [\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.labelMenuItem('License', 'license'),\n  ];\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: BundleService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "BundleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "BundleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "BundleListComponent",
            "id": "component-BundleListComponent-24b4f3c3c6725b2d90f3cdeb18df9a90",
            "file": "src/app/entry/bundle/bundle-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bundle-list",
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }"
            ],
            "template": "<mat-toolbar class=\"toolbar\">\n  <app-crumbs [navigation]=\"[{ url: '/bundle', title: 'bundles' }]\"></app-crumbs>\n  <app-button-uploader #uploadBtn [color]=\"'accent'\" [label]=\"'Upload bundles'\"\n                       (output)=\"upload($event)\"></app-button-uploader>\n</mat-toolbar>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.nameColumn(),\n    {\n      label: 'Version',\n      sort: 'version',\n      value: row => row.version,\n    },\n    {\n      label: 'Edition',\n      type: 'component',\n      component: EditionColumnComponent,\n      instanceTaken: (componentRef: ComponentRef<EditionColumnComponent>) => {\n        componentRef.instance.onClick = this.license.bind(this);\n      }\n    },\n    ListFactory.descriptionColumn(),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IBundle>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'bundle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "uploadBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'uploadBtn', {static: true}"
                        }
                    ]
                },
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IListResult<T>>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "defaultSort",
                    "defaultValue": "{ active: 'id', direction: 'desc' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sort",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "paging",
                    "defaultValue": "new BehaviorSubject<Paging>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Paging>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "sorting",
                    "defaultValue": "new BehaviorSubject<Sort>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Sort>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "license",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "data",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "auxclickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "changeCount",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "clickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "findRow",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BaseEntity",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getPageSize",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getSort",
                    "args": [],
                    "optional": false,
                    "returnType": "Sort",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "initBaseListDirective",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "onChangePaging",
                    "args": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "onChangeSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "reload",
                    "args": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "rewriteRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentRef, OnInit, ViewChild } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { IColumns } from '@adwp-ui/widgets';\nimport { Observable } from 'rxjs';\n\nimport { StackService } from '../../core/services';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { AdwpListDirective } from '@app/abstract-directives/adwp-list.directive';\nimport { ListService } from '@app/shared/components/list/list.service';\nimport { SocketState } from '@app/core/store';\nimport { TypeName } from '@app/core/types';\nimport { IBundle } from '@app/models/bundle';\nimport { ListFactory } from '../../factories/list.factory';\nimport { EditionColumnComponent } from '@app/components/columns/edition-column/edition-column.component';\n\n@Component({\n  selector: 'app-bundle-list',\n  template: `\n    <mat-toolbar class=\"toolbar\">\n      <app-crumbs [navigation]=\"[{ url: '/bundle', title: 'bundles' }]\"></app-crumbs>\n      <app-button-uploader #uploadBtn [color]=\"'accent'\" [label]=\"'Upload bundles'\"\n                           (output)=\"upload($event)\"></app-button-uploader>\n    </mat-toolbar>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }'],\n})\nexport class BundleListComponent extends AdwpListDirective<IBundle> {\n\n  type: TypeName = 'bundle';\n\n  listColumns = [\n    ListFactory.nameColumn(),\n    {\n      label: 'Version',\n      sort: 'version',\n      value: row => row.version,\n    },\n    {\n      label: 'Edition',\n      type: 'component',\n      component: EditionColumnComponent,\n      instanceTaken: (componentRef: ComponentRef<EditionColumnComponent>) => {\n        componentRef.instance.onClick = this.license.bind(this);\n      }\n    },\n    ListFactory.descriptionColumn(),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IBundle>;\n\n  @ViewChild('uploadBtn', { static: true }) uploadBtn: any;\n\n  constructor(\n    private stack: StackService,\n    protected service: ListService,\n    protected store: Store<SocketState>,\n    public route: ActivatedRoute,\n    public router: Router,\n    public dialog: MatDialog,\n  ) {\n    super(service, store, route, router, dialog);\n  }\n\n  upload(data: FormData[]) {\n    this.stack.upload(data).subscribe();\n  }\n\n  license(data: { event: MouseEvent, action: string, row: any }) {\n    this.clickCell(data.event, data.action, data.row);\n  }\n\n}\n\n@Component({\n  selector: 'app-main',\n  template: `\n    <adwp-table\n      [columns]=\"listColumns\"\n      [dataSource]=\"model | pickKeys:keys | translateKeys | toDataSource\"\n    ></adwp-table>\n  `,\n  styles: [':host {width: 100%; max-width: 960px}']\n})\nexport class MainComponent implements OnInit {\n  model: any;\n\n  keys = ['display_name', 'version', 'license', 'license_path'];\n\n  listColumns = [\n    ListFactory.keyColumn(),\n    ListFactory.valueColumn(),\n  ] as IColumns<any>;\n\n  constructor(private service: ClusterService) {}\n\n  ngOnInit() {\n    this.model = this.service.Current;\n  }\n\n}\n\n@Component({\n  selector: 'app-license',\n  template: `\n    <pre>{{ text | async }}</pre>\n  `,\n  styles: [`:host {\n    width: 100%;\n    max-width: 960px\n  }\n\n  pre {\n    white-space: pre-wrap;\n  }`]\n})\nexport class LicenseComponent implements OnInit {\n  text: Observable<string>;\n\n  constructor(private service: ClusterService) {}\n\n  ngOnInit(): void {\n    this.text = this.service.getBundleLicenseText();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stack",
                        "type": "StackService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "stack",
                        "type": "StackService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AdwpListDirective"
        },
        {
            "name": "BundlesComponent",
            "id": "component-BundlesComponent-8f0bbd656f97c2f80899eb84ec337a96",
            "file": "src/app/shared/form-elements/bundles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bundles",
            "styleUrls": [],
            "styles": [
                ".row { align-items: center;display:flex; }",
                "mat-form-field {flex: 1}"
            ],
            "template": "<div class=\"row\" [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-select appInfinityScroll (topScrollPoint)=\"getNextPage()\" required placeholder=\"Bundle\" formControlName=\"display_name\">\n      <mat-option value=\"\">...</mat-option>\n      <mat-option *ngFor=\"let bundle of bundles\" [value]=\"bundle.display_name\"> {{ bundle.display_name }} </mat-option>\n    </mat-select>\n  </mat-form-field>\n  &nbsp;&nbsp;\n  <mat-form-field>\n    <mat-select placeholder=\"Version\" required formControlName=\"bundle_id\">\n      <mat-option *ngFor=\"let bundle of versions\" [value]=\"bundle.bundle_id\"> {{ bundle.version }} {{ bundle.bundle_edition }} </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <app-button-uploader\n    [style.fontSize.px]=\"24\"\n    #uploadBtn\n    [color]=\"'accent'\"\n    [asIcon]=\"true\"\n    [label]=\"'Upload bundles'\"\n    (click)=\"EventHelper.stopPropagation($event)\"\n    (output)=\"upload($event)\"\n  ></app-button-uploader>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"cluster\" | \"provider\""
                },
                {
                    "name": "controlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "inheritance": {
                        "file": "InputComponent"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "InputComponent"
                    }
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "inheritance": {
                        "file": "InputComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "inheritance": {
                        "file": "InputComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "prototypeChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "bundles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StackBase[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "disabledVersion",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "EventHelper",
                    "defaultValue": "EventHelper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "limit",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "loadedBundle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "uploadBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonUploaderComponent",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'uploadBtn', {static: true}"
                        }
                    ]
                },
                {
                    "name": "versions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StackBase[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getBundles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectOne",
                    "args": [
                        {
                            "name": "a",
                            "type": "Partial<Prototype>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "formName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "Partial<Prototype>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "data",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FormData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "InputComponent"
                    }
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "InputComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Prototype, StackBase } from '@app/core/types';\nimport { of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { EventHelper } from '@adwp-ui/widgets';\n\nimport { AddService } from '../add-component/add.service';\nimport { ButtonUploaderComponent } from './button-uploader.component';\nimport { InputComponent } from './input.component';\n\n@Component({\n  selector: 'app-bundles',\n  template: `\n    <div class=\"row\" [formGroup]=\"form\">\n      <mat-form-field>\n        <mat-select appInfinityScroll (topScrollPoint)=\"getNextPage()\" required placeholder=\"Bundle\" formControlName=\"display_name\">\n          <mat-option value=\"\">...</mat-option>\n          <mat-option *ngFor=\"let bundle of bundles\" [value]=\"bundle.display_name\"> {{ bundle.display_name }} </mat-option>\n        </mat-select>\n      </mat-form-field>\n      &nbsp;&nbsp;\n      <mat-form-field>\n        <mat-select placeholder=\"Version\" required formControlName=\"bundle_id\">\n          <mat-option *ngFor=\"let bundle of versions\" [value]=\"bundle.bundle_id\"> {{ bundle.version }} {{ bundle.bundle_edition }} </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <app-button-uploader\n        [style.fontSize.px]=\"24\"\n        #uploadBtn\n        [color]=\"'accent'\"\n        [asIcon]=\"true\"\n        [label]=\"'Upload bundles'\"\n        (click)=\"EventHelper.stopPropagation($event)\"\n        (output)=\"upload($event)\"\n      ></app-button-uploader>\n    </div>\n  `,\n  styles: ['.row { align-items: center;display:flex; }', 'mat-form-field {flex: 1}'],\n})\nexport class BundlesComponent extends InputComponent implements OnInit {\n  EventHelper = EventHelper;\n\n  @Input() typeName: 'cluster' | 'provider';\n  @ViewChild('uploadBtn', { static: true }) uploadBtn: ButtonUploaderComponent;\n  loadedBundle: { bundle_id: number; display_name: string };\n  bundles: StackBase[] = [];\n  versions: StackBase[];\n  page = 1;\n  limit = 50;\n  disabledVersion = true;\n\n  @Output() prototypeChanged = new EventEmitter();\n\n  constructor(private service: AddService) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.form.addControl('display_name', new FormControl());\n    this.form.addControl('bundle_id', new FormControl());\n\n    this.getBundles();\n\n    this.form\n      .get('display_name')\n      .valueChanges.pipe(\n        this.takeUntil(),\n        switchMap((value) => (value ? this.service.getPrototype(this.typeName, { page: 0, limit: 500, ordering: '-version', display_name: value }) : of([])))\n      )\n      .subscribe((a) => {\n        this.versions = a;\n        this.selectOne(a, 'bundle_id');\n        this.loadedBundle = null;\n      });\n\n    // for check license agreement\n    this.form\n      .get('bundle_id')\n      .valueChanges.pipe(\n        this.takeUntil(),\n        filter((a) => a)\n      )\n      .subscribe((a) => {\n        const prototype = this.versions.find((b) => b.bundle_id === +a);\n        this.service.currentPrototype = prototype;\n        this.prototypeChanged.emit(prototype);\n        this.form.get('prototype_id').setValue(this.service.currentPrototype.id);\n      });\n  }\n\n  getNextPage() {\n    const count = this.bundles.length;\n    if (count === this.page * this.limit) {\n      this.page++;\n      this.getBundles();\n    }\n  }\n\n  getBundles() {\n    const offset = (this.page - 1) * this.limit;\n    const params = { fields: 'display_name', distinct: 1, ordering: 'display_name', limit: this.limit, offset };\n    this.service.getPrototype(this.typeName, params).subscribe((a) => {\n      this.bundles = [...this.bundles, ...a];\n      this.selectOne(a, 'display_name');\n    });\n  }\n\n  selectOne(a: Partial<Prototype>[] = [], formName: string) {\n    const el = this.loadedBundle ? a.find((e) => e[formName] === this.loadedBundle[formName]) : null;\n    const id = el ? el[formName] : a.length ? (formName === 'bundle_id' || a.length === 1 ? a[0][formName] : '') : '';\n    this.form.get(formName).setValue(id);\n  }\n\n  upload(data: FormData[]) {\n    this.service\n      .upload(data)\n      .pipe(map((a) => a.map((e) => ({ bundle_id: e.id, display_name: e.display_name, version: e.version }))))\n      .subscribe((a) => {\n        this.loadedBundle = a[0];\n        this.uploadBtn.fileUploadInput.nativeElement.value = '';\n        this.page = 0;\n        this.bundles = [];\n        this.getBundles();\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".row { align-items: center;display:flex; }\nmat-form-field {flex: 1}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "AddService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "AddService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "InputComponent",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ButtonSpinnerComponent",
            "id": "component-ButtonSpinnerComponent-098b94dee8377e441820102751f3dd12",
            "file": "src/app/shared/components/button-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-spinner",
            "styleUrls": [],
            "styles": [
                ".spinner {position: relative; bottom: 5px; display: inline; }"
            ],
            "template": "<button mat-raised-button   [color]=\"color\"\n  [disabled]=\"disabled\"\n  (mousedown)=\"send()\"\n  (keyup.enter)=\"send()\">\n    <mat-spinner diameter=\"24\" class=\"spinner\" *ngIf=\"_showSpinner\"></mat-spinner>\n    {{ title }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "ThemePalette"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "spinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_showSpinner",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "_timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hideSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "send",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\n\n@Component({\n  selector: 'app-button-spinner',\n  template: `<button mat-raised-button \n  [color]=\"color\"\n  [disabled]=\"disabled\"\n  (mousedown)=\"send()\"\n  (keyup.enter)=\"send()\">\n    <mat-spinner diameter=\"24\" class=\"spinner\" *ngIf=\"_showSpinner\"></mat-spinner>\n    {{ title }}\n</button>`,\n  styles: ['.spinner {position: relative; bottom: 5px; display: inline; }'],\n})\nexport class ButtonSpinnerComponent {\n  @Input() title: string;\n  @Input() color: ThemePalette;\n  @Input() disabled: boolean;\n  @Input()\n  set spinner(flag) {\n    this._showSpinner = flag;\n  }\n  @Output() clickHandler = new EventEmitter();\n\n  _showSpinner = false;\n  private _timer: any;\n\n  send() {\n    this.showSpinner();\n    this.clickHandler.emit(this);    \n    this._timer = setTimeout(() => this.hideSpinner(), 5000);\n  }\n\n  public hideSpinner() {\n    this.disabled = false;\n    this._showSpinner = false;\n    clearTimeout(this._timer);\n  }\n\n  public showSpinner() {\n    this.disabled = true;\n    this._showSpinner = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".spinner {position: relative; bottom: 5px; display: inline; }\n",
            "accessors": {
                "spinner": {
                    "name": "spinner",
                    "setSignature": {
                        "name": "spinner",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "flag",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "flag",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ButtonUploaderComponent",
            "id": "component-ButtonUploaderComponent-78e540d70b5ac60b9fe3ca89aa266e21",
            "file": "src/app/shared/form-elements/button-uploader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-uploader",
            "styleUrls": [],
            "styles": [],
            "template": "<button *ngIf=\"!asIcon\" mat-raised-button [color]=\"color\" (click)=\"show()\"><mat-icon>cloud_upload</mat-icon> {{ label }}</button>\n<button *ngIf=\"asIcon\" mat-icon-button [color]=\"color\" (click)=\"show()\" [matTooltip]=\"label\"><mat-icon>cloud_upload</mat-icon></button>\n<input\n  type=\"file\"\n  #fileUploadInput\n  multiple=\"multiple\"\n  accept=\".tar, .tar.gz, .tgz\"\n  value=\"upload_bundle_file\"\n  style=\"display: none;\"\n  (change)=\"fileUploadHandler($event.target)\"\n/>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "asIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean"
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "CanColor"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "output",
                    "defaultValue": "new EventEmitter<FormData[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fileUploadInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileUploadInput', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fileUploadHandler",
                    "args": [
                        {
                            "name": "fu",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fu",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { CanColor } from '@angular/material/core';\n\n@Component({\n  selector: 'app-button-uploader',\n  template: `\n    <button *ngIf=\"!asIcon\" mat-raised-button [color]=\"color\" (click)=\"show()\"><mat-icon>cloud_upload</mat-icon> {{ label }}</button>\n    <button *ngIf=\"asIcon\" mat-icon-button [color]=\"color\" (click)=\"show()\" [matTooltip]=\"label\"><mat-icon>cloud_upload</mat-icon></button>\n    <input\n      type=\"file\"\n      #fileUploadInput\n      multiple=\"multiple\"\n      accept=\".tar, .tar.gz, .tgz\"\n      value=\"upload_bundle_file\"\n      style=\"display: none;\"\n      (change)=\"fileUploadHandler($event.target)\"\n    />\n  `\n})\nexport class ButtonUploaderComponent {\n  @Input() color: CanColor;\n  @Input() label: string;\n  @Input() asIcon = false;\n\n  @ViewChild('fileUploadInput', { static: true }) fileUploadInput: ElementRef;\n\n  @Output() output = new EventEmitter<FormData[]>();\n\n  show() {\n    this.fileUploadInput.nativeElement.click();\n  }\n\n  fileUploadHandler(fu: HTMLInputElement) {\n    let output: FormData[] = [];\n    for (let i = 0; i < fu.files.length; i++) {\n      const file = fu.files.item(i);\n      const form = new FormData();\n      form.append('file', file, file.name);\n      output.push(form);\n    }\n    this.output.emit(output);\n    this.fileUploadInput.nativeElement.value = '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CheckComponent",
            "id": "component-CheckComponent-c426f21f229f87413fe9405fae8180a3",
            "file": "src/app/entry/job/log/check.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-check",
            "styleUrls": [],
            "styles": [
                "\n      .status {\n        white-space: nowrap;\n      }\n\n      .item-info {\n        align-items: center;\n        justify-content: flex-end;\n      }\n\n      textarea {\n        background-color: #424242;\n        border: 0;\n        color: #fff;\n        height: 300px;\n        width: 100%;\n      }\n    "
            ],
            "template": "<mat-expansion-panel *ngFor=\"let item of content; trackBy: trackBy\" class=\"panel\" [expanded]=\"current?.title === item.title\" (opened)=\"current = item\">\n  <mat-expansion-panel-header>\n    <mat-panel-title> <mat-icon *ngIf=\"item.type === 'group'\" color=\"primary\" [style.fontSize.rem]=\"'1.2'\">list</mat-icon> {{ item.title }} </mat-panel-title>\n    <mat-panel-description class=\"item-info\">\n      <span [ngClass]=\"{ status: true, accent: item.result, warn: !item.result }\">[ {{ item.result ? 'Success' : 'Fails' }} ]</span>\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n  <ng-container *ngIf=\"item.type === 'group'; else one\">\n    <p>{{ item.message }}</p>\n    <mat-accordion>\n      <app-log-check [content]=\"item.content\"></app-log-check>\n    </mat-accordion>\n  </ng-container>\n  <ng-template #one>\n    <textarea class=\"check\" [readonly]=\"true\">{{ item.message }}</textarea>\n  </ng-template>\n</mat-expansion-panel>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "CheckLog[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckLog",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CheckLog, LogFile } from '@app/core/types/task-job';\n\n@Component({\n  selector: 'app-log-check',\n  template: `\n    <mat-expansion-panel *ngFor=\"let item of content; trackBy: trackBy\" class=\"panel\" [expanded]=\"current?.title === item.title\" (opened)=\"current = item\">\n      <mat-expansion-panel-header>\n        <mat-panel-title> <mat-icon *ngIf=\"item.type === 'group'\" color=\"primary\" [style.fontSize.rem]=\"'1.2'\">list</mat-icon> {{ item.title }} </mat-panel-title>\n        <mat-panel-description class=\"item-info\">\n          <span [ngClass]=\"{ status: true, accent: item.result, warn: !item.result }\">[ {{ item.result ? 'Success' : 'Fails' }} ]</span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <ng-container *ngIf=\"item.type === 'group'; else one\">\n        <p>{{ item.message }}</p>\n        <mat-accordion>\n          <app-log-check [content]=\"item.content\"></app-log-check>\n        </mat-accordion>\n      </ng-container>\n      <ng-template #one>\n        <textarea class=\"check\" [readonly]=\"true\">{{ item.message }}</textarea>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n      .status {\n        white-space: nowrap;\n      }\n\n      .item-info {\n        align-items: center;\n        justify-content: flex-end;\n      }\n\n      textarea {\n        background-color: #424242;\n        border: 0;\n        color: #fff;\n        height: 300px;\n        width: 100%;\n      }\n    `,\n  ],\n})\nexport class CheckComponent {\n  @Input() content: CheckLog[] = [];\n  current: CheckLog;\n  trackBy(index: number) {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .status {\n        white-space: nowrap;\n      }\n\n      .item-info {\n        align-items: center;\n        justify-content: flex-end;\n      }\n\n      textarea {\n        background-color: #424242;\n        border: 0;\n        color: #fff;\n        height: 300px;\n        width: 100%;\n      }\n    \n"
        },
        {
            "name": "ClusterColumnComponent",
            "id": "component-ClusterColumnComponent-b821baa6ddbe88af207bd4338cb664ea",
            "file": "src/app/components/columns/cluster-column/cluster-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cluster-column",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      width: 100%;\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"row\">\n  <adwp-link-cell *ngIf=\"row?.cluster_id; else hasNoCluster\"\n                  [row]=\"row\"\n                  [column]=\"linkColumn\"></adwp-link-cell>\n\n  <ng-template #hasNoCluster>\n    <mat-select appInfinityScroll (topScrollPoint)=\"getNextPageCluster($event)\"\n                placeholder=\"Assign to cluster\" class=\"select-in-cell\" (click)=\"EventHelper.stopPropagation($event)\"\n                (openedChange)=\"getClusters($event)\"\n                (valueChange)=\"addCluster($event, clusters.value)\" #clusters>\n      <mat-option>...</mat-option>\n      <mat-option *ngFor=\"let item of row.clusters\" [value]=\"item.id\">\n        {{ item.title }}\n      </mat-option>\n    </mat-select>\n  </ng-template>\n\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "IHost"
                }
            ],
            "outputsClass": [
                {
                    "name": "onAddCluster",
                    "defaultValue": "new EventEmitter<AddClusterEventData>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "onGetClusters",
                    "defaultValue": "new EventEmitter<UniversalAdcmEventData<IHost>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "onGetNextPageCluster",
                    "defaultValue": "new EventEmitter<UniversalAdcmEventData<IHost>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "EventHelper",
                    "defaultValue": "EventHelper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "linkColumn",
                    "defaultValue": "{\n    label: '',\n    type: 'link',\n    value: (row) => row.cluster_name,\n    url: (row) => `/cluster/${row.cluster_id}`,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILinkColumn<IHost>",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "addCluster",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cluster",
                            "type": "ICluster",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cluster",
                            "type": "ICluster",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClusters",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNextPageCluster",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { AdwpCellComponent, ILinkColumn, EventHelper } from '@adwp-ui/widgets';\n\nimport { IHost } from '@app/models/host';\nimport { UniversalAdcmEventData } from '@app/models/universal-adcm-event-data';\nimport { ICluster } from '@app/models/cluster';\n\nexport interface AddClusterEventData extends UniversalAdcmEventData<IHost> {\n  cluster: ICluster;\n}\n\n@Component({\n  selector: 'app-cluster-column',\n  template: `\n    <ng-container *ngIf=\"row\">\n      <adwp-link-cell *ngIf=\"row?.cluster_id; else hasNoCluster\"\n                      [row]=\"row\"\n                      [column]=\"linkColumn\"></adwp-link-cell>\n\n      <ng-template #hasNoCluster>\n        <mat-select appInfinityScroll (topScrollPoint)=\"getNextPageCluster($event)\"\n                    placeholder=\"Assign to cluster\" class=\"select-in-cell\" (click)=\"EventHelper.stopPropagation($event)\"\n                    (openedChange)=\"getClusters($event)\"\n                    (valueChange)=\"addCluster($event, clusters.value)\" #clusters>\n          <mat-option>...</mat-option>\n          <mat-option *ngFor=\"let item of row.clusters\" [value]=\"item.id\">\n            {{ item.title }}\n          </mat-option>\n        </mat-select>\n      </ng-template>\n\n    </ng-container>\n  `,\n  styles: [`\n    :host {\n      width: 100%;\n    }\n  `],\n})\nexport class ClusterColumnComponent implements AdwpCellComponent<IHost> {\n\n  EventHelper = EventHelper;\n\n  @Input() row: IHost;\n\n  @Output() onGetNextPageCluster = new EventEmitter<UniversalAdcmEventData<IHost>>();\n  @Output() onGetClusters = new EventEmitter<UniversalAdcmEventData<IHost>>();\n  @Output() onAddCluster = new EventEmitter<AddClusterEventData>();\n\n  linkColumn: ILinkColumn<IHost> = {\n    label: '',\n    type: 'link',\n    value: (row) => row.cluster_name,\n    url: (row) => `/cluster/${row.cluster_id}`,\n  };\n\n  getNextPageCluster(event: MouseEvent) {\n    this.onGetNextPageCluster.emit({ event, action: 'getNextPageCluster', row: this.row });\n  }\n\n  getClusters(event: MouseEvent) {\n    this.onGetClusters.emit({ event, action: 'getClusters', row: this.row });\n  }\n\n  addCluster(event: MouseEvent, cluster: ICluster) {\n    this.onAddCluster.emit({ event, action: 'addCluster', row: this.row, cluster });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      width: 100%;\n    }\n  \n",
            "implements": [
                "AdwpCellComponent"
            ]
        },
        {
            "name": "ClusterDetailsComponent",
            "id": "component-ClusterDetailsComponent-9faa5836784ffcd9e79743d17ef017c6",
            "file": "src/app/components/cluster/cluster-details/cluster-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cluster-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'cluster'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.labelMenuItem('Services', 'service'),\n    DetailsFactory.labelMenuItem('Hosts', 'host'),\n    DetailsFactory.concernMenuItem('Hosts - Components', 'host_component', 'host-component', ConcernEventType.Cluster, 'cluster'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.Cluster, 'cluster'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'cluster'),\n    DetailsFactory.concernMenuItem('Import', 'import', 'import', ConcernEventType.Cluster, 'cluster'),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\nimport { ICluster } from '@app/models/cluster';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { ClusterEntityService } from '@app/services/cluster-entity.service';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-cluster-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class ClusterDetailsComponent extends DetailAbstractDirective<ICluster> {\n\n  entityParam = 'cluster';\n\n  leftMenu = [\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.labelMenuItem('Services', 'service'),\n    DetailsFactory.labelMenuItem('Hosts', 'host'),\n    DetailsFactory.concernMenuItem('Hosts - Components', 'host_component', 'host-component', ConcernEventType.Cluster, 'cluster'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.Cluster, 'cluster'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'cluster'),\n    DetailsFactory.concernMenuItem('Import', 'import', 'import', ConcernEventType.Cluster, 'cluster'),\n  ];\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: ClusterEntityService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "ClusterEntityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "ClusterEntityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "ClusterHostComponent",
            "id": "component-ClusterHostComponent-452fcebebe77d8351088c0cb349316e1",
            "file": "src/app/components/cluster/host/cluster-host.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cluster-host",
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }",
                ".add-button {position:fixed; right: 20px;top:120px;}"
            ],
            "template": "<app-add-button [name]=\"type\" class=\"add-button\">Add hosts</app-add-button>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventTypes",
                    "defaultValue": "[ConcernEventType.Host]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.fqdnColumn(),\n    ListFactory.providerColumn(),\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.configColumn(this),\n    {\n      type: 'buttons',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      buttons: [{\n        icon: 'link_off',\n        tooltip: 'Remove from cluster',\n        callback: (row, event) => this.delete(event, row),\n      }],\n    }\n  ] as IColumns<IHost>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "type",
                    "defaultValue": "'host2cluster'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IColumns } from '@adwp-ui/widgets';\n\nimport { TypeName } from '@app/core/types';\nimport { IHost } from '@app/models/host';\nimport { ListFactory } from '../../../factories/list.factory';\nimport { ConcernListDirective } from '@app/abstract-directives/concern-list.directive';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-cluster-host',\n  template: `\n    <app-add-button [name]=\"type\" class=\"add-button\">Add hosts</app-add-button>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }', '.add-button {position:fixed; right: 20px;top:120px;}'],\n})\nexport class ClusterHostComponent extends ConcernListDirective<IHost> {\n\n  type: TypeName = 'host2cluster';\n  eventTypes = [ConcernEventType.Host];\n\n  listColumns = [\n    ListFactory.fqdnColumn(),\n    ListFactory.providerColumn(),\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.configColumn(this),\n    {\n      type: 'buttons',\n      className: 'list-control',\n      headerClassName: 'list-control',\n      buttons: [{\n        icon: 'link_off',\n        tooltip: 'Remove from cluster',\n        callback: (row, event) => this.delete(event, row),\n      }],\n    }\n  ] as IColumns<IHost>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n.add-button {position:fixed; right: 20px;top:120px;}\n",
            "extends": "ConcernListDirective"
        },
        {
            "name": "ClusterListComponent",
            "id": "component-ClusterListComponent-e3c481ed7e40d3ba12e45f040eb5081b",
            "file": "src/app/entry/cluster/cluster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      flex: 1;\n      max-width: 100%;\n    }\n  "
            ],
            "template": "<mat-toolbar class=\"toolbar\">\n  <app-crumbs [navigation]=\"[{ url: '/cluster', title: 'clusters' }]\"></app-crumbs>\n  <app-add-button [name]=\"type\" (added)=\"current = $event\">Create {{ type }}</app-add-button>\n</mat-toolbar>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventTypes",
                    "defaultValue": "[ConcernEventType.Cluster]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.nameColumn(),\n    ListFactory.bundleColumn(),\n    ListFactory.descriptionColumn(),\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.importColumn(this),\n    ListFactory.updateColumn(),\n    ListFactory.configColumn(this),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<ICluster>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "type",
                    "defaultValue": "'cluster'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IColumns } from '@adwp-ui/widgets';\n\nimport { ICluster } from '@app/models/cluster';\nimport { TypeName } from '@app/core/types';\nimport { ListFactory } from '../../factories/list.factory';\nimport { ConcernListDirective } from '../../abstract-directives/concern-list.directive';\nimport { ConcernEventType } from '../../models/concern/concern-reason';\n\n@Component({\n  template: `\n    <mat-toolbar class=\"toolbar\">\n      <app-crumbs [navigation]=\"[{ url: '/cluster', title: 'clusters' }]\"></app-crumbs>\n      <app-add-button [name]=\"type\" (added)=\"current = $event\">Create {{ type }}</app-add-button>\n    </mat-toolbar>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [`\n    :host {\n      flex: 1;\n      max-width: 100%;\n    }\n  `],\n})\nexport class ClusterListComponent extends ConcernListDirective<ICluster> {\n\n  type: TypeName = 'cluster';\n  eventTypes = [ConcernEventType.Cluster];\n\n  listColumns = [\n    ListFactory.nameColumn(),\n    ListFactory.bundleColumn(),\n    ListFactory.descriptionColumn(),\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.importColumn(this),\n    ListFactory.updateColumn(),\n    ListFactory.configColumn(this),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<ICluster>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      flex: 1;\n      max-width: 100%;\n    }\n  \n",
            "extends": "ConcernListDirective"
        },
        {
            "name": "ClusterStatusComponent",
            "id": "component-ClusterStatusComponent-4ac5bff5bfa07f87ad6ac90979041c72",
            "file": "src/app/components/cluster/cluster-status/cluster-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cluster-status",
            "styleUrls": [
                "../../../styles/status-tree.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/status-tree.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClusterEntityService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "folding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Folding",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "statusTree",
                    "defaultValue": "new BehaviorSubject<StatusTreeType>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree', {static: false}"
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "eventReceived",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "getEntityIdFromParams",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "ClusterStatusTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ClusterStatusTree",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "ClusterStatusTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "expandCollapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "pipeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { fromJS, updateIn } from 'immutable';\n\nimport { ClusterEntityService } from '@app/services/cluster-entity.service';\nimport { ClusterStatusTree } from '@app/models/status-tree';\nimport { EventMessage, SocketState } from '@app/core/store';\nimport { StatusAbstractDirective } from '@app/abstract-directives/status.abstract.directive';\nimport { ICluster } from '../../../models/cluster';\n\n@Component({\n  selector: 'app-cluster-status',\n  templateUrl: '../../../templates/status-tree.html',\n  styleUrls: ['../../../styles/status-tree.scss']\n})\nexport class ClusterStatusComponent extends StatusAbstractDirective<ClusterStatusTree, ICluster> {\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected store: Store<SocketState>,\n    public entityService: ClusterEntityService,\n  ) {\n    super(route, store, entityService);\n  }\n\n  eventReceived(event: EventMessage) {\n    let output;\n    switch (event.object.type) {\n      case 'hostcomponent':\n        output = updateIn(fromJS(this.statusTree.value), ['chilren', 'services'], (services: any[]) =>\n          services.map(service => updateIn(service, ['hc'], (components: any) =>\n            components.map( (component: any) => updateIn(component, ['hosts'], (hosts: any) =>\n              hosts.map((host: any) => {\n                if (host.get('id') === event.object.id && component.get('id') === +event.object.details.id) {\n                  return host.set('status', +event.object.details.value);\n                }\n                return host;\n              })\n            ))\n          ))\n        );\n        this.statusTree.next(output.toJS() as any as ClusterStatusTree);\n        break;\n      case 'component':\n        output = updateIn(fromJS(this.statusTree.value), ['chilren', 'services'], (services: any[]) => (\n          services.map(service => updateIn(service, ['hc'], (components: any) => components.map( (component: any) => {\n            if (component.get('id') === event.object.id) {\n              return component.set('status', +event.object.details.value);\n            }\n            return component;\n          })))\n        ));\n        this.statusTree.next(output.toJS() as any as ClusterStatusTree);\n        break;\n      case 'service':\n        output = updateIn(fromJS(this.statusTree.value), ['chilren', 'services'], (services: any[]) => (\n          services.map(service => {\n            if (service.get('id') === event.object.id) {\n              return service.set('status', +event.object.details.value);\n            }\n            return service;\n          })));\n        this.statusTree.next(output.toJS() as any as ClusterStatusTree);\n        break;\n      case 'host':\n        output = updateIn(fromJS(this.statusTree.value), ['chilren', 'hosts'], (hosts: any[]) => (\n          hosts.map(host => {\n            if (host.get('id') === event.object.id) {\n              return host.set('status', +event.object.details.value);\n            }\n            return host;\n          })\n        ));\n        this.statusTree.next(output.toJS() as any as ClusterStatusTree);\n        break;\n      case 'cluster':\n        output = fromJS(this.statusTree.value);\n        if (output.get('id') === event.object.id) {\n          output = output.set('status', +event.object.details.value);\n        }\n        this.statusTree.next(output.toJS() as any as ClusterStatusTree);\n        break;\n    }\n  }\n\n  getEntityIdFromParams(): number {\n    return +this.route.parent.snapshot.params.cluster;\n  }\n\n  prepareStatusTree(input: ClusterStatusTree): ClusterStatusTree {\n    input.id = this.entityId;\n    return input;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n}\n\n.controls {\n  position: fixed;\n  top: 130px;\n  right: 10px;\n\n  .notify {\n    opacity: 0;\n\n    &>span {\n      line-height: 24px;\n      vertical-align: text-bottom;\n    }\n  }\n}\n",
                    "styleUrl": "../../../styles/status-tree.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entityService",
                        "type": "ClusterEntityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityService",
                        "type": "ClusterEntityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "StatusAbstractDirective",
            "templateData": "<ng-container *ngIf=\"loading; else loaded\">\n  <p>Loading...</p>\n</ng-container>\n\n<ng-template #loaded>\n\n  <div class=\"controls\">\n    <button mat-raised-button color=\"primary\" (click)=\"expandCollapseAll()\">Expand/Collapse All</button>\n  </div>\n\n  <app-status-tree\n    [tree]=\"statusTree | async | entityStatusToStatusTree : entityService : pipeData()\"\n    [folding]=\"folding\"\n    #tree\n  ></app-status-tree>\n\n</ng-template>\n"
        },
        {
            "name": "ConcernComponent",
            "id": "component-ConcernComponent-69e43a1e2e7751781e4b7f1696f91b5e",
            "file": "src/app/components/concern/concern.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-concern",
            "styleUrls": [
                "./concern.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./concern.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "concern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": ""
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ownConcern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Concern",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "preparedMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { ConcernService } from '@app/services/concern.service';\nimport { Concern } from '@app/models/concern/concern';\n\n@Component({\n  selector: 'app-concern',\n  templateUrl: './concern.component.html',\n  styleUrls: ['./concern.component.scss']\n})\nexport class ConcernComponent {\n\n  private ownConcern: Concern;\n  @Input() set concern(concern: Concern) {\n    this.ownConcern = concern;\n    if (this.concern) {\n      this.preparedMessage = this.concernService.parse(this.concern.reason.message);\n    }\n  }\n  get concern(): Concern {\n    return this.ownConcern;\n  }\n\n  @Input() set data(data: { concern: Concern }) {\n    if (data?.concern) {\n      this.ownConcern = data.concern;\n      this.preparedMessage = this.concernService.parse(this.concern.reason.message);\n    }\n  }\n\n  preparedMessage: string[];\n\n  constructor(\n    private concernService: ConcernService,\n  ) { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./concern.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "concern": {
                    "name": "concern",
                    "setSignature": {
                        "name": "concern",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "concern",
                                "type": "Concern",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "concern",
                                "type": "Concern",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "concern",
                        "type": "",
                        "returnType": "Concern",
                        "line": 20
                    }
                },
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngFor=\"let item of preparedMessage\">\n  <app-concern-item\n    *ngIf=\"item.charAt(0) === '$'; else regularString\"\n    [item]=\"item | issueMessagePlaceholder\"\n    [placeholder]=\"concern.reason.placeholder[item | issueMessagePlaceholder]\"\n  ></app-concern-item>\n  <ng-template #regularString><span>{{item}}</span></ng-template>\n</ng-container>\n"
        },
        {
            "name": "ConcernItemComponent",
            "id": "component-ConcernItemComponent-89417e0225e70de039599d1329820c93",
            "file": "src/app/components/concern/concern-item/concern-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-concern-item",
            "styleUrls": [
                "./concern-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./concern-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "IMPlaceholderItem"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "IMPlaceholderItemType",
                    "defaultValue": "IMPlaceholderItemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "runAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { IMPlaceholderItem, IMPlaceholderItemType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-concern-item',\n  templateUrl: './concern-item.component.html',\n  styleUrls: ['./concern-item.component.scss']\n})\nexport class ConcernItemComponent {\n\n  IMPlaceholderItemType = IMPlaceholderItemType;\n\n  @Input() item: string;\n  @Input() placeholder: IMPlaceholderItem;\n\n  runAction() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~@angular/material/_theming\";\n\n.action-link {\n  color: #1ee564;\n  cursor: pointer;\n}\n\n.action-button {\n  padding: 0;\n  min-width: auto;\n  line-height: normal;\n}\n\na {\n  cursor: pointer;\n  color: mat-color($mat-blue, 200) !important;\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  .red {\n    color: #f00;\n  }\n}\n",
                    "styleUrl": "./concern-item.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container [ngSwitch]=\"placeholder.type\">\n  <ng-container *ngSwitchCase=\"IMPlaceholderItemType.ComponentActionRun\">\n    <button\n      mat-button\n      color=\"accent\"\n      matTooltip=\"Run action\"\n      class=\"action-button\"\n      (click)=\"runAction()\"\n    >\n      <mat-icon>play_circle_outline</mat-icon> {{placeholder.name}}\n    </button>\n  </ng-container>\n  <a\n    *ngSwitchCase=\"IMPlaceholderItemType.Cluster\"\n    [routerLink]=\"['/cluster', placeholder.ids.cluster, 'main']\"\n    class=\"issue\"\n  >{{placeholder.name}}</a>\n  <a\n    *ngSwitchCase=\"IMPlaceholderItemType.Service\"\n    [routerLink]=\"['/cluster', placeholder.ids.cluster, 'service', placeholder.ids.service, 'main']\"\n    class=\"issue\"\n  >{{placeholder.name}}</a>\n  <a\n    *ngSwitchCase=\"IMPlaceholderItemType.Component\"\n    [routerLink]=\"['/cluster', placeholder.ids.cluster, 'service', placeholder.ids.service, 'component', placeholder.ids.component, 'main']\"\n    class=\"issue\"\n  >{{placeholder.name}}</a>\n  <a\n    *ngSwitchCase=\"IMPlaceholderItemType.HostProvider\"\n    [routerLink]=\"['/provider', placeholder.ids.provider, 'main']\"\n    class=\"issue\"\n  >{{placeholder.name}} </a>\n  <a\n    *ngSwitchCase=\"IMPlaceholderItemType.Host\"\n    [routerLink]=\"['/host', placeholder.ids.host, 'main']\"\n    class=\"issue\"\n  >{{placeholder.name}}</a>\n  <a\n    *ngSwitchCase=\"IMPlaceholderItemType.Job\"\n    [routerLink]=\"['/job', placeholder.ids, 'main']\"\n    class=\"issue\"\n  >{{placeholder.name}}</a>\n  <a *ngSwitchDefault class=\"issue red\">{{placeholder.name}}</a>\n</ng-container>\n"
        },
        {
            "name": "ConcernListComponent",
            "id": "component-ConcernListComponent-8643d33470159a9f00c2b6732660a775",
            "file": "src/app/components/concern/concern-list/concern-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-concern-list",
            "styleUrls": [
                "./concern-list.component.scss"
            ],
            "styles": [],
            "template": "<ul>\n  <li *ngFor=\"let concern of concerns\">\n    <app-concern [concern]=\"concern\"></app-concern>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "concerns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "[]"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ownConcerns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Concern[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { Concern } from '@app/models/concern/concern';\n\n@Component({\n  selector: 'app-concern-list',\n  template: `\n    <ul>\n      <li *ngFor=\"let concern of concerns\">\n        <app-concern [concern]=\"concern\"></app-concern>\n      </li>\n    </ul>\n  `,\n  styleUrls: ['./concern-list.component.scss']\n})\nexport class ConcernListComponent {\n\n  private ownConcerns: Concern[] = [];\n  @Input() set concerns(concerns: Concern[]) {\n    this.ownConcerns = concerns;\n  }\n  get concerns(): Concern[] {\n    return this.ownConcerns;\n  }\n\n  @Input() set data(data: { concerns: Concern[] }) {\n    if (data?.concerns) {\n      this.ownConcerns = data.concerns;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\n  padding-inline-start: 0px;\n  padding-left: 15px;\n  margin-block-start: 0px;\n  margin-block-end: 0px;\n}\n",
                    "styleUrl": "./concern-list.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "concerns": {
                    "name": "concerns",
                    "setSignature": {
                        "name": "concerns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "concerns",
                                "type": "Concern[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "concerns",
                                "type": "Concern[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "concerns",
                        "type": "[]",
                        "returnType": "Concern[]",
                        "line": 22
                    }
                },
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ConcernListRefComponent",
            "id": "component-ConcernListRefComponent-905aa9a4bab05cc6e832af97f9e6a89d",
            "file": "src/app/components/concern/concern-list-ref/concern-list-ref.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-concern-list-ref",
            "styleUrls": [
                "./concern-list-ref.component.scss"
            ],
            "styles": [],
            "template": "<button\n  appPopover\n  mat-icon-button\n  color=\"warn\"\n  [component]=\"ConcernListComponent\"\n  [data]=\"data\"\n  [hideTimeout]=\"200\"\n>\n  <mat-icon>priority_hight</mat-icon>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "concerns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ConcernListComponent",
                    "defaultValue": "ConcernListComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "ownConcerns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Concern[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { ConcernListComponent } from '@app/components/concern/concern-list/concern-list.component';\nimport { Concern } from '@app/models/concern/concern';\n\n@Component({\n  selector: 'app-concern-list-ref',\n  template: `\n    <button\n      appPopover\n      mat-icon-button\n      color=\"warn\"\n      [component]=\"ConcernListComponent\"\n      [data]=\"data\"\n      [hideTimeout]=\"200\"\n    >\n      <mat-icon>priority_hight</mat-icon>\n    </button>\n  `,\n  styleUrls: ['./concern-list-ref.component.scss']\n})\nexport class ConcernListRefComponent {\n\n  ConcernListComponent = ConcernListComponent;\n\n  private ownConcerns: Concern[];\n  @Input() set concerns(concerns: Concern[]) {\n    this.ownConcerns = concerns;\n    this.data = {\n      concerns,\n    };\n  }\n  data: { concerns: Concern[] };\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./concern-list-ref.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "concerns": {
                    "name": "concerns",
                    "setSignature": {
                        "name": "concerns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "concerns",
                                "type": "Concern[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "concerns",
                                "type": "Concern[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ConcernMenuItemComponent",
            "id": "component-ConcernMenuItemComponent-d7d923215ebc81229ec89255c926120e",
            "file": "src/app/shared/details/left-menu-items/concern-menu-item/concern-menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-concern-menu-item",
            "styleUrls": [],
            "styles": [
                "a span { white-space: nowrap; }"
            ],
            "template": "<a mat-list-item\n   [appForTest]=\"'tab_' + link\"\n   [routerLink]=\"link\"\n   routerLinkActive=\"active\"\n>\n  <span>{{ label }}</span>&nbsp;\n  <ng-container *ngIf=\"concernsPresent\">\n    <mat-icon color=\"warn\">\n      priority_hight\n    </mat-icon>\n  </ng-container>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "concernsPresent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getConcernStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { MenuItemAbstractDirective } from '@app/abstract-directives/menu-item.abstract.directive';\nimport { BaseEntity } from '@app/core/types';\nimport { ApiService } from '@app/core/api';\nimport { ConcernService } from '@app/services/concern.service';\nimport { environment } from '@env/environment';\n\n@Component({\n  selector: 'app-concern-menu-item',\n  template: `\n    <a mat-list-item\n       [appForTest]=\"'tab_' + link\"\n       [routerLink]=\"link\"\n       routerLinkActive=\"active\"\n    >\n      <span>{{ label }}</span>&nbsp;\n      <ng-container *ngIf=\"concernsPresent\">\n        <mat-icon color=\"warn\">\n          priority_hight\n        </mat-icon>\n      </ng-container>\n    </a>\n  `,\n  styles: ['a span { white-space: nowrap; }'],\n})\nexport class ConcernMenuItemComponent extends MenuItemAbstractDirective<BaseEntity> implements OnInit {\n\n  concernsPresent = false;\n\n  @Input() set entity(entity: BaseEntity) {\n    this._entity = entity;\n    this.getConcernStatus();\n  }\n\n  get entity(): BaseEntity {\n    return this._entity;\n  }\n\n  constructor(\n    private api: ApiService,\n    private concernService: ConcernService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.concernService.events({ types: [this.data.type] })\n      .subscribe(_ => this.getConcernStatus());\n  }\n\n  private getConcernStatus(): void {\n    const params = {\n      owner_type: this.data.owner_type,\n      owner_id: this.entity.id + '',\n      cause: this.data.cause\n    };\n\n    this.api.get(`${environment.apiRoot}/concern`, params)\n      .subscribe((concerns: any[]) => this.concernsPresent = !!concerns?.length);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "a span { white-space: nowrap; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "MenuItemAbstractDirective",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "entity": {
                    "name": "entity",
                    "setSignature": {
                        "name": "entity",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "entity",
                                "type": "BaseEntity",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "entity",
                                "type": "BaseEntity",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "entity",
                        "type": "",
                        "returnType": "BaseEntity",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "ConfigComponent",
            "id": "component-ConfigComponent-74a39b6e09f4a82c95ec0e6c533143c7",
            "file": "src/app/shared/configuration/main/config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MainService"
                }
            ],
            "selector": "app-config-form",
            "styleUrls": [
                "./config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string"
                },
                {
                    "name": "isGroupConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "event",
                    "defaultValue": "new EventEmitter<{ name: string; data?: any }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_workerSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigFieldsComponent",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fls'"
                        }
                    ]
                },
                {
                    "name": "historyComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HistoryComponent",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'history'"
                        }
                    ]
                },
                {
                    "name": "historyShow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isLock",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "loadingStatus",
                    "defaultValue": "'Loading...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "rawConfig",
                    "defaultValue": "new BehaviorSubject<IConfig>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "saveFlag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "tools",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToolsComponent",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tools'"
                        }
                    ]
                },
                {
                    "name": "worker$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<WorkerInstance>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "socket$",
                    "defaultValue": "this.socket.pipe(this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "SocketListenerDirective"
                    }
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_getConfig",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IConfig>",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareVersion",
                    "args": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "c",
                            "type": "ISearchParam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "ISearchParam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfigUrlFromWorker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SocketListenerDirective"
                    }
                },
                {
                    "name": "startListenSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SocketListenerDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { EventMessage, SocketState } from '@app/core/store';\nimport { SocketListenerDirective } from '@app/shared/directives';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, Observable, of, Subscription } from 'rxjs';\nimport { catchError, finalize, tap } from 'rxjs/operators';\n\nimport { ConfigFieldsComponent } from '../fields/fields.component';\nimport { HistoryComponent } from '../tools/history.component';\nimport { ToolsComponent } from '../tools/tools.component';\nimport { IConfig } from '../types';\nimport { historyAnime, ISearchParam, MainService } from './main.service';\nimport { WorkerInstance } from '@app/core/services/cluster.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AttributeService } from '@app/shared/configuration/attributes/attribute.service';\nimport * as deepmerge from 'deepmerge';\n\n@Component({\n  selector: 'app-config-form',\n  templateUrl: './config.component.html',\n  styleUrls: ['./config.component.scss'],\n  animations: historyAnime,\n  providers: [MainService]\n})\nexport class ConfigComponent extends SocketListenerDirective implements OnChanges, OnInit, AfterViewInit {\n  loadingStatus = 'Loading...';\n  rawConfig = new BehaviorSubject<IConfig>(null);\n  saveFlag = false;\n  historyShow = false;\n  isLock = false;\n  isLoading = false;\n\n  worker$: Observable<WorkerInstance>;\n\n  @ViewChild('fls') fields: ConfigFieldsComponent;\n  @ViewChild('history') historyComponent: HistoryComponent;\n  @ViewChild('tools') tools: ToolsComponent;\n\n  @Input()\n  configUrl: string;\n\n  @Input()\n  isGroupConfig: boolean;\n\n  @Output()\n  event = new EventEmitter<{ name: string; data?: any }>();\n  private _workerSubscription: Subscription = Subscription.EMPTY;\n\n  constructor(\n    private service: MainService,\n    private attributesSrv: AttributeService,\n    public cd: ChangeDetectorRef,\n    socket: Store<SocketState>,\n    route: ActivatedRoute,\n  ) {\n    super(socket);\n    this.isGroupConfig = route.snapshot.data['isGroupConfig'];\n    this.worker$ = service.worker$.pipe(this.takeUntil());\n  }\n\n  ngAfterViewInit(): void {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const url = changes['configUrl'];\n    const firstChange = url?.firstChange;\n    if (!firstChange || !url) this.getConfigUrlFromWorker();\n  }\n\n  ngOnInit(): void {\n    if (!this.configUrl) this.getConfigUrlFromWorker();\n    this._getConfig(this.configUrl).subscribe();\n\n    super.startListenSocket();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._workerSubscription.unsubscribe();\n  }\n\n  onReady(): void {\n    this.tools.isAdvanced = this.fields.isAdvanced;\n    this.tools.description.setValue(this.rawConfig.value.description);\n    this.filter(this.tools.filterParams);\n    this.cd.detectChanges();\n\n    if (!this.isGroupConfig) {\n      this.service.getHistoryList(this.configUrl, this.rawConfig.value.id).subscribe((h) => {\n        this.historyComponent.compareConfig = h;\n        this.tools.disabledHistory = !h.length;\n        this.cd.detectChanges();\n      });\n    }\n\n  };\n\n  filter(c: ISearchParam): void {\n    this.service.filterApply(this.fields.dataOptions, c);\n    this.cd.detectChanges();\n  }\n\n  socketListener(m: EventMessage): void {\n    if (\n      m.object.type === this.service.Current?.typeName &&\n      m.object.id === this.service.Current.id &&\n      !this.saveFlag &&\n      (m.event === 'change_config' || m.event === 'change_state')\n    ) {\n      this.isLock = m.object.details.value === 'locked';\n      this.reset();\n      this._getConfig(this.configUrl).subscribe();\n    }\n  }\n\n  getConfigUrlFromWorker(): void {\n    this._workerSubscription.unsubscribe();\n    this._workerSubscription = this.worker$\n      .subscribe(_ => this.configUrl = this.service.Current?.config);\n  }\n\n  save(url: string): void {\n    const form = this.fields.form;\n\n    if (form.valid) {\n      this.saveFlag = true;\n      this.historyComponent.reset();\n      const config = this.service.parseValue(this.fields.form.getRawValue(), this.rawConfig.value.config);\n      const send = {\n        config,\n        attr: deepmerge(deepmerge(this.rawConfig.getValue().attr, this.fields.attr), this.attributesSrv.rawAttributes()),\n        description: this.tools.description.value,\n        obj_ref: this.rawConfig.value.obj_ref\n      };\n\n      if (this.tools.description.value === this.rawConfig.value.description) {\n        delete send.description;\n      }\n\n      this.isLoading = true;\n\n      this.service.send(url, send).pipe(\n        tap((c) => {\n          this.saveFlag = false;\n          this.rawConfig.next(c);\n          this.cd.detectChanges();\n          this.event.emit({ name: 'send', data: this.fields });\n        }),\n        finalize(() => this.isLoading = false),\n      ).subscribe();\n    } else {\n      Object.keys(form.controls).forEach((controlName) => form.controls[controlName].markAsTouched());\n    }\n  }\n\n  changeVersion(url: string, id: number): void {\n    this.isLoading = true;\n    this.reset();\n    this.service.changeVersion(url, id).pipe(\n      tap((c) => this.rawConfig.next(c)),\n      finalize(() => this.isLoading = false),\n      catchError(() => {\n        this.loadingStatus = 'There is no config for this object.';\n        return of(null);\n      })\n    ).subscribe();\n  }\n\n  compareVersion(ids: number[]): void {\n    if (ids) this.service.compareConfig(ids, this.fields.dataOptions, this.historyComponent.compareConfig);\n  }\n\n  reset(): void {\n    this.fields.form.reset();\n    this.fields.dataOptions = [];\n    this.historyComponent.reset();\n  }\n\n\n  private _getConfig(url: string): Observable<IConfig> {\n    this.isLoading = true;\n    return this.service.getConfig(url).pipe(\n      tap((c) => {\n        this.attributesSrv.init(c.attr);\n      }),\n      tap((c) => this.rawConfig.next(c)),\n      finalize(() => this.isLoading = false),\n      catchError(() => {\n        this.loadingStatus = 'There is no config for this object.';\n        return of(null);\n      })\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n  position: relative;\n\n  ::ng-deep {\n    .mat-form-field-infix {\n      display: flex;\n    }\n  }\n}\n\n.na-hu {\n  position: absolute;\n  top: -80000px;\n}\n\n.fields {\n  position: absolute;\n  top: 70px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  overflow: auto;\n  z-index: 2;\n  padding: 0 10px;\n}\n\n.pre-load {\n  position: absolute;\n  top: 60px;\n  width: 100%;\n  text-align: center;\n}\n",
                    "styleUrl": "./config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MainService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "attributesSrv",
                        "type": "AttributeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MainService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "attributesSrv",
                        "type": "AttributeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "SocketListenerDirective",
            "implements": [
                "OnChanges",
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<app-tools #tools (applyFilter)=\"filter($event)\"\n           (save)=\"save(configUrl)\"\n           (showHistory)=\"historyShow=$event\"\n           [disabledSave]=\"isLock || fls.form.invalid\">\n\n</app-tools>\n\n<div [@history]=\"(historyShow) ? 'showTools' : 'hideTools'\">\n  <app-history #history (compare)=\"compareVersion($event)\" (version)=\"changeVersion(configUrl, $event)\"></app-history>\n</div>\n\n<div class=\"pre-load\" *ngIf=\"isLoading\">\n  <span>{{ loadingStatus }}</span>\n</div>\n\n<div class=\"fields\" [@history]=\"historyShow ? 'show' : 'hide'\">\n  <app-config-fields #fls [model]=\"rawConfig | async\"\n                     (event)=\"onReady()\"></app-config-fields>\n</div>\n\n"
        },
        {
            "name": "ConfigFieldAttributeProviderComponent",
            "id": "component-ConfigFieldAttributeProviderComponent-e261db5c02c260b0522b272fa9521958",
            "file": "src/app/shared/configuration/attributes/attribute-provider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config-field-attribute-provider",
            "styleUrls": [],
            "styles": [
                ":host {display: flex; width: 100%; margin-bottom: 20px}",
                ":host:last-child {margin-bottom: 0}",
                ":host:nth-child(odd) {\n      background-color: #4e4e4e;\n    }"
            ],
            "template": "<ng-container *ngIf=\"!attributesSrv?.attributes\">\n  <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n</ng-container>\n\n<ng-container #container></ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "FormGroup"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "IFieldOptions"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "attributesSrv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeService",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "containerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<AttributeWrapper>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigFieldMarker",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ConfigFieldMarker"
                        }
                    ]
                },
                {
                    "name": "fieldComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FieldComponent>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "CONFIG_FIELD, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  ContentChild,\n  ContentChildren,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { ConfigFieldMarker } from '@app/shared/configuration/attributes/config-field.directive';\nimport { AttributeService, AttributeWrapper } from '@app/shared/configuration/attributes/attribute.service';\nimport { FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { CONFIG_FIELD, FieldComponent } from '@app/shared/configuration/field/field.component';\n\n@Component({\n  selector: 'app-config-field-attribute-provider',\n  template: `\n    <ng-container *ngIf=\"!attributesSrv?.attributes\">\n      <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    </ng-container>\n\n    <ng-container #container></ng-container>\n  `,\n  styles: [\n    ':host {display: flex; width: 100%; margin-bottom: 20px}',\n    ':host:last-child {margin-bottom: 0}',\n    `:host:nth-child(odd) {\n      background-color: #4e4e4e;\n    }`\n  ],\n})\nexport class ConfigFieldAttributeProviderComponent implements AfterViewInit {\n\n  template: TemplateRef<any>;\n\n  containerRef: ComponentRef<AttributeWrapper>;\n\n  @Input('form')\n  parametersForm: FormGroup;\n\n  @Input()\n  options: IFieldOptions;\n\n  @ViewChild('container', { read: ViewContainerRef })\n  container: ViewContainerRef;\n\n  @ContentChild(ConfigFieldMarker)\n  field: ConfigFieldMarker;\n\n  @ContentChildren(CONFIG_FIELD, { descendants: true })\n  fieldComponent: QueryList<FieldComponent>;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver,\n              public attributesSrv: AttributeService,\n              private _cdr: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.container.clear();\n    if (this.attributesSrv.attributes) {\n      this.attributesSrv.attributes.forEach((attribute) => {\n        if (attribute.wrapper) {\n          const factory: ComponentFactory<AttributeWrapper> = this.componentFactoryResolver.resolveComponentFactory(attribute.wrapper);\n          this.containerRef = this.container.createComponent(factory);\n          this.containerRef.instance.fieldTemplate = this.field.template;\n          this.containerRef.instance.wrapperOptions = attribute.options;\n          this.containerRef.instance.fieldOptions = this.options;\n          this.containerRef.instance.attributeForm = attribute.form;\n          this.containerRef.instance.parametersForm = this.parametersForm;\n          Promise.resolve().then(() => this.containerRef.instance.field = this.fieldComponent.first);\n        }\n      });\n    } else {\n      this.template = this.field.template;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {display: flex; width: 100%; margin-bottom: 20px}\n:host:last-child {margin-bottom: 0}\n:host:nth-child(odd) {\n      background-color: #4e4e4e;\n    }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "attributesSrv",
                        "type": "AttributeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "attributesSrv",
                        "type": "AttributeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "ConfigFieldsComponent",
            "id": "component-ConfigFieldsComponent-ce16c0bfc18c5a7c34ead3187556d46c",
            "file": "src/app/shared/configuration/fields/fields.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config-fields",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngFor=\"let item of dataOptions; trackBy: trackBy\">\n  <app-group-fields *ngIf=\"isPanel(item); else one\" [panel]=\"item\" [form]=\"form\"></app-group-fields>\n  <ng-template #one>\n    <ng-container *ngIf=\"!item.hidden\">\n      <app-config-field-attribute-provider [form]=\"form\" [options]=\"item\">\n        <app-field *configField [form]=\"form\" [options]=\"item\"></app-field>\n      </app-config-field-attribute-provider>\n    </ng-container>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "TFormOptions[]"
                },
                {
                    "name": "form",
                    "defaultValue": "this.service.toFormGroup()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "event",
                    "defaultValue": "new EventEmitter<{ name: string; data?: any }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FieldComponent>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "FieldComponent"
                        }
                    ]
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<GroupFieldsComponent>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "GroupFieldsComponent"
                        }
                    ]
                },
                {
                    "name": "isAdvanced",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "rawConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "shapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "isPanel",
                    "args": [
                        {
                            "name": "item",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TFormOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stableView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method detects the moment rendering final of all fields and groups (with internal fields) on the page\nit's need for test\n\n",
                    "description": "<p>This method detects the moment rendering final of all fields and groups (with internal fields) on the page\nit&#39;s need for test</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IPanelOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IPanelOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, QueryList, ViewChildren } from '@angular/core';\n\nimport { ChannelService, FullyRenderedService, keyChannelStrim } from '@app/core/services';\nimport { FieldService, TFormOptions } from '../services/field.service';\nimport { FieldComponent } from '../field/field.component';\nimport { GroupFieldsComponent } from '../group-fields/group-fields.component';\nimport { IConfig, IPanelOptions } from '../types';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\n@Component({\n  selector: 'app-config-fields',\n  template: `\n    <ng-container *ngFor=\"let item of dataOptions; trackBy: trackBy\">\n      <app-group-fields *ngIf=\"isPanel(item); else one\" [panel]=\"item\" [form]=\"form\"></app-group-fields>\n      <ng-template #one>\n        <ng-container *ngIf=\"!item.hidden\">\n          <app-config-field-attribute-provider [form]=\"form\" [options]=\"item\">\n            <app-field *configField [form]=\"form\" [options]=\"item\"></app-field>\n          </app-config-field-attribute-provider>\n        </ng-container>\n      </ng-template>\n    </ng-container>\n  `\n})\nexport class ConfigFieldsComponent extends BaseDirective {\n\n  @Input() dataOptions: TFormOptions[] = [];\n  @Input() form = this.service.toFormGroup();\n  @Output()\n  event = new EventEmitter<{ name: string; data?: any }>();\n\n\n  rawConfig: IConfig;\n  shapshot: any;\n  isAdvanced = false;\n\n\n  @Input()\n  set model(data: IConfig) {\n    if (!data) return;\n    this.rawConfig = data;\n    this.dataOptions = this.service.getPanels(data);\n    this.form = this.service.toFormGroup(this.dataOptions);\n    this.isAdvanced = data.config.some((a) => a.ui_options && a.ui_options.advanced);\n    this.shapshot = { ...this.form.value };\n    this.event.emit({ name: 'load', data: { form: this.form } });\n    this.stableView();\n  }\n\n  @ViewChildren(FieldComponent)\n  fields: QueryList<FieldComponent>;\n\n  @ViewChildren(GroupFieldsComponent)\n  groups: QueryList<GroupFieldsComponent>;\n\n  constructor(private service: FieldService,\n              private fr: FullyRenderedService,\n              private radio: ChannelService) {super();}\n\n  get attr() {\n    return this.dataOptions.filter((a) => a.type === 'group' && (a as IPanelOptions).activatable).reduce((p, c: IPanelOptions) => ({\n      ...p,\n      [c.name]: { active: c.active }\n    }), {});\n  }\n\n  isPanel(item: TFormOptions) {\n    return 'options' in item && !item.hidden;\n  }\n\n  trackBy(index: number, item: IPanelOptions): string {\n    return item.name;\n  }\n\n  /**\n   * This method detects the moment rendering final of all fields and groups (with internal fields) on the page\n   * it's need for test\n   *\n   * @member ConfigFieldsComponent\n   */\n  stableView() {\n    this.fr.stableView(() => this.radio.next(keyChannelStrim.load_complete, 'Config has been loaded'));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fr",
                        "type": "FullyRenderedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "radio",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fr",
                        "type": "FullyRenderedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "radio",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "accessors": {
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "IConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "IConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "attr": {
                    "name": "attr",
                    "getSignature": {
                        "name": "attr",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            }
        },
        {
            "name": "ConfigGroupHostListComponent",
            "id": "component-ConfigGroupHostListComponent-c550208ac1aa36e286951778bbee01de",
            "file": "src/app/config-groups/pages/host-list/host-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: LIST_SERVICE_PROVIDER, useClass: ConfigGroupHostListService }"
                },
                {
                    "name": "{ provide: ADD_SERVICE_PROVIDER, useClass: ConfigGroupHostAddService }"
                }
            ],
            "selector": "app-config-group-host-list",
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }",
                ".add-button {position:fixed; right: 20px;top:120px;}"
            ],
            "template": "<app-add-button [name]=\"type\" [component]=\"addComponent\" class=\"add-button\">Add hosts</app-add-button>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addComponent",
                    "defaultValue": "AddHostToConfigGroupComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<BaseFormDirective>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.fqdnColumn(),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IHost>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'group_config_hosts'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IListResult<T>>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "defaultSort",
                    "defaultValue": "{ active: 'id', direction: 'desc' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sort",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "paging",
                    "defaultValue": "new BehaviorSubject<Paging>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Paging>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "sorting",
                    "defaultValue": "new BehaviorSubject<Sort>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Sort>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "clickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "auxclickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "changeCount",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "findRow",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BaseEntity",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getPageSize",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getSort",
                    "args": [],
                    "optional": false,
                    "returnType": "Sort",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "initBaseListDirective",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "onChangePaging",
                    "args": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "onChangeSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "reload",
                    "args": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "rewriteRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Type } from '@angular/core';\nimport { IColumns, RowEventData } from '@adwp-ui/widgets';\nimport { AdwpListDirective } from '@app/abstract-directives/adwp-list.directive';\nimport { TypeName } from '@app/core/types';\nimport { ListFactory } from '@app/factories/list.factory';\nimport { IHost } from '@app/models/host';\nimport { LIST_SERVICE_PROVIDER } from '@app/shared/components/list/list-service-token';\nimport { ADD_SERVICE_PROVIDER } from '@app/shared/add-component/add-service-model';\nimport { ConfigGroupHostAddService, ConfigGroupHostListService } from '../../service';\nimport { BaseFormDirective } from '@app/shared/add-component';\nimport { AddHostToConfigGroupComponent } from '../../components';\n\n\n@Component({\n  selector: 'app-config-group-host-list',\n  template: `\n    <app-add-button [name]=\"type\" [component]=\"addComponent\" class=\"add-button\">Add hosts</app-add-button>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }', '.add-button {position:fixed; right: 20px;top:120px;}'],\n  providers: [\n    { provide: LIST_SERVICE_PROVIDER, useClass: ConfigGroupHostListService },\n    { provide: ADD_SERVICE_PROVIDER, useClass: ConfigGroupHostAddService }\n  ],\n})\nexport class ConfigGroupHostListComponent extends AdwpListDirective<IHost> {\n  type: TypeName = 'group_config_hosts';\n  addComponent: Type<BaseFormDirective> = AddHostToConfigGroupComponent;\n\n  listColumns = [\n    ListFactory.fqdnColumn(),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IHost>;\n\n  clickRow(data: RowEventData): void {\n    data.event.preventDefault();\n    data.event.stopPropagation();\n    return;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n.add-button {position:fixed; right: 20px;top:120px;}\n",
            "extends": "AdwpListDirective"
        },
        {
            "name": "ConfigGroupListComponent",
            "id": "component-ConfigGroupListComponent-56b162fcf979ff9b53b31932cba6a4d2",
            "file": "src/app/config-groups/pages/group-list/group-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: LIST_SERVICE_PROVIDER, useClass: ConfigGroupListService }"
                },
                {
                    "name": "{ provide: ADD_SERVICE_PROVIDER, useClass: ConfigGroupAddService }"
                }
            ],
            "selector": "app-config-group-list",
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }",
                ".add-button {position:fixed; right: 20px;top:120px;}"
            ],
            "template": "<app-add-button [name]=\"type\" [component]=\"addComponent\" class=\"add-button\">Add config group</app-add-button>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addComponent",
                    "defaultValue": "AddConfigGroupComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<BaseFormDirective>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.nameColumn(),\n    ListFactory.descriptionColumn(),\n    ListFactory.deleteColumn(this),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumns<any>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'group_config'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IListResult<T>>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "defaultSort",
                    "defaultValue": "{ active: 'id', direction: 'desc' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sort",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "paging",
                    "defaultValue": "new BehaviorSubject<Paging>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Paging>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "sorting",
                    "defaultValue": "new BehaviorSubject<Sort>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Sort>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "auxclickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "changeCount",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "clickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RowEventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "findRow",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BaseEntity",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getPageSize",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "getSort",
                    "args": [],
                    "optional": false,
                    "returnType": "Sort",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "initBaseListDirective",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "onChangePaging",
                    "args": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "paging",
                            "type": "Paging",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "onChangeSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "reload",
                    "args": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IListResult<Entities>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                },
                {
                    "name": "rewriteRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "BaseEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AdwpListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Type } from '@angular/core';\nimport { TypeName } from '@app/core/types';\nimport { AdwpListDirective } from '@app/abstract-directives/adwp-list.directive';\nimport { IColumns } from '@adwp-ui/widgets';\nimport { ListFactory } from '@app/factories/list.factory';\nimport { ConfigGroupAddService, ConfigGroupListService } from '../../service';\nimport { LIST_SERVICE_PROVIDER } from '@app/shared/components/list/list-service-token';\nimport { ADD_SERVICE_PROVIDER } from '@app/shared/add-component/add-service-model';\nimport { BaseFormDirective } from '@app/shared/add-component';\nimport { AddConfigGroupComponent } from '../../components';\n\n@Component({\n  selector: 'app-config-group-list',\n  template: `\n    <app-add-button [name]=\"type\" [component]=\"addComponent\" class=\"add-button\">Add config group</app-add-button>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }', '.add-button {position:fixed; right: 20px;top:120px;}'],\n  providers: [\n    { provide: LIST_SERVICE_PROVIDER, useClass: ConfigGroupListService },\n    { provide: ADD_SERVICE_PROVIDER, useClass: ConfigGroupAddService }\n  ],\n})\nexport class ConfigGroupListComponent extends AdwpListDirective<any> implements OnInit {\n  type: TypeName = 'group_config';\n  addComponent: Type<BaseFormDirective> = AddConfigGroupComponent;\n\n  listColumns: IColumns<any> = [\n    ListFactory.nameColumn(),\n    ListFactory.descriptionColumn(),\n    ListFactory.deleteColumn(this),\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n.add-button {position:fixed; right: 20px;top:120px;}\n",
            "extends": "AdwpListDirective",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ControlsComponent",
            "id": "component-ControlsComponent-e14c098c46506c5f57764632946d91ce",
            "file": "src/app/shared/add-component/controls.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-controls",
            "styleUrls": [],
            "styles": [],
            "template": "<p class=\"controls\">\n  <button mat-raised-button color=\"primary\" (click)=\"oncancel()\">Cancel</button>\n  <span class=\"example-spacer\"></span>\n  <button #btn mat-raised-button [disabled]=\"disabled\" color=\"accent\" (click)=\"onsave()\" (focus)=\"(!disabled)\">{{ title }}</button>\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "defaultValue": "'Create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "save",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "saveBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'btn', {static: true, read: ElementRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "oncancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onsave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-add-controls',\n  template: `\n    <p class=\"controls\">\n      <button mat-raised-button color=\"primary\" (click)=\"oncancel()\">Cancel</button>\n      <span class=\"example-spacer\"></span>\n      <button #btn mat-raised-button [disabled]=\"disabled\" color=\"accent\" (click)=\"onsave()\" (focus)=\"(!disabled)\">{{ title }}</button>\n    </p>\n  `,\n})\nexport class ControlsComponent {\n  @Input() title = 'Create';\n  @Input() disabled: boolean;\n  @Output() cancel = new EventEmitter();\n  @Output() save = new EventEmitter();\n\n  @ViewChild('btn', { static: true, read: ElementRef }) saveBtn: ElementRef;\n\n  oncancel() {\n    this.cancel.emit();\n  }\n\n  onsave() {\n    this.save.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CrumbsComponent",
            "id": "component-CrumbsComponent-112035fcb4509db0c663d484c8407647",
            "file": "src/app/shared/components/crumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-crumbs",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        font-size: 0.8em;\n        margin-left: 8px;\n      }\n      mat-nav-list {\n        display: flex;\n        align-items: center;\n      }\n      a {\n        line-height: normal;\n      }\n      mat-icon {\n        margin-bottom: 5px;\n      }\n    "
            ],
            "template": "<mat-nav-list>\n  <a routerLink=\"/admin\"><mat-icon>apps</mat-icon></a>\n  <span>&nbsp;/&nbsp;</span>\n  <ng-container *ngFor=\"let item of navigation; last as isLast; trackBy: trackBy\">\n    <a routerLink=\"{{ item.url }}\">{{ item.title | uppercase }}</a>\n    <mat-icon *ngIf=\"item.issue\" [matTooltip]=\"item.issue\" color=\"warn\">priority_hight</mat-icon>\n    <span *ngIf=\"!isLast\">&nbsp;/&nbsp;</span>\n  </ng-container>\n</mat-nav-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "INavItem[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "INavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "INavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { INavItem } from '@app/models/details';\n\n@Component({\n  selector: 'app-crumbs',\n  template: `\n    <mat-nav-list>\n      <a routerLink=\"/admin\"><mat-icon>apps</mat-icon></a>\n      <span>&nbsp;/&nbsp;</span>\n      <ng-container *ngFor=\"let item of navigation; last as isLast; trackBy: trackBy\">\n        <a routerLink=\"{{ item.url }}\">{{ item.title | uppercase }}</a>\n        <mat-icon *ngIf=\"item.issue\" [matTooltip]=\"item.issue\" color=\"warn\">priority_hight</mat-icon>\n        <span *ngIf=\"!isLast\">&nbsp;/&nbsp;</span>\n      </ng-container>\n    </mat-nav-list>\n  `,\n  styles: [\n    `\n      :host {\n        font-size: 0.8em;\n        margin-left: 8px;\n      }\n      mat-nav-list {\n        display: flex;\n        align-items: center;\n      }\n      a {\n        line-height: normal;\n      }\n      mat-icon {\n        margin-bottom: 5px;\n      }\n    `,\n  ],\n})\nexport class CrumbsComponent {\n  @Input() navigation: INavItem[];\n  trackBy(index: number, item: INavItem) {\n    return item.url;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        font-size: 0.8em;\n        margin-left: 8px;\n      }\n      mat-nav-list {\n        display: flex;\n        align-items: center;\n      }\n      a {\n        line-height: normal;\n      }\n      mat-icon {\n        margin-bottom: 5px;\n      }\n    \n"
        },
        {
            "name": "DependenciesComponent",
            "id": "component-DependenciesComponent-812bc7f9516b28c1233cd10cb61aab84",
            "file": "src/app/shared/host-components-map/dependencies.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dependencies",
            "styleUrls": [],
            "styles": [
                "li {padding: 6px 0;}"
            ],
            "template": "<ul>\n  <li *ngFor=\"let item of items\">\n    {{ item.display_name }}\n    <app-dependencies [components]=\"item.components\"></app-dependencies>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IRequires[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRequires[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRequires[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { IRequires } from '@app/core/types';\n\n@Component({\n  selector: 'app-dependencies',\n  template: `\n    <ul>\n      <li *ngFor=\"let item of items\">\n        {{ item.display_name }}\n        <app-dependencies [components]=\"item.components\"></app-dependencies>\n      </li>\n    </ul>\n  `,\n  styles: ['li {padding: 6px 0;}'],\n})\nexport class DependenciesComponent implements OnInit {\n  // by dialog window\n  model: IRequires[];\n  @Input() components: IRequires[];\n  items: IRequires[];\n  ngOnInit(): void {\n    this.items = this.model || this.components;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "li {padding: 6px 0;}\n",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-068900a1cc4916fa3b799a2be53b23f7",
            "file": "src/app/shared/components/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [],
            "styles": [
                "pre {white-space: pre-wrap;}"
            ],
            "template": "<h3 mat-dialog-title class=\"overflow\">{{ data.title || 'Notification' }}</h3>\n<mat-dialog-content class=\"content\" appScroll (read)=\"scroll($event)\">\n  <pre *ngIf=\"data.text\">{{ data.text }}</pre>\n  <ng-template appDynamic></ng-template>\n</mat-dialog-content>\n<mat-dialog-actions class=\"controls\" *ngIf=\"data.controls\">\n  <ng-container *ngIf=\"controlsIsArray(); else withLabel\">\n    <ng-template *ngTemplateOutlet=\"isArray; context: { buttons: data.controls }\"></ng-template>\n  </ng-container>\n</mat-dialog-actions>\n<ng-template #withLabel>\n  <label class=\"warn\" style=\"margin-right: 30px;\">{{ data.controls.label }}</label>\n  <ng-container *ngTemplateOutlet=\"isArray; context: { buttons: data.controls.buttons }\"></ng-container>\n</ng-template>\n<ng-template #isArray let-buttons=\"buttons\">\n  <button mat-raised-button color=\"primary\" (click)=\"_noClick()\" tabindex=\"-1\">{{ buttons[1] }}</button>\n  <button mat-raised-button color=\"accent\" [mat-dialog-close]=\"true\" [disabled]=\"data?.disabled\" tabindex=\"2\">\n    {{ buttons[0] }}\n  </button>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dynamic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicDirective",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DynamicDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "instance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicComponent",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "noClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "_noClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "controlsIsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scroll",
                    "args": [
                        {
                            "name": "stop",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stop",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, EventEmitter, Inject, OnInit, Type, ViewChild, HostListener } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { DynamicComponent, DynamicDirective, DynamicEvent } from '../directives/dynamic.directive';\nimport { ChannelService } from '@app/core/services';\nimport { keyChannelStrim } from '@app/core/services';\nimport { ActionParameters } from '@app/shared/components/actions/actions.directive';\n\nexport interface DialogData {\n  title: string;\n  component: Type<DynamicComponent>;\n  model?: ActionParameters | any;\n  event?: EventEmitter<any>;\n  text?: string;\n  controls?: any[] | any;\n  disabled?: boolean;\n}\n\n@Component({\n  selector: 'app-dialog',\n  template: `\n    <h3 mat-dialog-title class=\"overflow\">{{ data.title || 'Notification' }}</h3>\n    <mat-dialog-content class=\"content\" appScroll (read)=\"scroll($event)\">\n      <pre *ngIf=\"data.text\">{{ data.text }}</pre>\n      <ng-template appDynamic></ng-template>\n    </mat-dialog-content>\n    <mat-dialog-actions class=\"controls\" *ngIf=\"data.controls\">\n      <ng-container *ngIf=\"controlsIsArray(); else withLabel\">\n        <ng-template *ngTemplateOutlet=\"isArray; context: { buttons: data.controls }\"></ng-template>\n      </ng-container>\n    </mat-dialog-actions>\n    <ng-template #withLabel>\n      <label class=\"warn\" style=\"margin-right: 30px;\">{{ data.controls.label }}</label>\n      <ng-container *ngTemplateOutlet=\"isArray; context: { buttons: data.controls.buttons }\"></ng-container>\n    </ng-template>\n    <ng-template #isArray let-buttons=\"buttons\">\n      <button mat-raised-button color=\"primary\" (click)=\"_noClick()\" tabindex=\"-1\">{{ buttons[1] }}</button>\n      <button mat-raised-button color=\"accent\" [mat-dialog-close]=\"true\" [disabled]=\"data?.disabled\" tabindex=\"2\">\n        {{ buttons[0] }}\n      </button>\n    </ng-template>\n  `,\n  styles: ['pre {white-space: pre-wrap;}'],\n})\nexport class DialogComponent implements OnInit {\n  controls: string[];\n  noClose: boolean | undefined;\n\n  instance: DynamicComponent;\n\n  @ViewChild(DynamicDirective, { static: true }) dynamic: DynamicDirective;\n\n  @HostListener('window:keydown', ['$event'])\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      const c = this.instance;\n      if (c?.onEnterKey) c.onEnterKey();\n    }\n  }\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private componentFactoryResolever: ComponentFactoryResolver,\n    private channel: ChannelService\n  ) {}\n\n  controlsIsArray() {\n    return Array.isArray(this.data.controls);\n  }\n\n  ngOnInit(): void {\n    if (this.data.component) {\n      const componentFactory = this.componentFactoryResolever.resolveComponentFactory(this.data.component);\n      const viewContainerRef = this.dynamic.viewContainerRef;\n      viewContainerRef.clear();\n\n      const componentRef = viewContainerRef.createComponent(componentFactory);\n      this.instance = <DynamicComponent>componentRef.instance;\n      this.instance.model = this.data.model;\n      // event define in the component\n      if (this.instance.event) this.instance.event.subscribe((e: DynamicEvent) => this.dialogRef.close(e));\n\n      if (this.data.event) this.instance.event = this.data.event;\n    }\n  }\n\n  scroll(stop: { direct: -1 | 1 | 0; screenTop: number }) {\n    this.channel.next(keyChannelStrim.scroll, stop);\n  }\n\n  _noClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "pre {white-space: pre-wrap;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolever",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolever",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-5b001ba7e016f51f026a3c77d372403c",
            "file": "src/app/shared/form-elements/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-dropdown",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [formGroup]=\"form\">\n  <mat-form-field>\n    <ng-container *ngIf=\"field.read_only; else dd\">\n      <input matInput [formControlName]=\"field.name\" [readonly]=\"true\" [value]=\"field.value\" />\n    </ng-container>\n    <ng-template #dd>\n      <mat-select [(value)]=\"field.value\" [formControlName]=\"field.name\">\n        <mat-option *ngFor=\"let option of options$ | async\" [value]=\"option.id\">{{ option.name }}</mat-option>\n      </mat-select>\n    </ng-template>\n  </mat-form-field>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "options$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { FieldDirective } from './field.directive';\n\n@Component({\n  selector: 'app-fields-dropdown',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <mat-form-field>\n        <ng-container *ngIf=\"field.read_only; else dd\">\n          <input matInput [formControlName]=\"field.name\" [readonly]=\"true\" [value]=\"field.value\" />\n        </ng-container>\n        <ng-template #dd>\n          <mat-select [(value)]=\"field.value\" [formControlName]=\"field.name\">\n            <mat-option *ngFor=\"let option of options$ | async\" [value]=\"option.id\">{{ option.name }}</mat-option>\n          </mat-select>\n        </ng-template>\n      </mat-form-field>\n    </ng-container>\n  `,\n})\nexport class DropdownComponent extends FieldDirective implements OnInit {\n  options$: Observable<{ id: number | string; name: string }[]>;\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.field.limits) {\n      const o = Object.entries<string | number>(this.field.limits.option).map((e) => ({\n        id: String(e[1]),\n        name: e[0],\n      }));\n      this.options$ = of(o);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "FieldDirective",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "EditionColumnComponent",
            "id": "component-EditionColumnComponent-d0e03475d97e78b2f45b0f600a3b4004",
            "file": "src/app/components/columns/edition-column/edition-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edition-column",
            "styleUrls": [],
            "styles": [],
            "template": "{{ row.edition }}\n<ng-container *ngIf=\"row.license === 'unaccepted'\">\n  <button mat-icon-button color=\"warn\" matTooltip=\"Accept license agreement\"\n          (click)=\"onClick({ event: $event, action: 'license', row: row })\">\n    <mat-icon>warning</mat-icon>\n  </button>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "IBundle"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "function"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output } from '@angular/core';\nimport { AdwpCellComponent } from '@adwp-ui/widgets';\n\nimport { IBundle } from '@app/models/bundle';\n\n@Component({\n  selector: 'app-edition-column',\n  template: `\n    {{ row.edition }}\n    <ng-container *ngIf=\"row.license === 'unaccepted'\">\n      <button mat-icon-button color=\"warn\" matTooltip=\"Accept license agreement\"\n              (click)=\"onClick({ event: $event, action: 'license', row: row })\">\n        <mat-icon>warning</mat-icon>\n      </button>\n    </ng-container>\n  `,\n})\nexport class EditionColumnComponent implements AdwpCellComponent<IBundle> {\n\n  @Input() row: IBundle;\n\n  @Output() onClick: (data: { event: MouseEvent, action: string, row: any }) => void;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AdwpCellComponent"
            ]
        },
        {
            "name": "ErrorInfoComponent",
            "id": "component-ErrorInfoComponent-32056f9d7f14842eed4d1cebb5c9064d",
            "file": "src/app/shared/form-elements/error-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-info",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-error *ngIf=\"hasError('required')\">Field [{{ field.display_name }}] is required!</mat-error>\n<mat-error *ngIf=\"hasError('pattern')\">Field [{{ field.display_name }}] is invalid!</mat-error>\n<mat-error *ngIf=\"hasError('min')\">Field [{{ field.display_name }}] value cannot be less than {{ field.validator.min }}!</mat-error>\n<mat-error *ngIf=\"hasError('max')\">Field [{{ field.display_name }}] value cannot be greater than {{ field.validator.max }}!</mat-error>\n<mat-error *ngIf=\"hasError('jsonParseError')\">Json parsing error!</mat-error>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FormControl"
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IFieldOptions"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { IFieldOptions } from '../configuration/types';\n\n@Component({\n  selector: 'app-error-info',\n  template: `\n    <mat-error *ngIf=\"hasError('required')\">Field [{{ field.display_name }}] is required!</mat-error>\n    <mat-error *ngIf=\"hasError('pattern')\">Field [{{ field.display_name }}] is invalid!</mat-error>\n    <mat-error *ngIf=\"hasError('min')\">Field [{{ field.display_name }}] value cannot be less than {{ field.validator.min }}!</mat-error>\n    <mat-error *ngIf=\"hasError('max')\">Field [{{ field.display_name }}] value cannot be greater than {{ field.validator.max }}!</mat-error>\n    <mat-error *ngIf=\"hasError('jsonParseError')\">Json parsing error!</mat-error>\n  `\n})\nexport class ErrorInfoComponent {\n  @Input() control: FormControl;\n  @Input() field: IFieldOptions;\n\n  hasError(name: string) {\n    return this.control.hasError(name);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ExportComponent",
            "id": "component-ExportComponent-3c17dd4f9160f4d8db43f357e0ec37f1",
            "file": "src/app/shared/components/import/import.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-exports",
            "styleUrls": [],
            "styles": [
                ".component {padding: 6px 8px; margin-bottom: 18px; font-size: 18px;}",
                ".component div {font-size: 12px;margin-left: 24px; margin-top: 4px;}"
            ],
            "template": "<ng-container [formGroup]=\"form\">\n  <ng-container [formGroupName]=\"getKey({ import_id: import.id })\">\n    <div *ngFor=\"let item of import.exports\" class=\"component\">\n      <mat-checkbox [checked]=\"item.binded\" [formControlName]=\"getKey(item.id)\" (change)=\"change($event, item)\"> {{ item.obj_name }}</mat-checkbox>\n      <div>{{ item.bundle_name }} {{ item.bundle_version }}</div>\n    </div>\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "FormGroup"
                },
                {
                    "name": "import",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "IImport"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IExport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IExport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKey",
                    "args": [
                        {
                            "name": "id",
                            "type": "IComposite",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "IComposite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { ChannelService } from '@app/core/services';\nimport { keyChannelStrim } from '@app/core/services';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { IExport, IImport } from '@app/core/types';\n\ninterface IComposite {\n  [key: string]: number;\n}\n\nconst trueOnly = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (control.value ? null : { trueOnly: !control.value });\n\nconst requiredObject = (): ValidatorFn => (control: AbstractControl): { [key: string]: boolean } | null =>\n  Object.keys(control.value).some((key) => control.value[key]) ? null : { requiered: true };\n\n@Component({\n  selector: 'app-exports',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <ng-container [formGroupName]=\"getKey({ import_id: import.id })\">\n        <div *ngFor=\"let item of import.exports\" class=\"component\">\n          <mat-checkbox [checked]=\"item.binded\" [formControlName]=\"getKey(item.id)\" (change)=\"change($event, item)\"> {{ item.obj_name }}</mat-checkbox>\n          <div>{{ item.bundle_name }} {{ item.bundle_version }}</div>\n        </div>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: ['.component {padding: 6px 8px; margin-bottom: 18px; font-size: 18px;}', '.component div {font-size: 12px;margin-left: 24px; margin-top: 4px;}'],\n})\nexport class ExportComponent {\n  @Input() form: FormGroup;\n  @Input() import: IImport;\n\n  getKey(id: IComposite) {\n    return JSON.stringify(id);\n  }\n\n  change(e: MatCheckboxChange, item: IExport) {\n    if (!this.import.multibind) {\n      const group = this.form.controls[this.getKey({ import_id: this.import.id })] as FormGroup;\n\n      if (e.checked)\n        Object.keys(group.controls)\n          .map((key) => {\n            group.controls[key].clearValidators();\n            return key;\n          })\n          .filter((key) => key !== this.getKey(item.id))\n          .map((key) => group.controls[key].setValue(false));\n      else if (this.import.required) {\n        Object.keys(group.controls).map((key) => {\n          const c = group.controls[key];\n          c.setValidators(trueOnly());\n          c.updateValueAndValidity();\n        });\n      }\n    }\n  }\n}\n\n@Component({\n  selector: 'app-import',\n  template: `\n    <p class=\"controls\" *ngIf=\"asIs\">\n      <button mat-raised-button color=\"accent\" (click)=\"go()\" [disabled]=\"form.invalid\">Save</button>\n    </p>\n    <div class=\"items\">\n      <div *ngFor=\"let item of data$ | async\" class=\"group\">\n        <h3>\n          {{ item.name }}\n          <mat-error *ngIf=\"hasError(item.id)\">This import is required!</mat-error>\n        </h3>\n        <app-exports [import]=\"item\" [form]=\"form\"></app-exports>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./import.component.scss'],\n})\nexport class ImportComponent implements OnInit {\n  form = new FormGroup({});\n  data$: Observable<IImport[]>;\n  asIs = false;\n\n  constructor(private current: ClusterService, private channel: ChannelService) {}\n\n  getKey(id: IComposite) {\n    return JSON.stringify(id);\n  }\n\n  hasError(id: number) {\n    return this.form.get(this.getKey({ import_id: id })).invalid;\n  }\n\n  ngOnInit() {\n    this.data$ = this.current.getImportData().pipe(\n      tap((a) => (this.asIs = !!a.length)),\n      tap((a) =>\n        a.map((i: IImport) => {\n          const validFlag = i.required && !i.multibind && i.exports.every((e) => !e.binded);\n          const exportGroup = i.exports.reduce((p, c) => {\n            const fc = {};\n            fc[`${this.getKey(c.id)}`] = new FormControl(c.binded, validFlag ? trueOnly() : null);\n            return { ...p, ...fc };\n          }, {});\n          const import_id = this.getKey({ import_id: i.id });\n          this.form.addControl(import_id, new FormGroup(exportGroup, i.required ? requiredObject() : null));\n        })\n      )\n    );\n  }\n\n  go() {\n    if (!this.form.invalid) {\n      let bind = [];\n      Object.keys(this.form.controls)\n        .filter((a) => Object.keys(this.form.controls[a].value).length)\n        .map((key) => {\n          const obj = JSON.parse(key);\n          const value = this.form.controls[key].value;\n          const items = Object.keys(value)\n            .filter((a) => value[a] === true)\n            .map((a) => ({ ...obj, export_id: JSON.parse(a) }));\n          bind = [...bind, ...items];\n        });\n      this.current.bindImport({ bind }).subscribe((_) => this.channel.next(keyChannelStrim.notifying, 'Successfully saved'));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".component {padding: 6px 8px; margin-bottom: 18px; font-size: 18px;}\n.component div {font-size: 12px;margin-left: 24px; margin-top: 4px;}\n"
        },
        {
            "name": "FatalErrorComponent",
            "id": "component-FatalErrorComponent-ab7f01615421ad17b1b760b49a67020e",
            "file": "src/app/main/server-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [
                "styleCSS"
            ],
            "template": "<div>Critical error on the server. <p>Contact to <a routerLink=\"/support\">support</a>.</p></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nconst styleCSS = 'div { font-weight:bold; margin: 40px auto; width: 400px;}';\n\n// http 500\n@Component({\n  styles: [styleCSS],\n  template: '<div>Critical error on the server. <p>Contact to <a routerLink=\"/support\">support</a>.</p></div>',\n})\nexport class FatalErrorComponent {}\n\n// http 504\n@Component({\n  styles: [styleCSS],\n  template: '<div>Gateway Timeout.</div>',\n})\nexport class GatewayTimeoutComponent {}\n\n// http 404\n@Component({\n  styles: [styleCSS],\n  template: '<div>Page not found.</div>',\n})\nexport class PageNotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "styleCSS\n"
        },
        {
            "name": "FieldComponent",
            "id": "component-FieldComponent-5957c1540e05cecae03146353c436802",
            "file": "src/app/shared/configuration/field/field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: CONFIG_FIELD, useExisting: FieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-field",
            "styleUrls": [
                "./field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "FormGroup"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "IFieldOptions"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "inputControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldDirective",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cc'"
                        }
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getTestName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initCurrentGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAdvanced",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "outputValue",
                    "args": [
                        {
                            "name": "v",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isPart",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPart",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: should be own restore() for each fieldComponent   *\n",
                    "description": "<p>TODO: should be own restore() for each fieldComponent   *</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldDirective } from '@app/shared/form-elements/field.directive';\nimport { BaseMapListDirective } from '@app/shared/form-elements/map.component';\n\nimport { SchemeComponent } from '../scheme/scheme.component';\nimport { IFieldOptions } from '../types';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nexport const CONFIG_FIELD = new InjectionToken('Config field');\n\n@Component({\n  selector: 'app-field',\n  templateUrl: './field.component.html',\n  styleUrls: ['./field.component.scss'],\n  host: {\n    class: 'field-row w100 d-flex ',\n    '[class.read-only]': 'options.read_only'\n  },\n  providers: [\n    { provide: CONFIG_FIELD, useExisting: FieldComponent }\n  ]\n})\nexport class FieldComponent extends BaseDirective implements OnInit, OnChanges {\n  @Input()\n  options: IFieldOptions;\n  @Input()\n  form: FormGroup;\n  currentFormGroup: FormGroup;\n\n  disabled: boolean = false;\n\n  @ViewChild('cc') inputControl: FieldDirective;\n\n  ngOnInit() {\n    this.initCurrentGroup();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!changes.form.firstChange) this.initCurrentGroup();\n  }\n\n  initCurrentGroup() {\n    const [_, name] = this.options.key.split('/');\n    this.currentFormGroup = name ? (this.form.controls[name] as FormGroup) : this.form;\n  }\n\n  getTestName() {\n    return `${this.options.name}${this.options.subname ? '/' + this.options.subname : ''}`;\n  }\n\n  outputValue(v: string, isPart = false) {\n    if (this.options.type === 'password') v = v.replace(/\\w/gi, '*');\n    if (this.options.type === 'secrettext') v = '****';\n    return v.length > 80 ? (isPart ? v : `${v.substr(0, 80)}...`) : v;\n  }\n\n  isAdvanced() {\n    return this.options.ui_options && this.options.ui_options.advanced;\n  }\n\n  /**\n   * TODO: should be own restore() for each fieldComponent   *\n   * @member FieldComponent\n   */\n  restore() {\n    if (this.disabled) return;\n\n    const field = this.currentFormGroup.controls[this.options.name];\n    const defaultValue = this.options.default;\n    const type = this.options.type;\n    if (field) {\n      if (type === 'json') {\n        field.setValue(defaultValue === null ? '' : JSON.stringify(defaultValue, undefined, 4));\n      } else if (type === 'boolean') {\n        const allow = String(defaultValue) === 'true' || String(defaultValue) === 'false' || String(defaultValue) === 'null';\n        field.setValue(allow ? defaultValue : null);\n      } else if (type === 'password') {\n        field.setValue(defaultValue);\n        field.updateValueAndValidity();\n\n        const confirm = this.currentFormGroup.controls[`confirm_${this.options.name}`];\n        if (confirm) {\n          confirm.setValue(defaultValue);\n          confirm.updateValueAndValidity();\n        }\n      } else if (type === 'map' || type === 'list') {\n        this.options.value = defaultValue;\n        (this.inputControl as BaseMapListDirective).reload();\n      } else if (type === 'structure') {\n        this.options.value = defaultValue;\n        (this.inputControl as SchemeComponent).reload();\n      } else field.setValue(defaultValue);\n\n      this.options.value = field.value;\n      this.form.updateValueAndValidity();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex-wrap: wrap;\n\n  .field {\n    display: flex;\n    align-items: center;\n    padding: 0 20px;\n\n    &.advanced {\n      label {\n        border-bottom: dotted 1px #00e676 !important;\n      }\n    }\n\n    & label {\n      font-size: 16px;\n      flex-basis: 25%;\n      border-bottom: dotted 1px #606060;\n      margin-right: 10px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    & label + * {\n      width: 100%;\n      display: flex;\n      align-items: center;\n    }\n  }\n\n  & > .read-only {\n    background-color: #484848;\n    font-style: italic;\n    color: #a7a7a7;\n  }\n\n  .compare-list-container {\n    .compare-list {\n      .label {\n        margin: 0 10px;\n      }\n    }\n  }\n\n  .info {\n    margin-left: 10px;\n    display: flex;\n    align-items: center;\n\n    & > mat-icon {\n      margin-top: 3px;\n    }\n\n    .icon-info {\n      vertical-align: middle;\n    }\n  }\n}\n\n.break {\n  flex-basis: 100%;\n  height: 0;\n}\n",
                    "styleUrl": "./field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"field w100\" [appForTest]=\"getTestName()\"\n     [ngClass]=\"{'read-only': options.read_only, advanced: isAdvanced() }\">\n  <label [appTooltip]=\"options.display_name\" [appTooltipShowByCondition]=\"true\">{{ options.display_name }}:</label>\n\n  <ng-container [ngSwitch]=\"options.controlType\">\n    <ng-container *ngSwitchCase=\"'structure'\">\n      <app-scheme [field]=\"options\" [form]=\"currentFormGroup\" #cc></app-scheme>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'map'\">\n      <app-fields-map [field]=\"options\" [form]=\"currentFormGroup\" #cc></app-fields-map>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'list'\">\n      <app-fields-list [field]=\"options\" [form]=\"currentFormGroup\" #cc></app-fields-list>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'password'\">\n      <app-fields-password [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-password>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'boolean'\">\n      <app-fields-boolean [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-boolean>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'textbox'\">\n      <app-fields-textbox [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-textbox>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'textarea'\">\n      <app-fields-textarea [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-textarea>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'json'\">\n      <app-fields-json [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-json>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'option'\">\n      <app-fields-dropdown [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-dropdown>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'variant'\">\n      <app-fields-variant [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-variant>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'secrettext'\">\n      <app-fields-secret-text [field]=\"options\" [form]=\"currentFormGroup\"></app-fields-secret-text>\n    </ng-container>\n\n    <span class=\"info\">\n      <mat-icon *ngIf=\"options.description\" style=\"vertical-align: middle;\" [ngClass]=\"'info-icon'\"\n                matTooltipClass=\"info-tooltip\" [matTooltip]=\"options.description\">info_outline</mat-icon>\n      <button (click)=\"restore()\" [disabled]=\"options.read_only || disabled\" mat-icon-button matSuffix\n              color=\"primary\"\n              matTooltip=\"Reset to default\">\n        <mat-icon>refresh</mat-icon>\n      </button>\n    </span>\n  </ng-container>\n</div>\n<mat-list class=\"compare-list-container\" dense *ngIf=\"!options.hidden && options.compare.length\">\n  <mat-list-item *ngFor=\"let item of options.compare\" class=\"compare-list\">\n    <mat-icon matListIcon [style.backgroundColor]=\"item.color\">more_vert</mat-icon>\n    <span class=\"label\">\n      {{ item.date | date: 'short' }}\n    </span>&nbsp;----&nbsp;&nbsp;<span [appTooltip]=\"outputValue(item.value)\"\n                                       class=\"accent\">{{ outputValue(item.value, true) }}</span>\n  </mat-list-item>\n</mat-list>\n"
        },
        {
            "name": "FieldListComponent",
            "id": "component-FieldListComponent-c4849ca5fb4d9a382681ce222fff0dff",
            "file": "src/app/shared/form-elements/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-list",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map-list.template.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "asList",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "items",
                    "defaultValue": "new FormArray([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "check",
                    "args": [
                        {
                            "name": "item",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "prepare",
                    "args": [
                        {
                            "name": "a",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Directive, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { FieldDirective } from './field.directive';\n\n@Directive({\n  selector: '[appBaseMapList]'\n})\nexport class BaseMapListDirective extends FieldDirective implements OnInit {\n  asList: boolean;\n  items = new FormArray([]);\n\n  constructor(private fb: FormBuilder) {\n    super();\n  }\n\n  ngOnInit() {\n    if (!Object.keys(this.field.value || {}).length) this.control.setValue('');\n    this.reload();\n    this.items.valueChanges.pipe(\n      this.takeUntil()\n    ).subscribe((a: { key: string; value: string }[]) => this.prepare(a));\n\n    this.control.statusChanges.pipe(\n      this.takeUntil()\n    ).subscribe((state) => {\n      if (state === 'DISABLED') {\n        this.items.controls.forEach((control) => {\n          control.disable({ emitEvent: false });\n        });\n      } else {\n        this.items.controls.forEach((control) => {\n          control.enable({ emitEvent: false });\n        });\n      }\n    });\n  }\n\n  prepare(a: { key: string; value: string }[]) {\n    let value = this.asList ? a.map(b => b.value).filter(c => c) : a.length ? a.reduce((p, c) => ({\n      ...p,\n      [c.key]: c.value\n    }), {}) : null;\n    if (value && this.asList) value = (value as Array<string>).length ? value : null;\n    this.control.setValue(value);\n  }\n\n  reload() {\n    this.items.reset([]);\n    this.items.controls = [];\n    const fieldValue = this.field.value ? { ...(this.field.value as Object) } : {};\n    Object.keys(fieldValue).forEach(a => this.items.push(this.fb.group({\n      key: [{ value: a, disabled: this.control.disabled }, Validators.required],\n      value: [{ value: fieldValue[a], disabled: this.control.disabled }],\n    })));\n  }\n\n  add() {\n    const group = this.fb.group({ key: ['', Validators.required], value: '' });\n    this.items.push(group);\n    group.controls['key'].markAsTouched();\n  }\n\n  check(item: FormGroup) {\n    return item.controls['key'].hasError('required');\n  }\n\n  clear(i: number) {\n    this.items.removeAt(i);\n  }\n}\n\n@Component({\n  selector: 'app-fields-list',\n  templateUrl: './map-list.template.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class FieldListComponent extends BaseMapListDirective {\n  asList = true;\n}\n\n@Component({\n  selector: 'app-fields-map',\n  templateUrl: './map-list.template.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class FieldMapComponent extends BaseMapListDirective {\n  asList = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  margin-bottom: 10px;\n  flex-direction: column;\n\n  .tools {\n    align-self: flex-end;\n  }\n\n  & div.item {\n    width: 100%;\n    display: flex;\n    align-items: baseline;\n\n    & .key-field {\n      flex: 0 1 50%;\n      margin-right: 10px;\n    }\n\n    & .value-field {\n      flex: 1 0 50%;\n    }\n  }\n\n  .error {\n    font-size: 75%;\n  }\n}\n",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseMapListDirective",
            "templateData": "<div class=\"tools\" [ngClass]=\"{ hidden: field.read_only}\">\n  <button mat-icon-button color=\"accent\" [disabled]=\"control.disabled\" (click)=\"add()\">\n    <mat-icon>add_circle_outline</mat-icon>\n  </button>\n</div>\n\n<div *ngFor=\"let item of items.controls; let i = index\" class=\"item\" [formGroup]=\"item\">\n  <mat-form-field class=\"key-field\" *ngIf=\"!asList\">\n    <span matSuffix>:</span>\n    <input matInput formControlName=\"key\" [readonly]=\"field.read_only\" />\n    <mat-error *ngIf=\"check(item)\">Map property name is required!</mat-error>\n  </mat-form-field>\n  <mat-form-field class=\"value-field\">\n    <button mat-icon-button matSuffix (click)=\"clear(i)\" [disabled]=\"control.disabled\" *ngIf=\"!field.read_only\">\n      <mat-icon>clear</mat-icon>\n    </button>\n    <input matInput formControlName=\"value\" [readonly]=\"field.read_only\" />\n  </mat-form-field>\n</div>\n<mat-error *ngIf=\"hasError('required')\" class=\"error\">Field [{{ field.display_name }}] is required!</mat-error>\n"
        },
        {
            "name": "FieldMapComponent",
            "id": "component-FieldMapComponent-c4849ca5fb4d9a382681ce222fff0dff",
            "file": "src/app/shared/form-elements/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map-list.template.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "asList",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "items",
                    "defaultValue": "new FormArray([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "check",
                    "args": [
                        {
                            "name": "item",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "prepare",
                    "args": [
                        {
                            "name": "a",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseMapListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Directive, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { FieldDirective } from './field.directive';\n\n@Directive({\n  selector: '[appBaseMapList]'\n})\nexport class BaseMapListDirective extends FieldDirective implements OnInit {\n  asList: boolean;\n  items = new FormArray([]);\n\n  constructor(private fb: FormBuilder) {\n    super();\n  }\n\n  ngOnInit() {\n    if (!Object.keys(this.field.value || {}).length) this.control.setValue('');\n    this.reload();\n    this.items.valueChanges.pipe(\n      this.takeUntil()\n    ).subscribe((a: { key: string; value: string }[]) => this.prepare(a));\n\n    this.control.statusChanges.pipe(\n      this.takeUntil()\n    ).subscribe((state) => {\n      if (state === 'DISABLED') {\n        this.items.controls.forEach((control) => {\n          control.disable({ emitEvent: false });\n        });\n      } else {\n        this.items.controls.forEach((control) => {\n          control.enable({ emitEvent: false });\n        });\n      }\n    });\n  }\n\n  prepare(a: { key: string; value: string }[]) {\n    let value = this.asList ? a.map(b => b.value).filter(c => c) : a.length ? a.reduce((p, c) => ({\n      ...p,\n      [c.key]: c.value\n    }), {}) : null;\n    if (value && this.asList) value = (value as Array<string>).length ? value : null;\n    this.control.setValue(value);\n  }\n\n  reload() {\n    this.items.reset([]);\n    this.items.controls = [];\n    const fieldValue = this.field.value ? { ...(this.field.value as Object) } : {};\n    Object.keys(fieldValue).forEach(a => this.items.push(this.fb.group({\n      key: [{ value: a, disabled: this.control.disabled }, Validators.required],\n      value: [{ value: fieldValue[a], disabled: this.control.disabled }],\n    })));\n  }\n\n  add() {\n    const group = this.fb.group({ key: ['', Validators.required], value: '' });\n    this.items.push(group);\n    group.controls['key'].markAsTouched();\n  }\n\n  check(item: FormGroup) {\n    return item.controls['key'].hasError('required');\n  }\n\n  clear(i: number) {\n    this.items.removeAt(i);\n  }\n}\n\n@Component({\n  selector: 'app-fields-list',\n  templateUrl: './map-list.template.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class FieldListComponent extends BaseMapListDirective {\n  asList = true;\n}\n\n@Component({\n  selector: 'app-fields-map',\n  templateUrl: './map-list.template.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class FieldMapComponent extends BaseMapListDirective {\n  asList = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  margin-bottom: 10px;\n  flex-direction: column;\n\n  .tools {\n    align-self: flex-end;\n  }\n\n  & div.item {\n    width: 100%;\n    display: flex;\n    align-items: baseline;\n\n    & .key-field {\n      flex: 0 1 50%;\n      margin-right: 10px;\n    }\n\n    & .value-field {\n      flex: 1 0 50%;\n    }\n  }\n\n  .error {\n    font-size: 75%;\n  }\n}\n",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseMapListDirective",
            "templateData": "<div class=\"tools\" [ngClass]=\"{ hidden: field.read_only}\">\n  <button mat-icon-button color=\"accent\" [disabled]=\"control.disabled\" (click)=\"add()\">\n    <mat-icon>add_circle_outline</mat-icon>\n  </button>\n</div>\n\n<div *ngFor=\"let item of items.controls; let i = index\" class=\"item\" [formGroup]=\"item\">\n  <mat-form-field class=\"key-field\" *ngIf=\"!asList\">\n    <span matSuffix>:</span>\n    <input matInput formControlName=\"key\" [readonly]=\"field.read_only\" />\n    <mat-error *ngIf=\"check(item)\">Map property name is required!</mat-error>\n  </mat-form-field>\n  <mat-form-field class=\"value-field\">\n    <button mat-icon-button matSuffix (click)=\"clear(i)\" [disabled]=\"control.disabled\" *ngIf=\"!field.read_only\">\n      <mat-icon>clear</mat-icon>\n    </button>\n    <input matInput formControlName=\"value\" [readonly]=\"field.read_only\" />\n  </mat-form-field>\n</div>\n<mat-error *ngIf=\"hasError('required')\" class=\"error\">Field [{{ field.display_name }}] is required!</mat-error>\n"
        },
        {
            "name": "GatewayTimeoutComponent",
            "id": "component-GatewayTimeoutComponent-ab7f01615421ad17b1b760b49a67020e",
            "file": "src/app/main/server-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [
                "styleCSS"
            ],
            "template": "<div>Gateway Timeout.</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nconst styleCSS = 'div { font-weight:bold; margin: 40px auto; width: 400px;}';\n\n// http 500\n@Component({\n  styles: [styleCSS],\n  template: '<div>Critical error on the server. <p>Contact to <a routerLink=\"/support\">support</a>.</p></div>',\n})\nexport class FatalErrorComponent {}\n\n// http 504\n@Component({\n  styles: [styleCSS],\n  template: '<div>Gateway Timeout.</div>',\n})\nexport class GatewayTimeoutComponent {}\n\n// http 404\n@Component({\n  styles: [styleCSS],\n  template: '<div>Page not found.</div>',\n})\nexport class PageNotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "styleCSS\n"
        },
        {
            "name": "GroupConfigDetailsComponent",
            "id": "component-GroupConfigDetailsComponent-5f1177f1278239f0fc9d4c4137b5099a",
            "file": "src/app/components/hostprovider/group-config-details/group-config-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-config-provider-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'group_config'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    DetailsFactory.labelMenuItem('Hosts', 'host'),\n    DetailsFactory.labelMenuItem('Configuration', 'config'),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "initContext",
                    "args": [
                        {
                            "name": "param",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WorkerInstance>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "ParamMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService, WorkerInstance } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { ConfigGroup, ConfigGroupListService } from '@app/config-groups';\n\n@Component({\n  selector: 'app-group-config-provider-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class GroupConfigDetailsComponent extends DetailAbstractDirective<ConfigGroup> {\n\n  entityParam = 'group_config';\n\n  leftMenu = [\n    DetailsFactory.labelMenuItem('Hosts', 'host'),\n    DetailsFactory.labelMenuItem('Configuration', 'config'),\n  ];\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: ConfigGroupListService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n  initContext(param: ParamMap): Observable<WorkerInstance> {\n    return this.service.getContext(param, this.subjectService);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "ConfigGroupListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "ConfigGroupListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "GroupFieldsComponent",
            "id": "component-GroupFieldsComponent-4737181957c0c2d80f3d2f044b2a2c70",
            "file": "src/app/shared/configuration/group-fields/group-fields.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-fields",
            "styleUrls": [],
            "styles": [
                ".title {font-size: 22px;}",
                ".title > mat-slide-toggle {margin-left: 20px;}",
                ".advanced {border: dotted 1px #00e676;}",
                "mat-panel-description {justify-content: flex-end;}"
            ],
            "templateUrl": [
                "./group-fields.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "FormGroup"
                },
                {
                    "name": "panel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "IPanelOptions"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "expanel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatExpansionPanel",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ep'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activatable",
                    "args": [
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activeToggle",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkFields",
                    "args": [
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateValidator",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "a",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentFormControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "a",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentFormControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { AbstractControl, FormGroup } from '@angular/forms';\nimport { MatExpansionPanel } from '@angular/material/expansion';\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\nimport { FieldService } from '@app/shared/configuration/services/field.service';\n\nimport { IFieldOptions, IPanelOptions } from '../types';\n\n@Component({\n  selector: 'app-group-fields',\n  templateUrl: './group-fields.component.html',\n  styles: [\n    '.title {font-size: 22px;}',\n    '.title > mat-slide-toggle {margin-left: 20px;}',\n    '.advanced {border: dotted 1px #00e676;}',\n    'mat-panel-description {justify-content: flex-end;}',\n  ],\n})\nexport class GroupFieldsComponent implements OnInit {\n  active = true;\n  @Input() panel: IPanelOptions;\n  @Input() form: FormGroup;\n  @ViewChild('ep') expanel: MatExpansionPanel;\n\n  constructor(private service: FieldService) {}\n\n  ngOnInit(): void {\n    if (this.panel.activatable) this.activatable(this.panel.active);\n  }\n\n  get isAdvanced() {\n    return this.panel.ui_options && this.panel.ui_options.advanced;\n  }\n\n  activeToggle(e: MatSlideToggleChange) {\n    this.panel.active = e.checked;\n    this.activatable(e.checked);\n  }\n\n  activatable(flag: boolean) {\n    this.active = flag;\n    this.checkFields(this.active);\n  }\n\n  checkFields(flag: boolean) {\n    this.panel.options\n      .filter((a) => !('options' in a))\n      .forEach((a: IFieldOptions) => {\n        const split = a.key.split('/');\n        const [name, ...other] = split;\n        const currentFormGroup = (<unknown>other.reverse().reduce((p, c) => p.get(c), this.form)) as FormGroup;\n        const formControl = currentFormGroup.controls[name];\n        this.updateValidator(formControl, flag, a);\n        if (a.type === 'password') this.updateValidator(currentFormGroup.controls['confirm_' + name], flag, a, formControl);\n      });\n  }\n\n  updateValidator(formControl: AbstractControl, flag: boolean, a: IFieldOptions, currentFormControl?: AbstractControl) {\n    if (formControl) {\n      if (!flag) formControl.clearValidators();\n      else formControl.setValidators(this.service.setValidator(a, currentFormControl));\n      formControl.updateValueAndValidity();\n      formControl.markAsTouched();\n      this.form.updateValueAndValidity();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".title {font-size: 22px;}\n.title > mat-slide-toggle {margin-left: 20px;}\n.advanced {border: dotted 1px #00e676;}\nmat-panel-description {justify-content: flex-end;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isAdvanced": {
                    "name": "isAdvanced",
                    "getSignature": {
                        "name": "isAdvanced",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<mat-expansion-panel [expanded]=\"active\" [disabled]=\"!active\" [ngClass]=\"{ panel: true, advanced: isAdvanced }\" #ep>\n  <mat-expansion-panel-header>\n    <mat-panel-title class=\"title\">\n      <span>{{ panel.display_name }}</span>\n      <mat-slide-toggle *ngIf=\"panel.activatable\" [checked]=\"active\" (change)=\"activeToggle($event)\">\n      </mat-slide-toggle>\n    </mat-panel-title>\n    <mat-panel-description>\n      <mat-icon *ngIf=\"panel.description\" matSuffix [appTooltip]=\"panel.description\">\n        info_outline\n      </mat-icon>\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n  <app-config-fields class=\"in-group\" [dataOptions]=\"panel.options\" [form]=\"form\"></app-config-fields>\n</mat-expansion-panel>\n"
        },
        {
            "name": "GroupKeysWrapperComponent",
            "id": "component-GroupKeysWrapperComponent-db8e3b5399a5b2a3676b927e32077285",
            "file": "src/app/shared/configuration/attributes/attributes/group-keys/group-keys-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-keys-wrapper",
            "styleUrls": [
                "group-keys-wrapper.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"group-keys-wrapper\">\n  <div class=\"group-checkbox\">\n    <mat-checkbox [matTooltip]=\"tooltipText\" [formControl]=\"groupControl\"\n                  (change)=\"onChange($event)\"></mat-checkbox>\n  </div>\n  <div class=\"group-field\">\n    <ng-container *ngTemplateOutlet=\"fieldTemplate\"></ng-container>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "attributeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "FormGroup"
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "FieldComponent"
                },
                {
                    "name": "fieldOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "IFieldOptions"
                },
                {
                    "name": "fieldTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "parametersForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "FormGroup"
                },
                {
                    "name": "wrapperOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ConfigAttributeOptions"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "groupControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "parameterControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tooltipText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_resolveAndSetupControls",
                    "args": [
                        {
                            "name": "attributeForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parametersForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldOptions",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "attributeForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parametersForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldOptions",
                            "type": "IFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_restoreStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, TemplateRef } from '@angular/core';\nimport {\n  AttributeService,\n  AttributeWrapper,\n  ConfigAttributeNames,\n  ConfigAttributeOptions\n} from '@app/shared/configuration/attributes/attribute.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { IFieldOptions } from '@app/shared/configuration/types';\nimport { BaseDirective } from '@adwp-ui/widgets';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { FieldComponent } from '@app/shared/configuration/field/field.component';\n\n@Component({\n  selector: 'app-group-keys-wrapper',\n  template: `\n    <div class=\"group-keys-wrapper\">\n      <div class=\"group-checkbox\">\n        <mat-checkbox [matTooltip]=\"tooltipText\" [formControl]=\"groupControl\"\n                      (change)=\"onChange($event)\"></mat-checkbox>\n      </div>\n      <div class=\"group-field\">\n        <ng-container *ngTemplateOutlet=\"fieldTemplate\"></ng-container>\n      </div>\n    </div>\n  `,\n  styleUrls: ['group-keys-wrapper.component.scss'],\n})\nexport class GroupKeysWrapperComponent extends BaseDirective implements AttributeWrapper, OnInit {\n  tooltipText: string = '';\n\n  groupControl: FormControl;\n\n  parameterControl: FormControl;\n\n  @Input() fieldTemplate: TemplateRef<any>;\n\n  @Input() wrapperOptions: ConfigAttributeOptions;\n\n  @Input() attributeForm: FormGroup;\n\n  @Input() parametersForm: FormGroup;\n\n  @Input() fieldOptions: IFieldOptions;\n\n  @Input() field: FieldComponent;\n\n  private _disabled: boolean;\n\n  constructor(private _attributeSrv: AttributeService) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this._resolveAndSetupControls(this.attributeForm, this.parametersForm, this.fieldOptions);\n    Promise.resolve().then(() => this._restoreStatus());\n  }\n\n  private _resolveAndSetupControls(attributeForm: FormGroup, parametersForm: FormGroup, fieldOptions: IFieldOptions): void {\n    let attributeControl: FormGroup = attributeForm;\n    let parameterControl: FormGroup = parametersForm;\n    let disabled = this._attributeSrv.attributes.get(ConfigAttributeNames.CUSTOM_GROUP_KEYS).value;\n    let text = this._attributeSrv.attributes.get(ConfigAttributeNames.CUSTOM_GROUP_KEYS).options.tooltipText;\n\n    const path = fieldOptions.key?.split('/').reverse();\n\n    this.groupControl = attributeControl.get(path) as FormControl;\n    this.parameterControl = parameterControl.get(path) as FormControl;\n\n    path.forEach((part) => {\n      disabled = disabled[part];\n    });\n\n    if (!disabled) {\n      attributeControl.disable();\n      parameterControl.disable();\n\n      this.tooltipText = text;\n    } else {\n      attributeControl.enable();\n      if (attributeControl.value) {\n        parameterControl.enable();\n      } else {\n        parameterControl.disable();\n      }\n\n      this.tooltipText = this.wrapperOptions.tooltipText;\n      this._disabled = !attributeControl.value;\n    }\n  }\n\n  onChange(e: MatCheckboxChange) {\n    if (e.checked) {\n      this.parameterControl.enable();\n      this.field.disabled = false;\n    } else {\n      this.parameterControl.disable();\n      this.field.disabled = true;\n    }\n  }\n\n  private _restoreStatus() {\n    if (this.field?.disabled) {\n      this.field.disabled = this._disabled;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host, .group-field, .group-keys-wrapper {\n  display: flex;\n  width: 100%;\n}\n\n.group-checkbox {\n  display: flex;\n  align-items: center;\n  padding: 0 0 0 20px;\n}\n\n",
                    "styleUrl": "group-keys-wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_attributeSrv",
                        "type": "AttributeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "_attributeSrv",
                        "type": "AttributeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "AttributeWrapper",
                "OnInit"
            ]
        },
        {
            "name": "HcmapComponent",
            "id": "component-HcmapComponent-1d3c2c22411dcc542141553536261e73",
            "file": "src/app/components/cluster/hcmap/hcmap.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }"
            ],
            "template": "<app-service-host [cluster]=\"cluster\"></app-service-host>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { ClusterService } from '@app/core/services/cluster.service';\n\n@Component({\n  template: ` <app-service-host [cluster]=\"cluster\"></app-service-host> `,\n  styles: [':host { flex: 1; }'],\n})\nexport class HcmapComponent implements OnInit {\n  cluster: { id: number; hostcomponent: string };\n  constructor(private service: ClusterService) {}\n\n  ngOnInit() {\n    const { id, hostcomponent } = { ...this.service.Cluster };\n    this.cluster = { id, hostcomponent };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "HistoryComponent",
            "id": "component-HistoryComponent-c0a407cd2b8bcc454f41d1ea0f2b1338",
            "file": "src/app/shared/configuration/tools/history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-history",
            "styleUrls": [],
            "styles": [
                ":host {height: 64px;}",
                "mat-form-field {flex: auto; margin: 0 10px; font-size: 14px; }"
            ],
            "template": "<mat-toolbar>\n  <mat-form-field>\n    <mat-select #vs placeholder=\"History\" (valueChange)=\"changeVersion($event); vs.value = ''\">\n      <mat-option *ngFor=\"let item of compareConfig; trackBy: trackById\" [value]=\"item.id\">[#{{ item.id }}] - {{ item.date | date: 'short' }} {{ item.description }} </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <span>&nbsp;&nbsp;</span>\n  <mat-form-field>\n    <mat-select placeholder=\"Compare to\" [formControl]=\"comparator\" multiple>\n      <mat-option *ngFor=\"let item of compareConfig; trackBy: trackById\" [value]=\"item.id\" [appColorOption]=\"item.color\">\n        [#{{ item.id }}] - {{ item.date | date: 'short' }} {{ item.description }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-toolbar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "compareConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "CompareConfig[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "compare",
                    "defaultValue": "new EventEmitter<number[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "version",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "comparator",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "item",
                            "type": "CompareConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CompareConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { BaseDirective } from '@app/shared/directives/base.directive';\n\nimport { CompareConfig } from '../types';\n\n@Component({\n  selector: 'app-history',\n  template: `\n    <mat-toolbar>\n      <mat-form-field>\n        <mat-select #vs placeholder=\"History\" (valueChange)=\"changeVersion($event); vs.value = ''\">\n          <mat-option *ngFor=\"let item of compareConfig; trackBy: trackById\" [value]=\"item.id\">[#{{ item.id }}] - {{ item.date | date: 'short' }} {{ item.description }} </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <span>&nbsp;&nbsp;</span>\n      <mat-form-field>\n        <mat-select placeholder=\"Compare to\" [formControl]=\"comparator\" multiple>\n          <mat-option *ngFor=\"let item of compareConfig; trackBy: trackById\" [value]=\"item.id\" [appColorOption]=\"item.color\">\n            [#{{ item.id }}] - {{ item.date | date: 'short' }} {{ item.description }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </mat-toolbar>\n  `,\n  styles: [':host {height: 64px;}', 'mat-form-field {flex: auto; margin: 0 10px; font-size: 14px; }'],\n})\nexport class HistoryComponent extends BaseDirective implements OnInit {\n  @Input() compareConfig: CompareConfig[];\n  @Output() version = new EventEmitter<number>();\n  @Output() compare = new EventEmitter<number[]>();\n\n  comparator = new FormControl();\n\n  ngOnInit() {\n    this.comparator.valueChanges.pipe(this.takeUntil()).subscribe((ids: number[]) => this.compare.emit(ids));\n  }\n\n  changeVersion(id: number) {\n    this.version.emit(id);\n  }\n\n  trackById(item: CompareConfig): number {\n    return item.id;\n  }\n\n  reset() {\n    this.compareConfig = [];\n    this.comparator.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {height: 64px;}\nmat-form-field {flex: auto; margin: 0 10px; font-size: 14px; }\n",
            "extends": "BaseDirective",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "Host2clusterComponent",
            "id": "component-Host2clusterComponent-cf60d76a56676355996251c55d8b5bd4",
            "file": "src/app/shared/add-component/host2cluster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-host2cluster",
            "styleUrls": [
                "host2cluster.component.scss"
            ],
            "styles": [],
            "template": "<div [@openClose]=\"showForm\" [style.overflow]=\"'hidden'\">\n  <app-add-host #form [displayMode]=\"1\"></app-add-host>\n  <app-add-controls [title]=\"'Create and add'\" [disabled]=\"!form.form.valid\"\n                    (cancel)=\"!Count ? onCancel() : (showForm = false)\" (save)=\"save()\"></app-add-controls>\n</div>\n\n<div [@openClose]=\"!showForm\" [style.overflow]=\"'hidden'\">\n  <div class=\"tools\">\n    <div class=\"text\">All</div>\n    <div class=\"actions\">\n      <button\n        mat-icon-button\n        (click)=\"showForm = !showForm\"\n        [color]=\"showForm ? 'primary' : 'accent'\"\n        [matTooltip]=\"showForm ? 'Hide the form for creating and adding a host' : 'Show the form for creating and adding a host'\"\n      >\n        <mat-icon>{{ showForm ? 'clear' : 'add' }}</mat-icon>\n      </button>\n      &nbsp;\n      <mat-checkbox [checked]=\"false\" (click)=\"selectAllHost(cb.checked)\" #cb\n                    [matTooltip]=\"cb.checked ? 'Deselect all' : 'Select all'\"></mat-checkbox>\n    </div>\n  </div>\n  <mat-selection-list class=\"add-host2cluster\" #listHosts (selectionChange)=\"selectionChange($event)\">\n    <mat-list-option *ngFor=\"let host of list\" [selected]=\"selected[host.id]\" [value]=\"host.id\"\n                     [appTooltip]=\"host.fqdn\"\n                     [appTooltipShowByCondition]=\"true\">\n      {{ host.fqdn }}\n    </mat-list-option>\n  </mat-selection-list>\n  <mat-paginator *ngIf=\"Count\" [length]=\"Count\" [pageSizeOptions]=\"[10, 25, 50, 100]\"\n                 (page)=\"pageHandler($event)\"></mat-paginator>\n  <app-add-controls *ngIf=\"Count\" [title]=\"'Add'\" [disabled]=\"disabled\" (cancel)=\"onCancel()\"\n                    (save)=\"addHost2Cluster()\"></app-add-controls>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "event",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allCbx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatCheckbox",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cb'"
                        }
                    ]
                },
                {
                    "name": "Count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "displayMode",
                    "defaultValue": "DisplayMode.default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayMode",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "hostForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HostComponent",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'form'"
                        }
                    ]
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Host[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "listHosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'listHosts'"
                        }
                    ]
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "selected",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "showForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addHost2Cluster",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAvailableHosts",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageHandler",
                    "args": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "selectAllHost",
                    "args": [
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "flag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectionChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { MatCheckbox } from '@angular/material/checkbox';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { openClose } from '@app/core/animations';\nimport { Host } from '@app/core/types';\n\nimport { BaseFormDirective } from './base-form.directive';\nimport { HostComponent } from './host.component';\nimport { DisplayMode } from './provider.component';\n\n@Component({\n  selector: 'app-add-host2cluster',\n  template: `\n    <div [@openClose]=\"showForm\" [style.overflow]=\"'hidden'\">\n      <app-add-host #form [displayMode]=\"1\"></app-add-host>\n      <app-add-controls [title]=\"'Create and add'\" [disabled]=\"!form.form.valid\"\n                        (cancel)=\"!Count ? onCancel() : (showForm = false)\" (save)=\"save()\"></app-add-controls>\n    </div>\n\n    <div [@openClose]=\"!showForm\" [style.overflow]=\"'hidden'\">\n      <div class=\"tools\">\n        <div class=\"text\">All</div>\n        <div class=\"actions\">\n          <button\n            mat-icon-button\n            (click)=\"showForm = !showForm\"\n            [color]=\"showForm ? 'primary' : 'accent'\"\n            [matTooltip]=\"showForm ? 'Hide the form for creating and adding a host' : 'Show the form for creating and adding a host'\"\n          >\n            <mat-icon>{{ showForm ? 'clear' : 'add' }}</mat-icon>\n          </button>\n          &nbsp;\n          <mat-checkbox [checked]=\"false\" (click)=\"selectAllHost(cb.checked)\" #cb\n                        [matTooltip]=\"cb.checked ? 'Deselect all' : 'Select all'\"></mat-checkbox>\n        </div>\n      </div>\n      <mat-selection-list class=\"add-host2cluster\" #listHosts (selectionChange)=\"selectionChange($event)\">\n        <mat-list-option *ngFor=\"let host of list\" [selected]=\"selected[host.id]\" [value]=\"host.id\"\n                         [appTooltip]=\"host.fqdn\"\n                         [appTooltipShowByCondition]=\"true\">\n          {{ host.fqdn }}\n        </mat-list-option>\n      </mat-selection-list>\n      <mat-paginator *ngIf=\"Count\" [length]=\"Count\" [pageSizeOptions]=\"[10, 25, 50, 100]\"\n                     (page)=\"pageHandler($event)\"></mat-paginator>\n      <app-add-controls *ngIf=\"Count\" [title]=\"'Add'\" [disabled]=\"disabled\" (cancel)=\"onCancel()\"\n                        (save)=\"addHost2Cluster()\"></app-add-controls>\n    </div>\n  `,\n  styleUrls: ['host2cluster.component.scss'],\n  animations: [openClose],\n})\nexport class Host2clusterComponent extends BaseFormDirective implements OnInit, OnDestroy {\n  list: Host[] = [];\n  showForm = false;\n  Count = 0;\n  displayMode: DisplayMode = DisplayMode.default;\n  @Output() event = new EventEmitter();\n  @ViewChild('form') hostForm: HostComponent;\n  @ViewChild('listHosts') listHosts: MatSelectionList;\n  @ViewChild('cb') allCbx: MatCheckbox;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  selected: { [key: number]: boolean } = {};\n\n  get disabled() {\n    return !Object.keys(this.selected).length;\n  }\n\n  ngOnInit() {\n    this.getAvailableHosts();\n  }\n\n  getAvailableHosts(pageIndex = 0, pageSize = 10) {\n    this.service\n      .getListResults<Host>('host', { limit: pageSize, page: pageIndex, cluster_is_null: 'true' })\n      .pipe(this.takeUntil())\n      .subscribe((r) => {\n        this.Count = r.count;\n        this.showForm = !r.count;\n        this.displayMode = r.count > 0 ? 2 : 1;\n        this.list = r.results;\n        if (this.listHosts?.options.length) this.allCbx.checked = false;\n      });\n  }\n\n  selectAllHost(flag: boolean) {\n    if (!flag) {\n      this.listHosts.selectAll();\n      this.listHosts.options.forEach((o) => {\n        this.selected[o.value] = true;\n      });\n    } else {\n      this.listHosts.deselectAll();\n      this.listHosts.options.forEach((o) => {\n        if (this.selected[o.value]) {\n          delete this.selected[o.value];\n        }\n      });\n    }\n  }\n\n  save() {\n    if (this.hostForm.form.valid) {\n      const host = this.hostForm.form.value;\n      host.cluster_id = this.service.Cluster.id;\n      this.service\n        .addHost(host)\n        .pipe(this.takeUntil())\n        .subscribe((a) => {\n          this.hostForm.form.controls['fqdn'].setValue('');\n          this.event.emit(`Host [ ${a.fqdn} ] has been added successfully.`);\n        });\n    }\n  }\n\n  addHost2Cluster() {\n    const value = Object.keys(this.selected);\n\n    this.service\n      .addHostInCluster(value.map((a) => +a))\n      .pipe(this.takeUntil())\n      .subscribe(() => {\n        this.paginator.firstPage();\n        this.getAvailableHosts();\n      });\n  }\n\n  pageHandler(pageEvent: PageEvent) {\n    this.getAvailableHosts(pageEvent.pageIndex, pageEvent.pageSize);\n  }\n\n  selectionChange(e: MatSelectionListChange): void {\n    const value = e.option.value;\n    if (this.selected[value]) {\n      delete this.selected[value];\n    } else {\n      this.selected[value] = true;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".add-host2cluster {\n  flex: 1;\n}\n\n.tools {\n  display: flex;\n  width: 100%;\n  align-items: center;\n  flex: 0 0 45px;\n  padding: 0 16px;\n  box-sizing: border-box;\n\n  > .text {\n    display: flex;\n    width: 100%;\n  }\n\n  > .actions {\n    display: flex;\n    align-items: center;\n  }\n}\n",
                    "styleUrl": "host2cluster.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFormDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                }
            }
        },
        {
            "name": "HostComponent",
            "id": "component-HostComponent-5fb809d459784eddea51d4829bc7e828",
            "file": "src/app/shared/add-component/host.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ActionsDirective",
                    "type": "directive"
                }
            ],
            "selector": "app-add-host",
            "styleUrls": [],
            "styles": [
                ":host {display: block; margin-top: 10px;}",
                ".inner {overflow: hidden; margin: 0 -6px;}",
                ".inner app-add-provider {padding: 10px 24px; background-color: #4e4e4e;display:block;}",
                ".row {display: flex;}"
            ],
            "template": "<ng-container [formGroup]=\"form\">\n  <div class=\"row\">\n    <mat-form-field class=\"full-width\">\n      <mat-select appInfinityScroll (topScrollPoint)=\"getNextPageProvider()\" required placeholder=\"Hostprovider\" formControlName=\"provider_id\">\n        <mat-option value=\"\">...</mat-option>\n        <mat-option *ngFor=\"let p of providers$ | async\" [value]=\"p.id\">{{ p.name }}</mat-option>\n      </mat-select>\n      <button\n        [style.fontSize.px]=\"24\"\n        matSuffix\n        mat-icon-button\n        [color]=\"expanded ? 'primary' : 'accent'\"\n        (click)=\"showHostproviderForm($event)\"\n        [matTooltip]=\"expanded ? 'Hide hostprovider creation form' : 'Create and add hostprovider'\"\n      >\n        <mat-icon>{{ expanded ? 'clear' : 'add' }}</mat-icon>\n      </button>\n      <mat-error *ngIf=\"isError('provider_id')\">\n        <mat-error *ngIf=\"form.get('provider_id').hasError('required')\">Hostprovider is required. If no hostprovider is available, add it here.</mat-error>\n      </mat-error>\n    </mat-form-field>\n  </div>\n\n  <div [@openClose]=\"expanded\" class=\"inner\">\n    <app-add-provider [displayMode]=\"1\" (cancel)=\"createdProvider($event)\"></app-add-provider>\n  </div>\n\n  <app-input *ngIf=\"displayMode < 2\" [form]=\"form\" [label]=\"'Fully qualified domain name'\" [controlName]=\"'fqdn'\" [isRequired]=\"true\"></app-input>\n\n  <div class=\"row\" *ngIf=\"displayMode === 2\">\n    <mat-form-field class=\"full-width\">\n      <input required matInput placeholder=\"Fully qualified domain name\" formControlName=\"fqdn\" />\n      <button [style.fontSize.px]=\"24\" [disabled]=\"!form.valid\" matTooltip=\"Create host\" matSuffix mat-icon-button [color]=\"'accent'\" (click)=\"save()\">\n        <mat-icon>add_box</mat-icon>\n      </button>\n      <mat-error *ngIf=\"form.get('fqdn').hasError('required')\">Fully qualified domain name is required </mat-error>\n    </mat-form-field>\n  </div>\n\n  <ng-container *ngIf=\"displayMode === 0\">\n    <div class=\"row\">\n      <mat-form-field class=\"full-width\">\n        <mat-select appInfinityScroll (topScrollPoint)=\"getNextPageClusters()\" placeholder=\"Cluster\" formControlName=\"cluster_id\">\n          <mat-option value=\"\">...</mat-option>\n          <mat-option *ngFor=\"let c of clusters$ | async\" [value]=\"c.id\">{{ c.name }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayMode",
                    "defaultValue": "DisplayMode.default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "DisplayMode"
                }
            ],
            "outputsClass": [
                {
                    "name": "event",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "clusters$",
                    "defaultValue": "new BehaviorSubject<Partial<ICluster>[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "createdProviderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "limit",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "pageCluster",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "pageProvider",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "providers$",
                    "defaultValue": "new BehaviorSubject<Partial<Provider[]>>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAction",
                    "args": [
                        {
                            "name": "provider_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "provider_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createdProvider",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClusters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNextPageClusters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNextPageProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProviders",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "showHostproviderForm",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { EventHelper } from '@adwp-ui/widgets';\n\nimport { openClose } from '@app/core/animations';\nimport { clearEmptyField, Host, Provider } from '@app/core/types';\nimport { ActionsDirective } from '../components/actions/actions.directive';\nimport { AddService } from './add.service';\nimport { BaseFormDirective } from './base-form.directive';\nimport { DisplayMode } from './provider.component';\nimport { ICluster } from '@app/models/cluster';\n\n@Component({\n  selector: 'app-add-host',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <div class=\"row\">\n        <mat-form-field class=\"full-width\">\n          <mat-select appInfinityScroll (topScrollPoint)=\"getNextPageProvider()\" required placeholder=\"Hostprovider\" formControlName=\"provider_id\">\n            <mat-option value=\"\">...</mat-option>\n            <mat-option *ngFor=\"let p of providers$ | async\" [value]=\"p.id\">{{ p.name }}</mat-option>\n          </mat-select>\n          <button\n            [style.fontSize.px]=\"24\"\n            matSuffix\n            mat-icon-button\n            [color]=\"expanded ? 'primary' : 'accent'\"\n            (click)=\"showHostproviderForm($event)\"\n            [matTooltip]=\"expanded ? 'Hide hostprovider creation form' : 'Create and add hostprovider'\"\n          >\n            <mat-icon>{{ expanded ? 'clear' : 'add' }}</mat-icon>\n          </button>\n          <mat-error *ngIf=\"isError('provider_id')\">\n            <mat-error *ngIf=\"form.get('provider_id').hasError('required')\">Hostprovider is required. If no hostprovider is available, add it here.</mat-error>\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div [@openClose]=\"expanded\" class=\"inner\">\n        <app-add-provider [displayMode]=\"1\" (cancel)=\"createdProvider($event)\"></app-add-provider>\n      </div>\n\n      <app-input *ngIf=\"displayMode < 2\" [form]=\"form\" [label]=\"'Fully qualified domain name'\" [controlName]=\"'fqdn'\" [isRequired]=\"true\"></app-input>\n\n      <div class=\"row\" *ngIf=\"displayMode === 2\">\n        <mat-form-field class=\"full-width\">\n          <input required matInput placeholder=\"Fully qualified domain name\" formControlName=\"fqdn\" />\n          <button [style.fontSize.px]=\"24\" [disabled]=\"!form.valid\" matTooltip=\"Create host\" matSuffix mat-icon-button [color]=\"'accent'\" (click)=\"save()\">\n            <mat-icon>add_box</mat-icon>\n          </button>\n          <mat-error *ngIf=\"form.get('fqdn').hasError('required')\">Fully qualified domain name is required </mat-error>\n        </mat-form-field>\n      </div>\n\n      <ng-container *ngIf=\"displayMode === 0\">\n        <div class=\"row\">\n          <mat-form-field class=\"full-width\">\n            <mat-select appInfinityScroll (topScrollPoint)=\"getNextPageClusters()\" placeholder=\"Cluster\" formControlName=\"cluster_id\">\n              <mat-option value=\"\">...</mat-option>\n              <mat-option *ngFor=\"let c of clusters$ | async\" [value]=\"c.id\">{{ c.name }}</mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: [\n    ':host {display: block; margin-top: 10px;}',\n    '.inner {overflow: hidden; margin: 0 -6px;}',\n    '.inner app-add-provider {padding: 10px 24px; background-color: #4e4e4e;display:block;}',\n    '.row {display: flex;}',\n  ],\n  providers: [ActionsDirective],\n  animations: [openClose],\n})\nexport class HostComponent extends BaseFormDirective implements OnInit {\n  @Input() displayMode: DisplayMode = DisplayMode.default;\n  @Output() event = new EventEmitter();\n\n  providers$ = new BehaviorSubject<Partial<Provider[]>>([]);\n  clusters$ = new BehaviorSubject<Partial<ICluster>[]>([]);\n  expanded = false;\n  createdProviderId: number;\n\n  pageCluster = 1;\n  pageProvider = 1;\n  limit = 10;\n\n  constructor(private action: ActionsDirective, service: AddService, dialog: MatDialog) {\n    super(service, dialog);\n  }\n\n  ngOnInit() {\n    this.form = this.service.model('host').form;\n    this.getProviders();\n    this.getClusters();\n    this.form\n      .get('provider_id')\n      .valueChanges.pipe(\n        this.takeUntil(),\n        filter((a) => a)\n      )\n      .subscribe((value) => this.checkAction(+value));\n  }\n\n  isError(name: string) {\n    const fi = this.form.get(name);\n    return fi.invalid && (fi.dirty || fi.touched);\n  }\n\n  showHostproviderForm(e: MouseEvent) {\n    EventHelper.stopPropagation(e);\n    this.expanded = !this.expanded;\n    this.form.get('provider_id').setValue('');\n  }\n\n  checkAction(provider_id: number) {\n    const ACTION_NAME = 'create_host';\n    const provider = this.providers$.getValue().find((a) => a.id === provider_id);\n\n    if (provider && provider.actions) {\n      const actions = provider.actions.filter((a) => a.button === ACTION_NAME);\n      if (actions && actions.length) {\n        this.action.inputData = { actions };\n        this.onCancel();\n        this.action.onClick();\n      }\n    }\n  }\n\n  save() {\n    const data = clearEmptyField(this.form.value) as Host;\n    if (this.displayMode !== 0) data.cluster_id = this.service.Cluster.id;\n    this.service\n      .addHost(data)\n      .pipe(\n        this.takeUntil(),\n        tap(() => this.form.controls['fqdn'].setValue(''))\n      )\n      .subscribe((a) => this.event.emit(`Host [ ${a.fqdn} ] has been added successfully.`));\n  }\n\n  createdProvider(id: number) {\n    this.expanded = false;\n    this.service\n      .getList<Provider>('provider', { limit: this.limit, page: this.pageProvider - 1 })\n      .pipe(tap((_) => this.form.get('provider_id').setValue(id)))\n      .subscribe((list) => this.providers$.next(list));\n  }\n\n  getNextPageClusters() {\n    const count = this.clusters$.getValue().length;\n    if (count === this.pageCluster * this.limit) {\n      this.pageCluster++;\n      this.getClusters();\n    }\n  }\n\n  getNextPageProvider() {\n    const count = this.providers$.getValue().length;\n    if (count === this.pageProvider * this.limit) {\n      this.pageProvider++;\n      this.getProviders();\n    }\n  }\n\n  getProviders() {\n    this.service\n      .getList<Provider>('provider', { limit: this.limit, page: this.pageProvider - 1 })\n      .pipe(tap((list) => this.form.get('provider_id').setValue(list.length === 1 ? list[0].id : '')))\n      .subscribe((list) => this.providers$.next([...this.providers$.getValue(), ...list]));\n    if (this.form.get('provider_id').value) this.expanded = false;\n  }\n\n  getClusters() {\n    this.service\n      .getList<ICluster>('cluster', { limit: this.limit, page: this.pageCluster - 1 })\n      .subscribe((list) => this.clusters$.next([...this.clusters$.getValue(), ...list]));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {display: block; margin-top: 10px;}\n.inner {overflow: hidden; margin: 0 -6px;}\n.inner app-add-provider {padding: 10px 24px; background-color: #4e4e4e;display:block;}\n.row {display: flex;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action",
                        "type": "ActionsDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "AddService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "ActionsDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "AddService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseFormDirective",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "HostDetailsComponent",
            "id": "component-HostDetailsComponent-59358932429f53da381ee3a5bf9c3078",
            "file": "src/app/components/host/host-details/host-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-host-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'host'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.Host, 'host'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'host'),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { IHost } from '@app/models/host';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { HostService } from '@app/services/host.service';\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-host-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class HostDetailsComponent extends DetailAbstractDirective<IHost> {\n\n  entityParam = 'host';\n\n  leftMenu = [\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.Host, 'host'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'host'),\n  ];\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: HostService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "HostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "HostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "HostListComponent",
            "id": "component-HostListComponent-583245bda4e49e35339a286a3913235b",
            "file": "src/app/components/host/host-list/host-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-host-list",
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }"
            ],
            "template": "<mat-toolbar class=\"toolbar\">\n  <app-crumbs [navigation]=\"[{ url: '/host', title: 'hosts' }]\"></app-crumbs>\n  <app-add-button [name]=\"type\" (added)=\"current = $event\">Create {{ type }}</app-add-button>\n</mat-toolbar>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "eventTypes",
                    "defaultValue": "[ConcernEventType.Host]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.fqdnColumn(),\n    ListFactory.providerColumn(),\n    {\n      type: 'component',\n      label: 'Cluster',\n      sort: 'cluster_name',\n      component: ClusterColumnComponent,\n      instanceTaken: (componentRef: ComponentRef<ClusterColumnComponent>) => {\n        componentRef.instance\n          .onGetNextPageCluster\n          .pipe(this.takeUntil())\n          .subscribe((data: UniversalAdcmEventData<IHost>) => {\n            this.clickCell(data.event, data.action, data.row);\n          });\n\n        componentRef.instance\n          .onGetClusters\n          .pipe(this.takeUntil())\n          .subscribe((data: UniversalAdcmEventData<IHost>) => {\n            this.clickCell(data.event, data.action, data.row);\n          });\n\n        componentRef.instance\n          .onAddCluster\n          .pipe(this.takeUntil())\n          .subscribe((data: AddClusterEventData) => {\n            if (data?.cluster) {\n              this.hostService.addToCluster(data.row.id, data.cluster as any as number)\n                .subscribe((host) => {\n                  if (this.data$?.value?.results) {\n                    this.api.getOne('cluster', host.cluster_id).subscribe((cluster: ICluster) => {\n                      const tableData = Object.assign({}, this.data$.value);\n                      const index = tableData.results.findIndex(item => item.id === host.id);\n                      const row = Object.assign({}, tableData.results[index]);\n\n                      row.cluster_id = cluster.id;\n                      row.cluster_name = cluster.name;\n\n                      tableData.results.splice(index, 1, row);\n                      this.reload(tableData as IListResult<any>);\n                    });\n                  }\n                });\n            }\n          });\n      }\n    },\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.configColumn(this),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IHost>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'host'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentRef } from '@angular/core';\nimport { IColumns, IListResult } from '@adwp-ui/widgets';\nimport { Store } from '@ngrx/store';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { TypeName } from '@app/core/types';\nimport { IHost } from '@app/models/host';\nimport { ListFactory } from '@app/factories/list.factory';\nimport { AddClusterEventData, ClusterColumnComponent } from '@app/components/columns/cluster-column/cluster-column.component';\nimport { UniversalAdcmEventData } from '@app/models/universal-adcm-event-data';\nimport { ConcernListDirective } from '@app/abstract-directives/concern-list.directive';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\nimport { ICluster } from '@app/models/cluster';\nimport { ListService } from '@app/shared/components/list/list.service';\nimport { SocketState } from '@app/core/store';\nimport { ConcernService } from '@app/services/concern.service';\nimport { HostService } from '@app/services/host.service';\nimport { ApiService } from '@app/core/api';\n\n@Component({\n  selector: 'app-host-list',\n  template: `\n    <mat-toolbar class=\"toolbar\">\n      <app-crumbs [navigation]=\"[{ url: '/host', title: 'hosts' }]\"></app-crumbs>\n      <app-add-button [name]=\"type\" (added)=\"current = $event\">Create {{ type }}</app-add-button>\n    </mat-toolbar>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }'],\n})\nexport class HostListComponent extends ConcernListDirective<IHost> {\n\n  type: TypeName = 'host';\n  eventTypes = [ConcernEventType.Host];\n\n  listColumns = [\n    ListFactory.fqdnColumn(),\n    ListFactory.providerColumn(),\n    {\n      type: 'component',\n      label: 'Cluster',\n      sort: 'cluster_name',\n      component: ClusterColumnComponent,\n      instanceTaken: (componentRef: ComponentRef<ClusterColumnComponent>) => {\n        componentRef.instance\n          .onGetNextPageCluster\n          .pipe(this.takeUntil())\n          .subscribe((data: UniversalAdcmEventData<IHost>) => {\n            this.clickCell(data.event, data.action, data.row);\n          });\n\n        componentRef.instance\n          .onGetClusters\n          .pipe(this.takeUntil())\n          .subscribe((data: UniversalAdcmEventData<IHost>) => {\n            this.clickCell(data.event, data.action, data.row);\n          });\n\n        componentRef.instance\n          .onAddCluster\n          .pipe(this.takeUntil())\n          .subscribe((data: AddClusterEventData) => {\n            if (data?.cluster) {\n              this.hostService.addToCluster(data.row.id, data.cluster as any as number)\n                .subscribe((host) => {\n                  if (this.data$?.value?.results) {\n                    this.api.getOne('cluster', host.cluster_id).subscribe((cluster: ICluster) => {\n                      const tableData = Object.assign({}, this.data$.value);\n                      const index = tableData.results.findIndex(item => item.id === host.id);\n                      const row = Object.assign({}, tableData.results[index]);\n\n                      row.cluster_id = cluster.id;\n                      row.cluster_name = cluster.name;\n\n                      tableData.results.splice(index, 1, row);\n                      this.reload(tableData as IListResult<any>);\n                    });\n                  }\n                });\n            }\n          });\n      }\n    },\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.configColumn(this),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IHost>;\n\n  constructor(\n    protected service: ListService,\n    protected store: Store<SocketState>,\n    public route: ActivatedRoute,\n    public router: Router,\n    public dialog: MatDialog,\n    protected concernService: ConcernService,\n    protected hostService: HostService,\n    protected api: ApiService,\n  ) {\n    super(service, store, route, router, dialog, concernService);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hostService",
                        "type": "HostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 102,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "concernService",
                        "type": "ConcernService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hostService",
                        "type": "HostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ConcernListDirective"
        },
        {
            "name": "HostproviderComponent",
            "id": "component-HostproviderComponent-ab38e837e7006e8006c8d79fc1bdc8f7",
            "file": "src/app/components/hostprovider/hostprovider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hostprovider",
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }"
            ],
            "template": "<mat-toolbar class=\"toolbar\">\n  <app-crumbs [navigation]=\"[{ url: '/provider', title: 'providers' }]\"></app-crumbs>\n  <app-add-button [name]=\"type\" (added)=\"current = $event\">Create {{ type }}</app-add-button>\n</mat-toolbar>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventTypes",
                    "defaultValue": "[ConcernEventType.HostProvider]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.nameColumn(),\n    ListFactory.bundleColumn(),\n    ListFactory.stateColumn(),\n    ListFactory.actionsButton(this),\n    ListFactory.updateColumn(),\n    ListFactory.configColumn(this),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<any>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "type",
                    "defaultValue": "'provider'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IColumns } from '@adwp-ui/widgets';\n\nimport { TypeName } from '@app/core/types';\nimport { ListFactory } from '@app/factories/list.factory';\nimport { ConcernListDirective } from '@app/abstract-directives/concern-list.directive';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-hostprovider',\n  template: `\n    <mat-toolbar class=\"toolbar\">\n      <app-crumbs [navigation]=\"[{ url: '/provider', title: 'providers' }]\"></app-crumbs>\n      <app-add-button [name]=\"type\" (added)=\"current = $event\">Create {{ type }}</app-add-button>\n    </mat-toolbar>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }'],\n})\nexport class HostproviderComponent extends ConcernListDirective<any> {\n\n  type: TypeName = 'provider';\n  eventTypes = [ConcernEventType.HostProvider];\n\n  listColumns = [\n    ListFactory.nameColumn(),\n    ListFactory.bundleColumn(),\n    ListFactory.stateColumn(),\n    ListFactory.actionsButton(this),\n    ListFactory.updateColumn(),\n    ListFactory.configColumn(this),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<any>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n",
            "extends": "ConcernListDirective"
        },
        {
            "name": "HostStatusComponent",
            "id": "component-HostStatusComponent-bbffdb4f4192d1068186cb343654107c",
            "file": "src/app/components/host/host-status/host-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-host-status",
            "styleUrls": [
                "../../../styles/status-tree.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/status-tree.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HostService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "folding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Folding",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "statusTree",
                    "defaultValue": "new BehaviorSubject<StatusTreeType>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree', {static: false}"
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "eventReceived",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "getEntityIdFromParams",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "expandCollapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "pipeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTreeType",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { fromJS, updateIn } from 'immutable';\n\nimport { EventMessage, SocketState } from '@app/core/store';\nimport { HostStatusTree } from '@app/models/status-tree';\nimport { HostService } from '@app/services/host.service';\nimport { StatusAbstractDirective } from '@app/abstract-directives/status.abstract.directive';\nimport { IHost } from '@app/models/host';\n\n@Component({\n  selector: 'app-host-status',\n  templateUrl: '../../../templates/status-tree.html',\n  styleUrls: ['../../../styles/status-tree.scss']\n})\nexport class HostStatusComponent extends StatusAbstractDirective<HostStatusTree, IHost> {\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected store: Store<SocketState>,\n    public entityService: HostService,\n  ) {\n    super(route, store, entityService);\n  }\n\n  eventReceived(event: EventMessage) {\n    let output;\n    switch (event.object.type) {\n      case 'host':\n        output = fromJS(this.statusTree.value);\n        if (output.get('id') === event.object.id) {\n          output = output.set('status', +event.object.details.value);\n        }\n        this.statusTree.next(output.toJS() as any as HostStatusTree);\n        break;\n      case 'hostcomponent':\n        output = fromJS(this.statusTree.value);\n        const hostId = output.get('id');\n        output = updateIn(output, ['hc'], (components: any[]) => components.map((component: any) => {\n          if (component.get('id') === +event.object.details.id && hostId === event.object.id) {\n            return component.set('status', +event.object.details.value);\n          }\n          return component;\n        }));\n        this.statusTree.next(output.toJS() as any as HostStatusTree);\n        break;\n    }\n  }\n\n  getEntityIdFromParams(): number {\n    return +this.route.parent.snapshot.params.host;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n}\n\n.controls {\n  position: fixed;\n  top: 130px;\n  right: 10px;\n\n  .notify {\n    opacity: 0;\n\n    &>span {\n      line-height: 24px;\n      vertical-align: text-bottom;\n    }\n  }\n}\n",
                    "styleUrl": "../../../styles/status-tree.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entityService",
                        "type": "HostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityService",
                        "type": "HostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "StatusAbstractDirective",
            "templateData": "<ng-container *ngIf=\"loading; else loaded\">\n  <p>Loading...</p>\n</ng-container>\n\n<ng-template #loaded>\n\n  <div class=\"controls\">\n    <button mat-raised-button color=\"primary\" (click)=\"expandCollapseAll()\">Expand/Collapse All</button>\n  </div>\n\n  <app-status-tree\n    [tree]=\"statusTree | async | entityStatusToStatusTree : entityService : pipeData()\"\n    [folding]=\"folding\"\n    #tree\n  ></app-status-tree>\n\n</ng-template>\n"
        },
        {
            "name": "ImportComponent",
            "id": "component-ImportComponent-3c17dd4f9160f4d8db43f357e0ec37f1",
            "file": "src/app/shared/components/import/import.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import",
            "styleUrls": [
                "./import.component.scss"
            ],
            "styles": [],
            "template": "<p class=\"controls\" *ngIf=\"asIs\">\n  <button mat-raised-button color=\"accent\" (click)=\"go()\" [disabled]=\"form.invalid\">Save</button>\n</p>\n<div class=\"items\">\n  <div *ngFor=\"let item of data$ | async\" class=\"group\">\n    <h3>\n      {{ item.name }}\n      <mat-error *ngIf=\"hasError(item.id)\">This import is required!</mat-error>\n    </h3>\n    <app-exports [import]=\"item\" [form]=\"form\"></app-exports>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "asIs",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "data$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IImport[]>",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methodsClass": [
                {
                    "name": "getKey",
                    "args": [
                        {
                            "name": "id",
                            "type": "IComposite",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "IComposite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "go",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { ChannelService } from '@app/core/services';\nimport { keyChannelStrim } from '@app/core/services';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { IExport, IImport } from '@app/core/types';\n\ninterface IComposite {\n  [key: string]: number;\n}\n\nconst trueOnly = (): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (control.value ? null : { trueOnly: !control.value });\n\nconst requiredObject = (): ValidatorFn => (control: AbstractControl): { [key: string]: boolean } | null =>\n  Object.keys(control.value).some((key) => control.value[key]) ? null : { requiered: true };\n\n@Component({\n  selector: 'app-exports',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <ng-container [formGroupName]=\"getKey({ import_id: import.id })\">\n        <div *ngFor=\"let item of import.exports\" class=\"component\">\n          <mat-checkbox [checked]=\"item.binded\" [formControlName]=\"getKey(item.id)\" (change)=\"change($event, item)\"> {{ item.obj_name }}</mat-checkbox>\n          <div>{{ item.bundle_name }} {{ item.bundle_version }}</div>\n        </div>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: ['.component {padding: 6px 8px; margin-bottom: 18px; font-size: 18px;}', '.component div {font-size: 12px;margin-left: 24px; margin-top: 4px;}'],\n})\nexport class ExportComponent {\n  @Input() form: FormGroup;\n  @Input() import: IImport;\n\n  getKey(id: IComposite) {\n    return JSON.stringify(id);\n  }\n\n  change(e: MatCheckboxChange, item: IExport) {\n    if (!this.import.multibind) {\n      const group = this.form.controls[this.getKey({ import_id: this.import.id })] as FormGroup;\n\n      if (e.checked)\n        Object.keys(group.controls)\n          .map((key) => {\n            group.controls[key].clearValidators();\n            return key;\n          })\n          .filter((key) => key !== this.getKey(item.id))\n          .map((key) => group.controls[key].setValue(false));\n      else if (this.import.required) {\n        Object.keys(group.controls).map((key) => {\n          const c = group.controls[key];\n          c.setValidators(trueOnly());\n          c.updateValueAndValidity();\n        });\n      }\n    }\n  }\n}\n\n@Component({\n  selector: 'app-import',\n  template: `\n    <p class=\"controls\" *ngIf=\"asIs\">\n      <button mat-raised-button color=\"accent\" (click)=\"go()\" [disabled]=\"form.invalid\">Save</button>\n    </p>\n    <div class=\"items\">\n      <div *ngFor=\"let item of data$ | async\" class=\"group\">\n        <h3>\n          {{ item.name }}\n          <mat-error *ngIf=\"hasError(item.id)\">This import is required!</mat-error>\n        </h3>\n        <app-exports [import]=\"item\" [form]=\"form\"></app-exports>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./import.component.scss'],\n})\nexport class ImportComponent implements OnInit {\n  form = new FormGroup({});\n  data$: Observable<IImport[]>;\n  asIs = false;\n\n  constructor(private current: ClusterService, private channel: ChannelService) {}\n\n  getKey(id: IComposite) {\n    return JSON.stringify(id);\n  }\n\n  hasError(id: number) {\n    return this.form.get(this.getKey({ import_id: id })).invalid;\n  }\n\n  ngOnInit() {\n    this.data$ = this.current.getImportData().pipe(\n      tap((a) => (this.asIs = !!a.length)),\n      tap((a) =>\n        a.map((i: IImport) => {\n          const validFlag = i.required && !i.multibind && i.exports.every((e) => !e.binded);\n          const exportGroup = i.exports.reduce((p, c) => {\n            const fc = {};\n            fc[`${this.getKey(c.id)}`] = new FormControl(c.binded, validFlag ? trueOnly() : null);\n            return { ...p, ...fc };\n          }, {});\n          const import_id = this.getKey({ import_id: i.id });\n          this.form.addControl(import_id, new FormGroup(exportGroup, i.required ? requiredObject() : null));\n        })\n      )\n    );\n  }\n\n  go() {\n    if (!this.form.invalid) {\n      let bind = [];\n      Object.keys(this.form.controls)\n        .filter((a) => Object.keys(this.form.controls[a].value).length)\n        .map((key) => {\n          const obj = JSON.parse(key);\n          const value = this.form.controls[key].value;\n          const items = Object.keys(value)\n            .filter((a) => value[a] === true)\n            .map((a) => ({ ...obj, export_id: JSON.parse(a) }));\n          bind = [...bind, ...items];\n        });\n      this.current.bindImport({ bind }).subscribe((_) => this.channel.next(keyChannelStrim.notifying, 'Successfully saved'));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  padding: 0 20px;\n}\n\n.controls {\n  position: fixed;\n  top: 110px;\n  right: 80px;\n}\n\n.group {\n  margin: 0.2em;\n}\n\n.items {\n  display: flex;\n  flex-wrap: wrap;\n}\n\nmat-error {\n  display: block;\n  margin-top: 6px;\n  font-weight: normal;\n}",
                    "styleUrl": "./import.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "current",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "current",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-b0b190ca214ce77eb027e42677f4fa72",
            "file": "src/app/shared/form-elements/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [],
            "styles": [
                ".row {display:flex;}"
            ],
            "template": "<div class=\"row\" [formGroup]=\"form\">\n  <mat-form-field class=\"full-width\">\n    <input matInput [placeholder]=\"label\" formControlName=\"{{ controlName }}\" [required]=\"isRequired\" />\n    <mat-error *ngIf=\"isError(controlName)\">\n      <mat-error *ngIf=\"hasError(controlName, 'maxlength')\">Ensure this field has no more than 30 characters.\n      </mat-error>\n      <mat-error *ngIf=\"hasError(controlName, 'required')\">{{ label }} is required.</mat-error>\n      <mat-error *ngIf=\"hasError(controlName, 'pattern')\">{{ label }} is not correct.</mat-error>\n    </mat-error>\n  </mat-form-field>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "controlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "FormGroup"
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BaseDirective } from '../directives';\n\n@Component({\n  selector: 'app-input',\n  template: `\n    <div class=\"row\" [formGroup]=\"form\">\n      <mat-form-field class=\"full-width\">\n        <input matInput [placeholder]=\"label\" formControlName=\"{{ controlName }}\" [required]=\"isRequired\" />\n        <mat-error *ngIf=\"isError(controlName)\">\n          <mat-error *ngIf=\"hasError(controlName, 'maxlength')\">Ensure this field has no more than 30 characters.\n          </mat-error>\n          <mat-error *ngIf=\"hasError(controlName, 'required')\">{{ label }} is required.</mat-error>\n          <mat-error *ngIf=\"hasError(controlName, 'pattern')\">{{ label }} is not correct.</mat-error>\n        </mat-error>\n      </mat-form-field>\n    </div>\n  `,\n  styles: ['.row {display:flex;}'],\n})\nexport class InputComponent extends BaseDirective {\n  @Input() form: FormGroup;\n  @Input() controlName: string;\n  @Input() label: string;\n  @Input() isRequired = false;\n\n  isError(name: string) {\n    const f = this.form.get(name);\n    return f.invalid && (f.dirty || f.touched);\n  }\n\n  hasError(name: string, error: string) {\n    return this.form.controls[name].hasError(error);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".row {display:flex;}\n",
            "extends": "BaseDirective"
        },
        {
            "name": "IntroComponent",
            "id": "component-IntroComponent-dc9aca833ab95acdc626bee47e770186",
            "file": "src/app/admin/intro.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-intro",
            "styleUrls": [],
            "styles": [
                ":host {padding: 0 10px;}",
                ".admin-warn {border:solid 1px #ff9800;margin-right: 20px;}",
                ".admin-warn ul li {padding: 8px 0;}"
            ],
            "template": "<p>\n  This is Arenadata Cluster Manager (ADCM) - the home of all your data. It connects together different data applications, providing a fast, reliable and enterprise-ready way to\n  manage your data landscape. Please read this short notice to start use ADCM in its most efficient way.\n</p>\n<div class=\"admin-warn\">\n  <ul>\n    <li>\n      <i\n        >We have to know ADCM's Url [ <b style=\"color: #00e676;\">{{ adcm_url }}</b> ] to send information from host. We try to gues that information from url you enter in\n        browser. <br />But if your network has more complicated structure and we gues wrong, <a routerLink=\"/admin/settings\">please fix that here</a>.</i\n      >\n    </li>\n  </ul>\n</div>\n<h3>Bundle</h3>\n<p>\n  Bundle is a set of functionality that you can add to your ADCM. Every data application (Database, Hadoop cluster, etc.) is created using a bundle. For example, to start a\n  Hadoop cluster version 3.0.0, you will need a Hadoop 3.0.0 bundle. Other bundles may contain virtual machine access method (Amazon, Google, etc.), widgets, etc. Think of it\n  like a plugin, or a mobile phone application.\n</p>\n<h3>Cluster</h3>\n<p>\n  This is the main functionality. Cluster is a set of hosts, running one distributed application. Cluster is deployed from bundle. Of course, you can have multiple clusters set\n  up from the same bundle.\n</p>\n<h3>Service</h3>\n<p>\n  Service is a part of a cluster. It contain part of the cluster functionality. Service can run across all hosts in the cluster, or only across some of them.\n</p>\n<h3>Component</h3>\n<p>\n  Component is a part of a service that is running on one host.\n</p>\n<h3>Hostprovider</h3>\n<p>\n  Hostprovider is a set of access credentials for ADCM to create new hosts or access existing, For example, when you want to create a VM in a public cloud, you will need to add\n  username, access key and other access credentials to ADCM. Do it by creating a new Hostprovider and editing its config.\n</p>\n<h3>Host</h3>\n<p>\n  This is a machine that your data app is running on. A host may be a virtual machine, a physical server, or something else.<br />\n  A host can be added to only one cluster - you cannot share a host between multiple clusters.\n</p>\n<p>&nbsp;</p>\nShortly:\n<ul>\n  <li>Bundle is a packet with functionality (ex. Hadoop)</li>\n  <li>Cluster is a logical set of functionality. Cluster is created from bundle (ex Hadoop cluster)</li>\n  <li>Service is a logical part of cluster (ex. HDFS)</li>\n  <li>Component is a part of service, that is located on some host (ex. DataNode)</li>\n</ul>\nIf you need a more deep dive into ADCM's functionality,\n<a href=\"https://docs.arenadata.io/adcm/\" target=\"_blank\">start from docs</a>.\n<br />\nNow you are ready to start exploring ADCM by yourself - enjoy it!\n<p>&nbsp;</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "adcm_url",
                    "defaultValue": "`${location.protocol}//${location.host}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-intro',\n  template: `\n    <p>\n      This is Arenadata Cluster Manager (ADCM) - the home of all your data. It connects together different data applications, providing a fast, reliable and enterprise-ready way to\n      manage your data landscape. Please read this short notice to start use ADCM in its most efficient way.\n    </p>\n    <div class=\"admin-warn\">\n      <ul>\n        <li>\n          <i\n            >We have to know ADCM's Url [ <b style=\"color: #00e676;\">{{ adcm_url }}</b> ] to send information from host. We try to gues that information from url you enter in\n            browser. <br />But if your network has more complicated structure and we gues wrong, <a routerLink=\"/admin/settings\">please fix that here</a>.</i\n          >\n        </li>\n      </ul>\n    </div>\n    <h3>Bundle</h3>\n    <p>\n      Bundle is a set of functionality that you can add to your ADCM. Every data application (Database, Hadoop cluster, etc.) is created using a bundle. For example, to start a\n      Hadoop cluster version 3.0.0, you will need a Hadoop 3.0.0 bundle. Other bundles may contain virtual machine access method (Amazon, Google, etc.), widgets, etc. Think of it\n      like a plugin, or a mobile phone application.\n    </p>\n    <h3>Cluster</h3>\n    <p>\n      This is the main functionality. Cluster is a set of hosts, running one distributed application. Cluster is deployed from bundle. Of course, you can have multiple clusters set\n      up from the same bundle.\n    </p>\n    <h3>Service</h3>\n    <p>\n      Service is a part of a cluster. It contain part of the cluster functionality. Service can run across all hosts in the cluster, or only across some of them.\n    </p>\n    <h3>Component</h3>\n    <p>\n      Component is a part of a service that is running on one host.\n    </p>\n    <h3>Hostprovider</h3>\n    <p>\n      Hostprovider is a set of access credentials for ADCM to create new hosts or access existing, For example, when you want to create a VM in a public cloud, you will need to add\n      username, access key and other access credentials to ADCM. Do it by creating a new Hostprovider and editing its config.\n    </p>\n    <h3>Host</h3>\n    <p>\n      This is a machine that your data app is running on. A host may be a virtual machine, a physical server, or something else.<br />\n      A host can be added to only one cluster - you cannot share a host between multiple clusters.\n    </p>\n    <p>&nbsp;</p>\n    Shortly:\n    <ul>\n      <li>Bundle is a packet with functionality (ex. Hadoop)</li>\n      <li>Cluster is a logical set of functionality. Cluster is created from bundle (ex Hadoop cluster)</li>\n      <li>Service is a logical part of cluster (ex. HDFS)</li>\n      <li>Component is a part of service, that is located on some host (ex. DataNode)</li>\n    </ul>\n    If you need a more deep dive into ADCM's functionality,\n    <a href=\"https://docs.arenadata.io/adcm/\" target=\"_blank\">start from docs</a>.\n    <br />\n    Now you are ready to start exploring ADCM by yourself - enjoy it!\n    <p>&nbsp;</p>\n  `,\n  styles: [':host {padding: 0 10px;}', '.admin-warn {border:solid 1px #ff9800;margin-right: 20px;}', '.admin-warn ul li {padding: 8px 0;}'],\n})\nexport class IntroComponent {\n  adcm_url = `${location.protocol}//${location.host}`;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {padding: 0 10px;}\n.admin-warn {border:solid 1px #ff9800;margin-right: 20px;}\n.admin-warn ul li {padding: 8px 0;}\n"
        },
        {
            "name": "IssueInfoComponent",
            "id": "component-IssueInfoComponent-aa24c13e7e5ce20ee9dbfb0bcd56e06c",
            "file": "src/app/shared/components/issue-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-issue-info",
            "styleUrls": [],
            "styles": [
                "a, .item-step { display: block; margin: 6px 0 8px 12px; white-space: nowrap;}"
            ],
            "template": "<div>{{ intro }}</div>\n<div *ngFor=\"let name of namesIssue\">\n  <ng-container *ngIf=\"isArray(current.issue[name]); else item_tpl\">\n    <div class=\"item-step\">\n      {{ name }}:\n      <span *ngFor=\"let o of current.issue[name]\">\n        <b>{{ o.name }}</b> <app-issue-info [current]=\"o\" [path]=\"name\" [intro]=\"''\" [parent]=\"current\"></app-issue-info>\n      </span>\n    </div>\n  </ng-container>\n  <ng-template #item_tpl>\n    <a [routerLink]=\"[Path, current.id, IssuePatch[name] || name]\">{{ IssueNames[name] || name }}</a>\n  </ng-template>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "IIssueInfo"
                },
                {
                    "name": "intro",
                    "defaultValue": "'Issues in:'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "IIssueInfo"
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "IssueNames",
                    "defaultValue": "{\n    config: 'Configuration',\n    host_component: 'Host - Components',\n    required_service: 'Required a service',\n    required_import: 'Required a import',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "IssuePatch",
                    "defaultValue": "{\n    required_service: 'service',\n    required_import: 'import',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "isArray",
                    "args": [
                        {
                            "name": "issue",
                            "type": " | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "issue",
                            "type": " | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\nimport { ComponentData } from './tooltip/tooltip.service';\nimport { IIssues } from '@app/models/issue';\n\nexport interface IIssueInfo {\n  id: number;\n  issue: IIssues;\n  cluster_id?: number;\n  name?: string;\n  path?: string;\n}\n\n@Component({\n  selector: 'app-issue-info',\n  template: `\n    <div>{{ intro }}</div>\n    <div *ngFor=\"let name of namesIssue\">\n      <ng-container *ngIf=\"isArray(current.issue[name]); else item_tpl\">\n        <div class=\"item-step\">\n          {{ name }}:\n          <span *ngFor=\"let o of current.issue[name]\">\n            <b>{{ o.name }}</b> <app-issue-info [current]=\"o\" [path]=\"name\" [intro]=\"''\" [parent]=\"current\"></app-issue-info>\n          </span>\n        </div>\n      </ng-container>\n      <ng-template #item_tpl>\n        <a [routerLink]=\"[Path, current.id, IssuePatch[name] || name]\">{{ IssueNames[name] || name }}</a>\n      </ng-template>\n    </div>\n  `,\n  styles: ['a, .item-step { display: block; margin: 6px 0 8px 12px; white-space: nowrap;}'],\n})\nexport class IssueInfoComponent implements OnInit {\n\n  @Input() intro = 'Issues in:';\n  @Input() path: string;\n  @Input() current: IIssueInfo;\n  @Input() parent: IIssueInfo;\n\n  IssuePatch = {\n    required_service: 'service',\n    required_import: 'import',\n  };\n\n  IssueNames = {\n    config: 'Configuration',\n    host_component: 'Host - Components',\n    required_service: 'Required a service',\n    required_import: 'Required a import',\n  };\n\n  constructor(private componentData: ComponentData) {}\n\n  ngOnInit(): void {\n    this.current = this.current || this.componentData.current;\n    this.path = this.path || this.componentData.path;\n    this.current.path = this.path;\n    this.componentData.emitter.emit('Done');\n  }\n\n  get Path() {\n    return this.parent && this.parent.cluster_id !== this.current.id ? `${this.parent.path}/${this.parent.id}/${this.path}` : this.path;\n  }\n\n  isArray(issue: [] | false): boolean {\n    return Array.isArray(issue);\n  }\n\n  get namesIssue() {\n    return Object.keys(this.current.issue || {});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "a, .item-step { display: block; margin: 6px 0 8px 12px; white-space: nowrap;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentData",
                        "type": "ComponentData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "componentData",
                        "type": "ComponentData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "Path": {
                    "name": "Path",
                    "getSignature": {
                        "name": "Path",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                },
                "namesIssue": {
                    "name": "namesIssue",
                    "getSignature": {
                        "name": "namesIssue",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                }
            }
        },
        {
            "name": "ItemComponent",
            "id": "component-ItemComponent-4aa42cebbb69487312b969b0c701f830",
            "file": "src/app/shared/configuration/scheme/item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-scheme",
            "styleUrls": [],
            "styles": [
                ":host {flex: 1}",
                "mat-form-field {margin: 6px 0 0; width: 100%}",
                ".chbox-field {margin:6px 0;}"
            ],
            "template": "<ng-container [formGroup]=\"item.form\">\n  <ng-container *ngIf=\"item.parent === 'list'; else other\">\n    <mat-form-field *ngIf=\"controlType === 'textbox'\">\n      <input matInput [formControlName]=\"index\" [value]=\"item.value\" />\n      <button *ngIf=\"!isReadOnly && item.parent === 'list'\" mat-icon-button matSuffix color=\"primary\" (click)=\"emmit()\">\n        <mat-icon>highlight_off</mat-icon>\n      </button>\n    </mat-form-field>\n  </ng-container>\n\n  <ng-template #other>\n    <div class=\"chbox-field\" *ngIf=\"controlType === 'boolean'\">\n      <mat-checkbox [formControlName]=\"item.name\">{{ item.name }}</mat-checkbox>\n      <mat-error *ngIf=\"!isValid\">\n        <mat-error *ngIf=\"hasError('required')\">Field [{{ item.name }}] is required!</mat-error>\n      </mat-error>\n    </div>\n    <mat-form-field *ngIf=\"controlType === 'textbox'\">\n      <mat-label>{{ item.name }}</mat-label>\n      <input matInput [formControlName]=\"item.name\" [readonly]=\"isReadOnly\" />\n      <mat-error *ngIf=\"!isValid\">\n        <mat-error *ngIf=\"hasError('required')\">Field [{{ item.name }}] is required!</mat-error>\n        <mat-error *ngIf=\"hasError('pattern')\">Field [{{ item.name }}] is invalid!</mat-error>\n        <mat-error *ngIf=\"hasError('min')\">Field [{{ item.name }}] value cannot be less than {{ validator.min }}!</mat-error>\n        <mat-error *ngIf=\"hasError('max')\">Field [{{ item.name }}] value cannot be greater than {{ validator.max }}!</mat-error>\n      </mat-error>\n    </mat-form-field>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "number"
                },
                {
                    "name": "isReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean"
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "IControl"
                }
            ],
            "outputsClass": [
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "controlType",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IValidator",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "emmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { controlType, IValidator } from '../types';\nimport { IYField } from '../yspec/yspec.service';\nimport { IControl } from './scheme.service';\n\n@Component({\n  selector: 'app-item-scheme',\n  template: `\n    <ng-container [formGroup]=\"item.form\">\n      <ng-container *ngIf=\"item.parent === 'list'; else other\">\n        <mat-form-field *ngIf=\"controlType === 'textbox'\">\n          <input matInput [formControlName]=\"index\" [value]=\"item.value\" />\n          <button *ngIf=\"!isReadOnly && item.parent === 'list'\" mat-icon-button matSuffix color=\"primary\" (click)=\"emmit()\">\n            <mat-icon>highlight_off</mat-icon>\n          </button>\n        </mat-form-field>\n      </ng-container>\n\n      <ng-template #other>\n        <div class=\"chbox-field\" *ngIf=\"controlType === 'boolean'\">\n          <mat-checkbox [formControlName]=\"item.name\">{{ item.name }}</mat-checkbox>\n          <mat-error *ngIf=\"!isValid\">\n            <mat-error *ngIf=\"hasError('required')\">Field [{{ item.name }}] is required!</mat-error>\n          </mat-error>\n        </div>\n        <mat-form-field *ngIf=\"controlType === 'textbox'\">\n          <mat-label>{{ item.name }}</mat-label>\n          <input matInput [formControlName]=\"item.name\" [readonly]=\"isReadOnly\" />\n          <mat-error *ngIf=\"!isValid\">\n            <mat-error *ngIf=\"hasError('required')\">Field [{{ item.name }}] is required!</mat-error>\n            <mat-error *ngIf=\"hasError('pattern')\">Field [{{ item.name }}] is invalid!</mat-error>\n            <mat-error *ngIf=\"hasError('min')\">Field [{{ item.name }}] value cannot be less than {{ validator.min }}!</mat-error>\n            <mat-error *ngIf=\"hasError('max')\">Field [{{ item.name }}] value cannot be greater than {{ validator.max }}!</mat-error>\n          </mat-error>\n        </mat-form-field>\n      </ng-template>\n    </ng-container>\n  `,\n  styles: [':host {flex: 1}', 'mat-form-field {margin: 6px 0 0; width: 100%}', '.chbox-field {margin:6px 0;}'],\n})\nexport class ItemComponent implements OnInit {\n  @Input() item: IControl;\n  @Input() index: number;\n  @Input() isReadOnly = false;\n  @Output() remove = new EventEmitter<string>();\n\n  controlType: controlType;\n  validator: IValidator;\n\n  ngOnInit() {\n    const rules = this.item.rules as IYField;\n    this.controlType = rules.controlType;\n    this.validator = rules.validator;\n    if (this.controlType === 'boolean' && this.isReadOnly) this.control.disable();\n    this.item.form.markAllAsTouched();\n  }\n\n  emmit() {\n    this.remove.emit(this.item.name);\n  }\n\n  get control() {\n    return this.item.form.controls[this.item.name] as AbstractControl;\n  }\n\n  get isValid() {\n    const f = this.control;\n    return f.valid && (f.dirty || f.touched);\n  }\n\n  hasError(title: string) {\n    return this.control.hasError(title);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {flex: 1}\nmat-form-field {margin: 6px 0 0; width: 100%}\n.chbox-field {margin:6px 0;}\n",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                }
            }
        },
        {
            "name": "JobDetailsComponent",
            "id": "component-JobDetailsComponent-f3b3c247e5cd485ba33a816a9f562855",
            "file": "src/app/components/job/job-details/job-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'job'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "jobEvents$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Job",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Job",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "prepareMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\nimport { Job } from '@app/core/types';\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { JobService } from '@app/services/job.service';\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\n\n@Component({\n  selector: 'app-job-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class JobDetailsComponent extends DetailAbstractDirective<Job> {\n\n  entityParam = 'job';\n\n  leftMenu = [];\n\n  jobEvents$: Subscription;\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: JobService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n  prepareMenuItems() {\n    const itemsOfFiles = this.entity.log_files.map(\n      (file) => DetailsFactory.logMenuItem(`${file.name} [ ${file.type} ]`, file.id.toString(), file.id)\n    );\n\n    this.leftMenu = [\n      DetailsFactory.labelMenuItem('Main', 'main'),\n      ...itemsOfFiles,\n    ];\n  }\n\n  entityReceived(entity: Job) {\n    super.entityReceived(entity);\n\n    this.prepareMenuItems();\n\n    if (this.jobEvents$) {\n      this.jobEvents$.unsubscribe();\n    }\n\n    this.jobEvents$ = this.subjectService.events({\n      events: ['change_job_status', 'add_job_log'],\n    }).pipe(\n      this.takeUntil(),\n      filter(event => event?.object?.id === this.entity.id),\n      switchMap(() => this.subjectService.get(this.entity.id)),\n    ).subscribe((resp) => {\n      this.entity = resp;\n      this.prepareMenuItems();\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "JobService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "JobService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "JobInfoComponent",
            "id": "component-JobInfoComponent-89339c16573c5363a5f735f94b56e019",
            "file": "src/app/entry/job/job-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-info",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        position: fixed;\n        right: 40px;\n        top: 120px;\n      }\n      .time-info,\n      .time-info div {\n        display: flex;\n        align-items: center;\n      }\n      .time-info div mat-icon {\n        margin-right: 6px;\n      }\n      .time-info div span {\n        margin-right: 30px;\n      }\n      .start_flag {\n        transform: rotate(30deg);\n        font-size: 20px;\n        margin-top: 8px;\n      }\n      .finish_flag {\n        transform: rotate(150deg);\n        font-size: 20px;\n      }\n    "
            ],
            "template": "<div class=\"time-info\">\n  <div>\n    <mat-icon color=\"primary\" class=\"start_flag\">outlined_flag</mat-icon>\n    <span>{{ timeInfo?.start }}</span>\n  </div>\n  <div>\n    <mat-icon *ngIf=\"isRun\" class=\"icon-locked running\">autorenew</mat-icon>\n    <mat-icon *ngIf=\"!isRun\" [class]=\"status\">{{ Icon(status) }}</mat-icon>\n    <span>{{ timeInfo?.time }}</span>\n  </div>\n  <div *ngIf=\"timeInfo?.end\">\n    <mat-icon color=\"primary\" class=\"finish_flag\">outlined_flag</mat-icon>\n    <span>{{ timeInfo?.end }}</span>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "JobStatus"
                },
                {
                    "name": "timeInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "ITimeInfo"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Icon",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { JobStatus } from '@app/core/types';\n\nimport { ITimeInfo } from './log/log.component';\n\n@Component({\n  selector: 'app-job-info',\n  styles: [\n    `\n      :host {\n        position: fixed;\n        right: 40px;\n        top: 120px;\n      }\n      .time-info,\n      .time-info div {\n        display: flex;\n        align-items: center;\n      }\n      .time-info div mat-icon {\n        margin-right: 6px;\n      }\n      .time-info div span {\n        margin-right: 30px;\n      }\n      .start_flag {\n        transform: rotate(30deg);\n        font-size: 20px;\n        margin-top: 8px;\n      }\n      .finish_flag {\n        transform: rotate(150deg);\n        font-size: 20px;\n      }\n    `,\n  ],\n  template: `\n    <div class=\"time-info\">\n      <div>\n        <mat-icon color=\"primary\" class=\"start_flag\">outlined_flag</mat-icon>\n        <span>{{ timeInfo?.start }}</span>\n      </div>\n      <div>\n        <mat-icon *ngIf=\"isRun\" class=\"icon-locked running\">autorenew</mat-icon>\n        <mat-icon *ngIf=\"!isRun\" [class]=\"status\">{{ Icon(status) }}</mat-icon>\n        <span>{{ timeInfo?.time }}</span>\n      </div>\n      <div *ngIf=\"timeInfo?.end\">\n        <mat-icon color=\"primary\" class=\"finish_flag\">outlined_flag</mat-icon>\n        <span>{{ timeInfo?.end }}</span>\n      </div>\n    </div>\n  `,\n})\nexport class JobInfoComponent {\n  @Input() timeInfo: ITimeInfo;\n  @Input() status: JobStatus;\n  Icon = (status: string): string => (status === 'aborted' ? 'block' : 'done_all');\n  get isRun(): boolean {\n    return this.status === 'running';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        position: fixed;\n        right: 40px;\n        top: 120px;\n      }\n      .time-info,\n      .time-info div {\n        display: flex;\n        align-items: center;\n      }\n      .time-info div mat-icon {\n        margin-right: 6px;\n      }\n      .time-info div span {\n        margin-right: 30px;\n      }\n      .start_flag {\n        transform: rotate(30deg);\n        font-size: 20px;\n        margin-top: 8px;\n      }\n      .finish_flag {\n        transform: rotate(150deg);\n        font-size: 20px;\n      }\n    \n",
            "accessors": {
                "isRun": {
                    "name": "isRun",
                    "getSignature": {
                        "name": "isRun",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "JobNameComponent",
            "id": "component-JobNameComponent-4808605e6edc228fc92b2e59ecc57bf0",
            "file": "src/app/components/columns/job-name/job-name.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-name",
            "styleUrls": [
                "./job-name.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"job-name-container\">\n  <ng-container *ngIf=\"row.status === 'created' || row.status === 'aborted'; else link\">\n    <span class=\"regular-name\">{{ row.display_name || row.id }}</span>\n  </ng-container>\n  <ng-template #link>\n    <adwp-link-cell\n      [row]=\"row\"\n      [column]=\"linkColumn\"\n    ></adwp-link-cell>\n  </ng-template>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "linkColumn",
                    "defaultValue": "{\n    label: '',\n    type: 'link',\n    value: (row) => row.display_name || row.id,\n    url: (row) => `/job/${row.id}`,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILinkColumn<Job>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Job",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AdwpCellComponent, ILinkColumn } from '@adwp-ui/widgets';\n\nimport { Job } from '@app/core/types';\n\n@Component({\n  selector: 'app-job-name',\n  template: `\n    <div class=\"job-name-container\">\n      <ng-container *ngIf=\"row.status === 'created' || row.status === 'aborted'; else link\">\n        <span class=\"regular-name\">{{ row.display_name || row.id }}</span>\n      </ng-container>\n      <ng-template #link>\n        <adwp-link-cell\n          [row]=\"row\"\n          [column]=\"linkColumn\"\n        ></adwp-link-cell>\n      </ng-template>\n    </div>\n  `,\n  styleUrls: ['./job-name.component.scss']\n})\nexport class JobNameComponent implements AdwpCellComponent<Job> {\n\n  row: Job;\n\n  linkColumn: ILinkColumn<Job> = {\n    label: '',\n    type: 'link',\n    value: (row) => row.display_name || row.id,\n    url: (row) => `/job/${row.id}`,\n  };\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".job-name-container {\n  padding-left: 30px;\n}\n\n.regular-name {\n  padding-left: 4px;\n}\n",
                    "styleUrl": "./job-name.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AdwpCellComponent"
            ]
        },
        {
            "name": "JobsComponent",
            "id": "component-JobsComponent-54149aff5c98cbf92116758df42f27bf",
            "file": "src/app/components/job/jobs/jobs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-jobs",
            "styleUrls": [
                "./jobs.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"expand-jobs\"\n     [@jobsExpand]=\"(expandedTask | async) && (expandedTask | async).id === row.id ? 'expanded' : 'collapsed'\">\n  <adwp-table *ngIf=\"row?.jobs?.length > 1\"\n              [columns]=\"columns\"\n              [dataSource]=\"data\"\n              headerRowClassName=\"hidden\"\n  ></adwp-table>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expandedTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "BehaviorSubject<Task>"
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\n    {\n      type: 'component',\n      label: '',\n      component: JobNameComponent,\n    },\n    {\n      label: '',\n      value: (row) => {\n        return row.status !== 'created' ? DateHelper.short(row.start_date) : '';\n      },\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      label: '',\n      value: (row) => row.status === 'success' || row.status === 'failed' ? DateHelper.short(row.finish_date) : '',\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      label: '',\n      type: 'component',\n      component: JobStatusColumnComponent,\n      className: 'table-end center status',\n      headerClassName: 'table-end center status',\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumns<Job>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "ownData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ownRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { IColumns, AdwpComponentHolder } from '@adwp-ui/widgets';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Job, Task } from '@app/core/types';\nimport { DateHelper } from '@app/helpers/date-helper';\nimport { JobStatusColumnComponent } from '@app/components/columns/job-status-column/job-status-column.component';\nimport { JobNameComponent } from '@app/components/columns/job-name/job-name.component';\n\n@Component({\n  selector: 'app-jobs',\n  animations: [\n    trigger('jobsExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n  template: `\n    <div class=\"expand-jobs\"\n         [@jobsExpand]=\"(expandedTask | async) && (expandedTask | async).id === row.id ? 'expanded' : 'collapsed'\">\n      <adwp-table *ngIf=\"row?.jobs?.length > 1\"\n                  [columns]=\"columns\"\n                  [dataSource]=\"data\"\n                  headerRowClassName=\"hidden\"\n      ></adwp-table>\n    </div>\n  `,\n  styleUrls: ['./jobs.component.scss'],\n})\nexport class JobsComponent<T extends Task> implements AdwpComponentHolder<Task> {\n\n  columns: IColumns<Job> = [\n    {\n      type: 'component',\n      label: '',\n      component: JobNameComponent,\n    },\n    {\n      label: '',\n      value: (row) => {\n        return row.status !== 'created' ? DateHelper.short(row.start_date) : '';\n      },\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      label: '',\n      value: (row) => row.status === 'success' || row.status === 'failed' ? DateHelper.short(row.finish_date) : '',\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      label: '',\n      type: 'component',\n      component: JobStatusColumnComponent,\n      className: 'table-end center status',\n      headerClassName: 'table-end center status',\n    }\n  ];\n\n  private ownData: { results: Job[], count: number };\n  get data(): { results: Job[], count: number } {\n    return this.ownData;\n  }\n\n  private ownRow: Task;\n  @Input() set row(row: Task) {\n    this.ownRow = row;\n    this.ownData = { results: this.ownRow?.jobs, count: 0 };\n  }\n  get row(): Task {\n    return this.ownRow;\n  }\n\n  @Input() expandedTask: BehaviorSubject<Task>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}\n\nadwp-table {\n  width: 100%;\n}\n\n:host adwp-table ::ng-deep mat-table {\n  width: 100%;\n}\n\n:host ::ng-deep .action_date {\n  width: 200px;\n  flex-basis: 200px;\n  flex-grow: 0;\n}\n\n:host ::ng-deep .padding20 {\n  padding-right: 20px;\n}\n\n:host ::ng-deep .table-end {\n  width: 50px;\n  flex-basis: 50px;\n  flex-grow: 0;\n}\n\n:host ::ng-deep .center {\n  text-align: center;\n}\n\n:host ::ng-deep .status {\n  display: flex;\n  justify-content: center;\n}\n",
                    "styleUrl": "./jobs.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AdwpComponentHolder"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 64
                    }
                },
                "row": {
                    "name": "row",
                    "setSignature": {
                        "name": "row",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "row",
                                "type": "Task",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "row",
                                "type": "Task",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "row",
                        "type": "",
                        "returnType": "Task",
                        "line": 73
                    }
                }
            }
        },
        {
            "name": "JobStatusColumnComponent",
            "id": "component-JobStatusColumnComponent-fddfe743cb540f24a306be8ab34d5601",
            "file": "src/app/components/columns/job-status-column/job-status-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-status-column",
            "styleUrls": [
                "./job-status-column.component.scss"
            ],
            "styles": [],
            "template": "<mat-icon [ngClass]=\"{ 'icon-locked': row.status === 'running' }\" [class]=\"row.status\" [matTooltip]=\"row.status\">\n  {{ iconDisplay[row.status] }}\n</mat-icon>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconDisplay",
                    "defaultValue": "{\n    created: 'watch_later',\n    running: 'autorenew',\n    success: 'done',\n    failed: 'error',\n    aborted: 'block'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Job",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AdwpCellComponent } from '@adwp-ui/widgets';\n\nimport { Job } from '@app/core/types';\n\n@Component({\n  selector: 'app-job-status-column',\n  template: `\n    <mat-icon [ngClass]=\"{ 'icon-locked': row.status === 'running' }\" [class]=\"row.status\" [matTooltip]=\"row.status\">\n      {{ iconDisplay[row.status] }}\n    </mat-icon>\n  `,\n  styleUrls: ['./job-status-column.component.scss']\n})\nexport class JobStatusColumnComponent implements AdwpCellComponent<Job> {\n\n  row: Job;\n\n  iconDisplay = {\n    created: 'watch_later',\n    running: 'autorenew',\n    success: 'done',\n    failed: 'error',\n    aborted: 'block'\n  };\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-icon {\n  vertical-align: middle;\n  font-size: 1.2em;\n  width: auto;\n  height: auto;\n}\n",
                    "styleUrl": "./job-status-column.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AdwpCellComponent"
            ]
        },
        {
            "name": "JsonComponent",
            "id": "component-JsonComponent-74191a63eceff3d8757e84bfd7f1b645",
            "file": "src/app/shared/form-elements/json.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-json",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [formGroup]=\"form\">\n  <mat-form-field>\n    <textarea matInput [appMTextarea]=\"field.key\" [formControlName]=\"field.name\"\n              [readonly]=\"field.read_only\"></textarea>\n    <mat-error *ngIf=\"!isValid\">\n      <app-error-info [field]=\"field\" [control]=\"control\"></app-error-info>\n    </mat-error>\n  </mat-form-field>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { FieldDirective } from './field.directive';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-fields-json',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <mat-form-field>\n        <textarea matInput [appMTextarea]=\"field.key\" [formControlName]=\"field.name\"\n                  [readonly]=\"field.read_only\"></textarea>\n        <mat-error *ngIf=\"!isValid\">\n          <app-error-info [field]=\"field\" [control]=\"control\"></app-error-info>\n        </mat-error>\n      </mat-form-field>\n    </ng-container>\n  `,\n})\nexport class JsonComponent extends FieldDirective implements OnInit {\n  ngOnInit() {\n    super.ngOnInit();\n    const control = this.form.controls[this.field.name];\n    control.valueChanges.pipe(debounceTime(500)).subscribe((value) => {\n      try {\n        const v = JSON.parse(value);\n        control.setValue(JSON.stringify(v, undefined, 4), { emitEvent: false });\n      } catch (e) {\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "FieldDirective",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "LabelMenuItemComponent",
            "id": "component-LabelMenuItemComponent-db32f0a380a3d26e8ff233e8a85f76d9",
            "file": "src/app/shared/details/left-menu-items/label-menu-item/label-menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-label-menu-item",
            "styleUrls": [],
            "styles": [
                "a span { white-space: nowrap; }"
            ],
            "template": "<a mat-list-item\n   routerLinkActive=\"active\"\n   [appForTest]=\"'tab_' + link\"\n   [routerLink]=\"link\"\n>\n  <span>{{ label }}</span>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EntityType",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { MenuItemAbstractDirective } from '@app/abstract-directives/menu-item.abstract.directive';\n\n@Component({\n  selector: 'app-label-menu-item',\n  template: `\n    <a mat-list-item\n       routerLinkActive=\"active\"\n       [appForTest]=\"'tab_' + link\"\n       [routerLink]=\"link\"\n    >\n      <span>{{ label }}</span>\n    </a>\n  `,\n  styles: ['a span { white-space: nowrap; }'],\n})\nexport class LabelMenuItemComponent extends MenuItemAbstractDirective {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "a span { white-space: nowrap; }\n",
            "extends": "MenuItemAbstractDirective"
        },
        {
            "name": "LeftMenuComponent",
            "id": "component-LeftMenuComponent-3efccba74ac1719d45f4a3d82ada60e7",
            "file": "src/app/shared/details/left-menu/left-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-left-menu",
            "styleUrls": [
                "./left-menu.component.scss"
            ],
            "styles": [],
            "template": "<mat-nav-list>\n  <ng-container #menu></ng-container>\n</mat-nav-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": ""
                },
                {
                    "name": "leftMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdcmEntity",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_leftMenu",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeftMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "componentsRef",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentRef<any>>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "menuRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu', {read: ViewContainerRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "rebuildComponents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, ComponentRef, Input, Type, ViewChild, ViewContainerRef } from '@angular/core';\n\nimport { AdcmEntity } from '@app/models/entity';\nimport { MenuItemAbstractDirective } from '@app/abstract-directives/menu-item.abstract.directive';\n\nexport interface LeftMenuItem {\n  link: string;\n  label: string;\n  data?: any;\n  component: Type<MenuItemAbstractDirective>;\n}\n\n@Component({\n  selector: 'app-left-menu',\n  template: `\n    <mat-nav-list>\n      <ng-container #menu></ng-container>\n    </mat-nav-list>\n  `,\n  styleUrls: ['./left-menu.component.scss']\n})\nexport class LeftMenuComponent {\n\n  @ViewChild('menu', { read: ViewContainerRef }) menuRef: ViewContainerRef;\n\n  private _leftMenu: LeftMenuItem[] = [];\n  @Input() set leftMenu(leftMenu: LeftMenuItem[]) {\n    this._leftMenu = leftMenu;\n    this.rebuildComponents();\n  }\n  get leftMenu(): LeftMenuItem[] {\n    return this._leftMenu;\n  }\n\n  @Input() set entity(entity: AdcmEntity) {\n    this._entity = entity;\n    this.componentsRef.forEach((componentRef) => componentRef.instance.entity = entity);\n  }\n  get entity(): AdcmEntity {\n    return this._entity;\n  }\n\n  private componentsRef: Array<ComponentRef<any>> = [];\n  private _entity: AdcmEntity;\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n  ) {}\n\n  rebuildComponents() {\n    setTimeout(() => {\n      this.componentsRef = [];\n      this.menuRef.clear();\n      this.leftMenu.forEach((item) => {\n        const componentFactory =\n          this.componentFactoryResolver.resolveComponentFactory(item.component);\n        const componentRef = this.menuRef.createComponent(componentFactory);\n        componentRef.instance.label = item.label;\n        componentRef.instance.link = item.link;\n        if (item.data) {\n          componentRef.instance.data = item.data;\n        }\n        if (this.entity !== undefined) {\n          componentRef.instance.entity = this.entity;\n        }\n        this.componentsRef.push(componentRef);\n      });\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-nav-list {\n  padding-top: 20px;\n}\n",
                    "styleUrl": "./left-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "leftMenu": {
                    "name": "leftMenu",
                    "setSignature": {
                        "name": "leftMenu",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "leftMenu",
                                "type": "LeftMenuItem[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "leftMenu",
                                "type": "LeftMenuItem[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "leftMenu",
                        "type": "[]",
                        "returnType": "LeftMenuItem[]",
                        "line": 31
                    }
                },
                "entity": {
                    "name": "entity",
                    "setSignature": {
                        "name": "entity",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "entity",
                                "type": "AdcmEntity",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "entity",
                                "type": "AdcmEntity",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "entity",
                        "type": "",
                        "returnType": "AdcmEntity",
                        "line": 39
                    }
                }
            }
        },
        {
            "name": "LicenseComponent",
            "id": "component-LicenseComponent-24b4f3c3c6725b2d90f3cdeb18df9a90",
            "file": "src/app/entry/bundle/bundle-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-license",
            "styleUrls": [],
            "styles": [
                ":host {\n    width: 100%;\n    max-width: 960px\n  }\n\n  pre {\n    white-space: pre-wrap;\n  }"
            ],
            "template": "<pre>{{ text | async }}</pre>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 142
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentRef, OnInit, ViewChild } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { IColumns } from '@adwp-ui/widgets';\nimport { Observable } from 'rxjs';\n\nimport { StackService } from '../../core/services';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { AdwpListDirective } from '@app/abstract-directives/adwp-list.directive';\nimport { ListService } from '@app/shared/components/list/list.service';\nimport { SocketState } from '@app/core/store';\nimport { TypeName } from '@app/core/types';\nimport { IBundle } from '@app/models/bundle';\nimport { ListFactory } from '../../factories/list.factory';\nimport { EditionColumnComponent } from '@app/components/columns/edition-column/edition-column.component';\n\n@Component({\n  selector: 'app-bundle-list',\n  template: `\n    <mat-toolbar class=\"toolbar\">\n      <app-crumbs [navigation]=\"[{ url: '/bundle', title: 'bundles' }]\"></app-crumbs>\n      <app-button-uploader #uploadBtn [color]=\"'accent'\" [label]=\"'Upload bundles'\"\n                           (output)=\"upload($event)\"></app-button-uploader>\n    </mat-toolbar>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }'],\n})\nexport class BundleListComponent extends AdwpListDirective<IBundle> {\n\n  type: TypeName = 'bundle';\n\n  listColumns = [\n    ListFactory.nameColumn(),\n    {\n      label: 'Version',\n      sort: 'version',\n      value: row => row.version,\n    },\n    {\n      label: 'Edition',\n      type: 'component',\n      component: EditionColumnComponent,\n      instanceTaken: (componentRef: ComponentRef<EditionColumnComponent>) => {\n        componentRef.instance.onClick = this.license.bind(this);\n      }\n    },\n    ListFactory.descriptionColumn(),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IBundle>;\n\n  @ViewChild('uploadBtn', { static: true }) uploadBtn: any;\n\n  constructor(\n    private stack: StackService,\n    protected service: ListService,\n    protected store: Store<SocketState>,\n    public route: ActivatedRoute,\n    public router: Router,\n    public dialog: MatDialog,\n  ) {\n    super(service, store, route, router, dialog);\n  }\n\n  upload(data: FormData[]) {\n    this.stack.upload(data).subscribe();\n  }\n\n  license(data: { event: MouseEvent, action: string, row: any }) {\n    this.clickCell(data.event, data.action, data.row);\n  }\n\n}\n\n@Component({\n  selector: 'app-main',\n  template: `\n    <adwp-table\n      [columns]=\"listColumns\"\n      [dataSource]=\"model | pickKeys:keys | translateKeys | toDataSource\"\n    ></adwp-table>\n  `,\n  styles: [':host {width: 100%; max-width: 960px}']\n})\nexport class MainComponent implements OnInit {\n  model: any;\n\n  keys = ['display_name', 'version', 'license', 'license_path'];\n\n  listColumns = [\n    ListFactory.keyColumn(),\n    ListFactory.valueColumn(),\n  ] as IColumns<any>;\n\n  constructor(private service: ClusterService) {}\n\n  ngOnInit() {\n    this.model = this.service.Current;\n  }\n\n}\n\n@Component({\n  selector: 'app-license',\n  template: `\n    <pre>{{ text | async }}</pre>\n  `,\n  styles: [`:host {\n    width: 100%;\n    max-width: 960px\n  }\n\n  pre {\n    white-space: pre-wrap;\n  }`]\n})\nexport class LicenseComponent implements OnInit {\n  text: Observable<string>;\n\n  constructor(private service: ClusterService) {}\n\n  ngOnInit(): void {\n    this.text = this.service.getBundleLicenseText();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {\n    width: 100%;\n    max-width: 960px\n  }\n\n  pre {\n    white-space: pre-wrap;\n  }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 142,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "LogComponent",
            "id": "component-LogComponent-59263ce90a12572430d765b098f37e68",
            "file": "src/app/ws-logs/log.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log",
            "styleUrls": [
                "./log.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./log.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "eventName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "events",
                    "defaultValue": "[\n    'all',\n    'change_state',\n    'add',\n    'create',\n    'delete',\n    'remove',\n    'change_config',\n    'change_status',\n    'change_job_status',\n    'change_hostcomponentmap',\n    'upgrade',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    typesName: new FormControl('cluster'),\n    eventsName: new FormControl('change_state'),\n    timeOut: new FormControl(false),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "logs$",
                    "defaultValue": "new BehaviorSubject<{ event: EventMessage; response: any }[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "slider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSlider",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slider'"
                        }
                    ]
                },
                {
                    "name": "typeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "types",
                    "defaultValue": "['all', 'job', 'task', 'cluster', 'host', 'service']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "list",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reflect",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatSlider } from '@angular/material/slider';\nimport { ApiService } from '@app/core/api';\nimport { EventMessage, getMessage, State } from '@app/core/store';\nimport { select, Store } from '@ngrx/store';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-log',\n  templateUrl: './log.component.html',\n  styleUrls: ['./log.component.scss'],\n})\nexport class LogComponent implements OnInit {\n  destroy$ = new Subject();\n\n  typeName: string;\n  eventName: string;\n\n  form = new FormGroup({\n    typesName: new FormControl('cluster'),\n    eventsName: new FormControl('change_state'),\n    timeOut: new FormControl(false),\n  });\n\n  logs$ = new BehaviorSubject<{ event: EventMessage; response: any }[]>([]);\n\n  events = [\n    'all',\n    'change_state',\n    'add',\n    'create',\n    'delete',\n    'remove',\n    'change_config',\n    'change_status',\n    'change_job_status',\n    'change_hostcomponentmap',\n    'upgrade',\n  ];\n\n  types = ['all', 'job', 'task', 'cluster', 'host', 'service'];\n\n  @ViewChild('slider') slider: MatSlider;\n\n  constructor(private store: Store<State>, private api: ApiService) {\n    // this.store.dispatch(socketInit());\n  }\n\n  ngOnInit() {\n    this.store\n      .pipe(\n        select(getMessage),\n        filter((m: EventMessage) => !!m && !!m.event),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(m => this.reflect(m));\n  }\n\n  reflect(m: EventMessage) {\n    const typeName = this.form.get('typesName').value,\n      eventName = this.form.get('eventsName').value;\n    if ((m.object.type === typeName || typeName === 'all') && (m.event === eventName || eventName === 'all')) {\n      if (this.form.get('timeOut').value)\n        setTimeout(\n          () => this.api.getOne<any>(m.object.type, m.object.id).subscribe(value => this.list(m, value)),\n          this.slider.value\n        );\n      else this.api.getOne<any>(m.object.type, m.object.id).subscribe(value => this.list(m, value));\n    }\n    // else this.list(m, `Not request for ${eventName} event.`);\n  }\n\n  list(m: EventMessage, value: any) {\n    const { type, id } = m.object;\n    const list = [\n      ...this.logs$.getValue(),\n      {\n        event: m,\n        response: { title: `Request for [ /api/v1/${type}/${id}/ ]`, value },\n      },\n    ];\n    this.logs$.next(list.reverse());\n  }\n\n  refresh() {\n    this.logs$.next([]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tools, .logs {\n    display: flex;\n    margin: 10px 0;\n}\n\n.tools {\n    justify-content: space-evenly;\n}\n\n.logs div:last-child {\n    margin-left: 40px;\n}\n\nmat-select {\n    width: 250px;\n}\n\npre { font-size: 12px;}\n\nlabel {font-size: 12px;}\nmat-select {margin-left: 20px; border: solid 1px #ccc; padding: 4px 8px;}\n",
                    "styleUrl": "./log.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"tools\" [formGroup]=\"form\">\n    <div>\n      <label>Update object of type: </label>\n      <mat-select placeholder=\"Select object type\" formControlName=\"typesName\">\n        <mat-option *ngFor=\"let item of types\" [value]=\"item\">\n          {{ item }}\n        </mat-option>\n      </mat-select>\n    </div>\n    <div>\n      <label>Update object on the event: </label>\n      <mat-select placeholder=\"Select event\" formControlName=\"eventsName\">\n        <mat-option *ngFor=\"let item of events\" [value]=\"item\">\n          {{ item }}\n        </mat-option>\n      </mat-select>\n    </div>\n    <mat-checkbox formControlName=\"timeOut\">Timeout</mat-checkbox>\n    <ng-container *ngIf=\"form.get('timeOut').value\">\n      <mat-slider thumbLabel tickInterval=\"100\" min=\"1\" max=\"1000\" #slider></mat-slider>\n    </ng-container>\n    <button mat-icon-button (click)=\"refresh()\">\n      <mat-icon>refresh</mat-icon>\n    </button>\n  </div>\n\n  <div class=\"logs\" *ngFor=\"let log of logs$ | async\">\n    <div>\n      <pre>{{ log.event | json }}</pre>\n    </div>\n    <div>\n      <p>{{ log.response.title }}</p>\n      <pre>{{ log.response.value | json }}</pre>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LogComponent",
            "id": "component-LogComponent-a4ca3857c8a3fa9637042e138d2d1c95-1",
            "file": "src/app/entry/job/log/log.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-log",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: flex;\n        flex: 1;\n        padding: 10px 20px;\n      }\n\n      div.wrap {\n        display: flex;\n        flex: 1;\n      }\n\n      .accordion {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n      }\n    "
            ],
            "template": "<ng-container *ngIf=\"job\">\n  <app-job-info [timeInfo]=\"timeInfo\" [status]=\"job.status\"></app-job-info>\n  <div class=\"wrap\" *ngIf=\"currentLog$ | async as log\">\n    <app-log-text *ngIf=\"log.type !== 'check'\" [content]=\"log.content\" [status]=\"job.status\" (refresh)=\"refresh()\"></app-log-text>\n    <mat-accordion *ngIf=\"log.type === 'check'\" class=\"accordion\">\n      <app-log-check [content]=\"log.content\"></app-log-check>\n    </mat-accordion>\n  </div>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLog$",
                    "defaultValue": "new Subject<LogFile>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Job",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "logUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "textComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextComponent",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TextComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "timeInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITimeInfo",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startListenSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { Job, JobStatus, LogFile } from '@app/core/types';\nimport { TextComponent } from './text.component';\nimport { JobService } from '@app/services/job.service';\nimport { EventMessage } from '@app/core/store';\n\nexport interface ITimeInfo {\n  start: string;\n  end: string;\n  time: string;\n}\n\n@Component({\n  selector: 'app-job-log',\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex: 1;\n        padding: 10px 20px;\n      }\n\n      div.wrap {\n        display: flex;\n        flex: 1;\n      }\n\n      .accordion {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n      }\n    `,\n  ],\n  template: `\n    <ng-container *ngIf=\"job\">\n      <app-job-info [timeInfo]=\"timeInfo\" [status]=\"job.status\"></app-job-info>\n      <div class=\"wrap\" *ngIf=\"currentLog$ | async as log\">\n        <app-log-text *ngIf=\"log.type !== 'check'\" [content]=\"log.content\" [status]=\"job.status\" (refresh)=\"refresh()\"></app-log-text>\n        <mat-accordion *ngIf=\"log.type === 'check'\" class=\"accordion\">\n          <app-log-check [content]=\"log.content\"></app-log-check>\n        </mat-accordion>\n      </div>\n    </ng-container>\n  `,\n})\nexport class LogComponent extends BaseDirective implements OnInit {\n  currentLog$ = new Subject<LogFile>();\n  timeInfo: ITimeInfo;\n  logUrl: string;\n\n  job: Job;\n\n  @ViewChild(TextComponent, { static: true }) textComp: TextComponent;\n\n  constructor(\n    private service: ClusterService,\n    private route: ActivatedRoute,\n    private jobService: JobService,\n  ) {\n    super();\n  }\n\n  socketListener(event: EventMessage) {\n    if (event.event === 'change_job_status') {\n      this.job.status = event.object.details.value as JobStatus;\n      this.job.finish_date = new Date().toISOString();\n      this.timeInfo = this.service.getOperationTimeData(this.job);\n      if (this.textComp) this.textComp.update(this.job.status);\n    }\n    this.refresh();\n  }\n\n  startListenSocket() {\n    this.jobService.events().pipe(\n      this.takeUntil(),\n      filter(event => event?.object?.id === this.job.id),\n    ).subscribe((event) => this.socketListener(event));\n  }\n\n  ngOnInit() {\n    this.route.paramMap.pipe(\n      this.takeUntil(),\n      switchMap(() => this.jobService.get(+this.route.parent.snapshot.paramMap.get('job'))),\n    ).subscribe((job) => {\n      this.job = job;\n      this.timeInfo = this.service.getOperationTimeData(this.job);\n      this.logUrl = this.job.log_files.find((a) => a.id === +this.route.snapshot.paramMap.get('log')).url;\n      this.refresh();\n    });\n    this.startListenSocket();\n  }\n\n  refresh() {\n    if (!this.logUrl) return;\n    this.service.getLog(this.logUrl).subscribe((a) => this.currentLog$.next(a));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: flex;\n        flex: 1;\n        padding: 10px 20px;\n      }\n\n      div.wrap {\n        display: flex;\n        flex: 1;\n      }\n\n      .accordion {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jobService",
                        "type": "JobService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jobService",
                        "type": "JobService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LogComponent-1"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-494e72c068c27513ced813277dd53172",
            "file": "src/app/main/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authForm",
                    "defaultValue": "new FormGroup({ login: new FormControl('', Validators.required), password: new FormControl('', Validators.required) })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "checkGL$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "google",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\nimport { AuthService } from '@app/core/auth/auth.service';\nimport { authLogin, authLogout, AuthState, getAuthState } from '@app/core/auth/auth.store';\nimport { clearProfile } from '@app/core/store';\nimport { BaseDirective } from '@app/shared/directives';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent extends BaseDirective implements OnInit, OnDestroy {\n  authForm = new FormGroup({ login: new FormControl('', Validators.required), password: new FormControl('', Validators.required) });\n  message: string;\n  checkGL$: Observable<any>;\n\n  constructor(private auth: AuthService, private router: Router, private store: Store<AuthState>, private route: ActivatedRoute) {\n    super();\n  }\n\n  ngOnInit() {\n    this.checkGL$ = this.auth.checkGoogle();\n    this.store.dispatch(authLogout());\n\n    const a$ = this.store\n      .select(getAuthState)\n      .pipe(this.takeUntil())\n      .subscribe(state => {\n        if (state.isValid) {\n          a$.unsubscribe();\n          const redirectUrl = this.auth.redirectUrl;\n          this.router.navigateByUrl(redirectUrl && redirectUrl !== 'login' && redirectUrl !== '/504' ? redirectUrl : '/admin');\n        } else {\n          this.store.dispatch(clearProfile());\n          this.message = state.message;\n        }\n      });\n\n    this.route.queryParams\n      .pipe(\n        filter(p => p['error_code'] === 'AUTH_ERROR'),\n        this.takeUntil()\n      )\n      .subscribe(p => (this.message = p['error_msg']));\n  }\n\n  login() {\n    this.message = '';\n    if (this.authForm.valid) {\n      const { login, password } = this.authForm.value;\n      this.store.dispatch(authLogin({ login, password }));\n    }\n  }\n\n  google() {\n    window.location.href = '/social/login/google-oauth2/';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n}\n\n.container {\n  max-width: 900px;\n  background: #424242;\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  border-radius: 4px;\n  padding-top: 32px;\n}\n\n.double-auth {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  & div {\n    flex-basis: 50%;\n    text-align: center;\n  }\n\n  & .or {\n    flex: 0;\n    border: solid 1px #666;\n    border-radius: 42px;\n    padding: 8px;\n    line-height: 24px;\n  }\n}\n\n.google-auth {\n  line-height: 46px;\n  padding: 0;\n\n  & svg {\n    width: 46px;\n    height: 46px;\n  }\n\n  & span {\n    padding: 0 16px;\n  }\n}\n\n.form-auth {\n  width: 300px;\n  margin: 0 auto;\n\n  & p {\n    text-align: right;\n  }\n\n  & mat-form-field {\n    width: 100%;\n  }\n}\n\n.warn {\n  width: 300px;\n  margin: 0 auto;\n  padding: 16px;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div [style.height.px]=\"100\"></div>\n<div class=\"container\" [formGroup]=\"authForm\">\n  <div *ngIf=\"checkGL$ | async; else form\" class=\"double-auth\">\n    <div class=\"social\">\n      <button mat-raised-button class=\"google-auth\" color=\"primary\" (click)=\"google()\">\n        <svg>\n          <use xlink:href=\"assets/google_icons.svg#btn_google_dark_normal_ios\"></use>\n        </svg>\n        <span>Sign in with Google</span>\n      </button>\n    </div>\n    <div class=\"or\">OR</div>\n    <div style=\"padding-left: 50px;\">\n      <ng-container *ngTemplateOutlet=\"form\"></ng-container>\n    </div>\n  </div>\n  <ng-template #form>\n    <div class=\"form-auth\">\n      <mat-form-field>\n        <input matInput autofocus placeholder=\"Login\" formControlName=\"login\" required id=\"login\" />\n      </mat-form-field>\n      <mat-form-field>\n        <input matInput placeholder=\"Password\" type=\"password\" formControlName=\"password\" (keyup.enter)=\"login()\"\n          id=\"password\" required />\n      </mat-form-field>\n      <p>\n        <button mat-raised-button [disabled]=\"!authForm.valid\" color=\"primary\" (click)=\"login()\"\n          (keyup.enter)=\"login()\">Login</button>\n      </p>\n    </div>\n  </ng-template>\n  <p class=\"warn\">{{ message }}</p>\n</div>\n"
        },
        {
            "name": "LogMenuItemComponent",
            "id": "component-LogMenuItemComponent-a6a7589d917cd59335e29d8ea66561c1",
            "file": "src/app/shared/details/left-menu-items/log-menu-item/log-menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-menu-item",
            "styleUrls": [],
            "styles": [
                "a span { white-space: nowrap; }"
            ],
            "template": "<a mat-list-item\n   [appForTest]=\"'tab_' + link\"\n   [routerLink]=\"link\"\n   routerLinkActive=\"active\"\n>\n  <span>{{ label }}</span>&nbsp;\n\n  <button mat-icon-button\n          color=\"primary\"\n          (click)=\"download()\"\n  >\n    <mat-icon>cloud_download</mat-icon>\n  </button>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EntityType",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "download",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { MenuItemAbstractDirective } from '@app/abstract-directives/menu-item.abstract.directive';\nimport { BaseEntity, Job } from '@app/core/types';\n\n@Component({\n  selector: 'app-log-menu-item',\n  template: `\n    <a mat-list-item\n       [appForTest]=\"'tab_' + link\"\n       [routerLink]=\"link\"\n       routerLinkActive=\"active\"\n    >\n      <span>{{ label }}</span>&nbsp;\n\n      <button mat-icon-button\n              color=\"primary\"\n              (click)=\"download()\"\n      >\n        <mat-icon>cloud_download</mat-icon>\n      </button>\n    </a>\n  `,\n  styles: ['a span { white-space: nowrap; }'],\n})\nexport class LogMenuItemComponent extends MenuItemAbstractDirective<BaseEntity> {\n\n  download() {\n    if (this.data?.logId) {\n      const file = (this.entity as Job).log_files.find(job => job.id === this.data.logId);\n      if (file) {\n        location.href = file.download_url;\n      } else {\n        throw new Error('Log file not found!');\n      }\n    } else {\n      throw new Error('Log id isn\\'t provided!');\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "a span { white-space: nowrap; }\n",
            "extends": "MenuItemAbstractDirective"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-24b4f3c3c6725b2d90f3cdeb18df9a90",
            "file": "src/app/entry/bundle/bundle-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [],
            "styles": [
                ":host {width: 100%; max-width: 960px}"
            ],
            "template": "<adwp-table\n  [columns]=\"listColumns\"\n  [dataSource]=\"model | pickKeys:keys | translateKeys | toDataSource\"\n></adwp-table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "keys",
                    "defaultValue": "['display_name', 'version', 'license', 'license_path']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.keyColumn(),\n    ListFactory.valueColumn(),\n  ] as IColumns<any>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 110
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentRef, OnInit, ViewChild } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { IColumns } from '@adwp-ui/widgets';\nimport { Observable } from 'rxjs';\n\nimport { StackService } from '../../core/services';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { AdwpListDirective } from '@app/abstract-directives/adwp-list.directive';\nimport { ListService } from '@app/shared/components/list/list.service';\nimport { SocketState } from '@app/core/store';\nimport { TypeName } from '@app/core/types';\nimport { IBundle } from '@app/models/bundle';\nimport { ListFactory } from '../../factories/list.factory';\nimport { EditionColumnComponent } from '@app/components/columns/edition-column/edition-column.component';\n\n@Component({\n  selector: 'app-bundle-list',\n  template: `\n    <mat-toolbar class=\"toolbar\">\n      <app-crumbs [navigation]=\"[{ url: '/bundle', title: 'bundles' }]\"></app-crumbs>\n      <app-button-uploader #uploadBtn [color]=\"'accent'\" [label]=\"'Upload bundles'\"\n                           (output)=\"upload($event)\"></app-button-uploader>\n    </mat-toolbar>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }'],\n})\nexport class BundleListComponent extends AdwpListDirective<IBundle> {\n\n  type: TypeName = 'bundle';\n\n  listColumns = [\n    ListFactory.nameColumn(),\n    {\n      label: 'Version',\n      sort: 'version',\n      value: row => row.version,\n    },\n    {\n      label: 'Edition',\n      type: 'component',\n      component: EditionColumnComponent,\n      instanceTaken: (componentRef: ComponentRef<EditionColumnComponent>) => {\n        componentRef.instance.onClick = this.license.bind(this);\n      }\n    },\n    ListFactory.descriptionColumn(),\n    ListFactory.deleteColumn(this),\n  ] as IColumns<IBundle>;\n\n  @ViewChild('uploadBtn', { static: true }) uploadBtn: any;\n\n  constructor(\n    private stack: StackService,\n    protected service: ListService,\n    protected store: Store<SocketState>,\n    public route: ActivatedRoute,\n    public router: Router,\n    public dialog: MatDialog,\n  ) {\n    super(service, store, route, router, dialog);\n  }\n\n  upload(data: FormData[]) {\n    this.stack.upload(data).subscribe();\n  }\n\n  license(data: { event: MouseEvent, action: string, row: any }) {\n    this.clickCell(data.event, data.action, data.row);\n  }\n\n}\n\n@Component({\n  selector: 'app-main',\n  template: `\n    <adwp-table\n      [columns]=\"listColumns\"\n      [dataSource]=\"model | pickKeys:keys | translateKeys | toDataSource\"\n    ></adwp-table>\n  `,\n  styles: [':host {width: 100%; max-width: 960px}']\n})\nexport class MainComponent implements OnInit {\n  model: any;\n\n  keys = ['display_name', 'version', 'license', 'license_path'];\n\n  listColumns = [\n    ListFactory.keyColumn(),\n    ListFactory.valueColumn(),\n  ] as IColumns<any>;\n\n  constructor(private service: ClusterService) {}\n\n  ngOnInit() {\n    this.model = this.service.Current;\n  }\n\n}\n\n@Component({\n  selector: 'app-license',\n  template: `\n    <pre>{{ text | async }}</pre>\n  `,\n  styles: [`:host {\n    width: 100%;\n    max-width: 960px\n  }\n\n  pre {\n    white-space: pre-wrap;\n  }`]\n})\nexport class LicenseComponent implements OnInit {\n  text: Observable<string>;\n\n  constructor(private service: ClusterService) {}\n\n  ngOnInit(): void {\n    this.text = this.service.getBundleLicenseText();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {width: 100%; max-width: 960px}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 117,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-f78a5354d94de64edaa70ed6d18cfe3c-1",
            "file": "src/app/entry/job/job.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [],
            "styles": [],
            "template": "<app-job-info></app-job-info>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { ClusterService } from '@app/core/services/cluster.service';\n\n@Component({\n  selector: 'app-main',\n  template: '<app-job-info></app-job-info>',\n})\nexport class MainComponent extends BaseDirective implements OnInit {\n\n  constructor(\n    private clusterService: ClusterService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.route.parent.params.pipe(this.takeUntil()).subscribe(params => {\n      this.clusterService.one_job(params?.job).subscribe(job => {\n        const logs = job.log_files;\n        const log = logs.find((a) => a.type === 'check') || logs[0];\n        if (log) this.router.navigate([`../${log.id}`], { relativeTo: this.route, replaceUrl: true });\n      });\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clusterService",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "clusterService",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MainComponent-1"
        },
        {
            "name": "MainInfoComponent",
            "id": "component-MainInfoComponent-dd38044d2b486a9baec1c48f63ade898",
            "file": "src/app/shared/components/main-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-info",
            "styleUrls": [],
            "styles": [
                ":host {padding: 0 20px;}"
            ],
            "template": "<div [innerHTML]=\"value\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { ClusterService } from '@app/core/services/cluster.service';\n\n@Component({\n  selector: 'app-main-info',\n  template: '<div [innerHTML]=\"value\"></div>',\n  styles: [':host {padding: 0 20px;}'],\n})\nexport class MainInfoComponent implements OnInit {\n  value: SafeHtml;\n  constructor(private service: ClusterService, private sanitizer: DomSanitizer) {}\n  ngOnInit() {\n    this.service.getMainInfo().subscribe((value) => (this.value = this.sanitizer.bypassSecurityTrustHtml(value)));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {padding: 0 20px;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-00e39716c030f0770583e0412a34a272",
            "file": "src/app/shared/components/actions/action-list/menu-item/menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu-item",
            "styleUrls": [
                "./menu-item.component.scss"
            ],
            "styles": [],
            "template": "<mat-menu #menu=\"matMenu\" xPosition=\"before\" yPosition=\"below\" overlapTrigger=\"false\">   <div mat-menu-item disabled *ngIf=\"!items?.length; else list\">\n     <i>No actions</i>\n   </div>\n   <ng-template #list>\n     <ng-container *ngFor=\"let a of items\">\n       <button *ngIf=\"!a.children; else branch\" [appForTest]=\"'action_btn'\" mat-menu-item [appActions]=\"{ cluster: cluster, actions: [a] }\">\n         <span>{{ a.display_name }}</span>\n       </button>\n       <ng-template #branch>\n         <button mat-menu-item [matMenuTriggerFor]=\"inner.menu\">\n           <span>{{ a.display_name }}</span>\n         </button>\n         <app-menu-item #inner [items]=\"a.children\" [cluster]=\"cluster\"></app-menu-item>\n       </ng-template>\n       </ng-container>\n     </ng-template>\n </mat-menu>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "literal type"
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "IAction[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenu",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\nimport { IAction } from '@app/core/types/actions';\nimport { MatMenu } from '@angular/material/menu';\n\n@Component({\n  selector: 'app-menu-item',\n  styleUrls: ['./menu-item.component.scss'],\n  template: ` <mat-menu #menu=\"matMenu\" xPosition=\"before\" yPosition=\"below\" overlapTrigger=\"false\">\n    <div mat-menu-item disabled *ngIf=\"!items?.length; else list\">\n      <i>No actions</i>\n    </div>\n    <ng-template #list>\n      <ng-container *ngFor=\"let a of items\">\n        <button *ngIf=\"!a.children; else branch\" [appForTest]=\"'action_btn'\" mat-menu-item [appActions]=\"{ cluster: cluster, actions: [a] }\">\n          <span>{{ a.display_name }}</span>\n        </button>\n        <ng-template #branch>\n          <button mat-menu-item [matMenuTriggerFor]=\"inner.menu\">\n            <span>{{ a.display_name }}</span>\n          </button>\n          <app-menu-item #inner [items]=\"a.children\" [cluster]=\"cluster\"></app-menu-item>\n        </ng-template>\n        </ng-container>\n      </ng-template>\n  </mat-menu>`,\n})\nexport class MenuItemComponent {\n  @Input() items: IAction[] = [];\n  @Input() cluster: { id: number; hostcomponent: string };\n  @ViewChild('menu', { static: true }) menu: MatMenu;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-menu-item-submenu-trigger::after {\n  left: 6px;\n  transform: rotate(180deg) translateY(50%);\n}\n",
                    "styleUrl": "./menu-item.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "Much2ManyComponent",
            "id": "component-Much2ManyComponent-34d2b009b3cc8b9cec80179b099bf8e7",
            "file": "src/app/shared/host-components-map/much-2-many/much-2-many.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-much-2-many",
            "styleUrls": [
                "./much-2-many.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./much-2-many.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "FormGroup"
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Tile"
                }
            ],
            "outputsClass": [
                {
                    "name": "clearRelationEvt",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<literal type>"
                },
                {
                    "name": "clickToTitleEvt",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isShow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "clearDisabled",
                    "args": [
                        {
                            "name": "rel",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rel",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearRelation",
                    "args": [
                        {
                            "name": "relation",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "relation",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clickToTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isError",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNotify",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleRelations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { isNumber } from '@app/core/types';\n\nimport { CompTile, Tile } from '../types';\n\n@Component({\n  selector: 'app-much-2-many',\n  templateUrl: './much-2-many.component.html',\n  styleUrls: ['./much-2-many.component.scss'],\n})\nexport class Much2ManyComponent {\n  isShow = false;\n\n  @Output() clickToTitleEvt: EventEmitter<any> = new EventEmitter();\n  @Output() clearRelationEvt: EventEmitter<{ relation: Tile; model: Tile }> = new EventEmitter();\n  @Input() model: Tile;\n  @Input() form: FormGroup;\n\n  isDisabled() {\n    if (this.model.actions) return !this.model.actions.length;\n    return this.model.disabled;\n  }\n\n  isError() {\n    if ('service_id' in this.model && Object.keys(this.form.controls).length) {\n      const sc = this.model as CompTile;\n      const control = this.form.controls[`${sc.service_id}/${sc.id}`];\n      if (!control) return false;\n      sc.notification = control.errors?.error;\n      return control.invalid;\n    } else return false;\n  }\n\n  clearDisabled(rel: Tile) {\n    if (this.model.actions) return this.model.actions.every((e) => e !== 'remove');\n    return rel.disabled || this.model.disabled;\n  }\n\n  clickToTitle() {\n    this.clickToTitleEvt.emit(this.model);\n  }\n\n  toggleRelations() {\n    this.isShow = !this.isShow;\n  }\n\n  clearRelation(relation: Tile) {\n    this.model.relations = this.model.relations.filter((a) => a !== relation);\n    this.clearRelationEvt.emit({ relation, model: this.model });\n  }\n\n  setNotify() {\n    const [a, b, c] = this.model.limit,\n      lim = isNumber(b) ? b : a === 'odd' ? 1 : a === 'depend' ? 0 : a;\n    return `${this.model.relations.length}${lim !== 0 ? ` / ${lim}` : ''}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div.m2m {\n  border: solid 1px rgb(238, 236, 236);\n  margin-bottom: 8px;\n  padding: 8px;\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, .2), 0 2px 2px 0 rgba(0, 0, 0, .14), 0 1px 5px 0 rgba(0, 0, 0, .12);\n\n  &.selected {\n    border-color: #76FF03;\n\n    .title-container {\n      .title {\n        font-weight: bolder;\n        color: #76FF03;\n      }\n    }\n  }\n\n  &.linked {\n    border-color: #18FFFF;\n\n    .title-container {\n      .title {\n        font-weight: bolder;\n        color: #18FFFF;\n      }\n    }\n\n  }\n\n  & .title-container {\n    display: flex;\n\n    & .title {\n      flex: 1;\n      line-height: 40px;\n      font-size: 18px;\n      width: 1px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n\n      mat-icon {\n        vertical-align: middle;\n        line-height: .9\n      }\n    }\n\n    & .relations-count {\n      box-shadow: none;\n      background-color: #e4f9ef;\n      margin-left: 8px;\n    }\n  }\n\n  & .relations-list {\n    padding: 4px 40px;\n    display: none;\n\n    & div {\n      display: flex;\n\n      & span {\n        font-size: 14px;\n        font-weight: 500;\n        flex: 1 0 auto;\n        line-height: 40px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        width: 1px;\n      }\n\n      & button {\n        flex: 0 1 auto;\n      }\n    }\n  }\n\n  & .notification {\n    display: none;\n  }\n\n  & .show {\n    display: block;\n  }\n}\n\n\n\n.mat-mini-fab[disabled][disabled] {\n  color: rgba(0, 0, 0, 0.4);\n}\n",
                    "styleUrl": "./much-2-many.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div [ngClass]=\"{'m2m':true, 'selected': model.isSelected, 'linked': model.isLink}\">\n  <div class=\"title-container\">\n    <button mat-button [disabled]=\"isDisabled()\" class=\"title\" [appTooltip]=\"model.name\"\n      [appTooltipShowByCondition]=\"true\" (click)=\"clickToTitle()\">\n      <span *ngIf=\"isError()\" class=\"warn\">*</span>&nbsp;<span [matTooltip]=\"model.notification\"\n        [style.color]=\"model.color\">{{ model.name }}</span>\n    </button>\n    <button mat-raised-button color=\"primary\"\n      (click)=\"toggleRelations()\">{{ model.limit?.length ? setNotify() : model.relations.length }}</button>\n  </div>\n  <div [ngClass]=\"{'relations-list':true, 'show': model.relations.length && isShow}\">\n    <div *ngFor=\"let rel of model.relations\">\n      <span [appTooltip]=\"rel.name\" [appTooltipShowByCondition]=\"true\">{{ rel.name }}</span>\n      <button [disabled]=\"clearDisabled(rel)\" mat-icon-button color=\"primary\" (click)=\"clearRelation(rel)\">\n        <mat-icon>clear</mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-3d5ec0ae61bd032d6bf26061449bb56a",
            "file": "src/app/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      font-size: 14px;\n      margin-left: 8px;\n      width: 100%;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    mat-nav-list {\n      padding-top: 0;\n      display: flex;\n      align-items: center;\n      max-width: 100%;\n      overflow: hidden;\n      flex-flow: row nowrap;\n      justify-content: flex-start;\n    }\n\n    mat-nav-list > * {\n      display: block;\n      box-sizing: border-box;\n    }\n\n    mat-nav-list a {\n      display: flex;\n      align-items: center;\n      line-height: normal;\n    }\n\n    .mat-nav-list .entity {\n      border: 1px solid #54646E;\n      border-radius: 5px;\n      padding: 2px 8px;\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n      flex: 0 1 auto;\n      overflow: hidden;\n\n    }\n\n    .mat-nav-list .entity.last {\n      flex: 0 0 auto;\n    }\n\n    .mat-nav-list .entity * {\n      flex: 0 0 auto;\n    }\n\n    .mat-nav-list .entity .link {\n      flex: 0 1 auto;\n      overflow: hidden;\n    }\n\n    .mat-nav-list .entity a {\n      line-height: 40px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      display: block;\n    }\n\n    .mat-nav-list app-upgrade {\n      margin-left: -8px;\n    }\n\n  "
            ],
            "template": "<mat-nav-list>\n  <a routerLink=\"/admin\"><mat-icon>apps</mat-icon></a>\n  <span>&nbsp;/&nbsp;</span>\n  <ng-container *ngFor=\"let item of path | async | navItem; last as isLast\">\n    <span [ngClass]=\"isLast ? [item.class, 'last'] : [item.class]\">\n      <div class=\"link\">\n        <a routerLink=\"{{ item.url }}\" [title]=\"item.title | uppercase\">{{ item.title | uppercase }}</a>\n      </div>\n      <app-actions-button *ngIf=\"item?.entity?.typeName !== 'group_config'\"\n                          [row]=\"item?.entity\"></app-actions-button>\n      <app-upgrade\n        *ngIf=\"['cluster', 'provider'].includes(item?.entity?.typeName)\"\n        [row]=\"item?.entity\"\n        (refresh)=\"refresh.emit($event)\"\n      ></app-upgrade>\n    </span>\n    <span *ngIf=\"!isLast\">&nbsp;/&nbsp;</span>\n  </ng-container>\n</mat-nav-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "refresh",
                    "defaultValue": "new EventEmitter<EmmitRow>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 134,
                    "type": "EventEmitter<EmmitRow>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionFlag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "actionLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAction[]",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "isIssue",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "ownPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AdcmTypedEntity[]>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { AdcmTypedEntity } from '@app/models/entity';\nimport { EmmitRow, IAction } from '@app/core/types';\nimport { IIssues } from '@app/models/issue';\n\n@Component({\n  selector: 'app-navigation',\n  template: `\n    <mat-nav-list>\n      <a routerLink=\"/admin\"><mat-icon>apps</mat-icon></a>\n      <span>&nbsp;/&nbsp;</span>\n      <ng-container *ngFor=\"let item of path | async | navItem; last as isLast\">\n        <span [ngClass]=\"isLast ? [item.class, 'last'] : [item.class]\">\n          <div class=\"link\">\n            <a routerLink=\"{{ item.url }}\" [title]=\"item.title | uppercase\">{{ item.title | uppercase }}</a>\n          </div>\n          <app-actions-button *ngIf=\"item?.entity?.typeName !== 'group_config'\"\n                              [row]=\"item?.entity\"></app-actions-button>\n          <app-upgrade\n            *ngIf=\"['cluster', 'provider'].includes(item?.entity?.typeName)\"\n            [row]=\"item?.entity\"\n            (refresh)=\"refresh.emit($event)\"\n          ></app-upgrade>\n        </span>\n        <span *ngIf=\"!isLast\">&nbsp;/&nbsp;</span>\n      </ng-container>\n    </mat-nav-list>\n  `,\n  styles: [`\n    :host {\n      font-size: 14px;\n      margin-left: 8px;\n      width: 100%;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    mat-nav-list {\n      padding-top: 0;\n      display: flex;\n      align-items: center;\n      max-width: 100%;\n      overflow: hidden;\n      flex-flow: row nowrap;\n      justify-content: flex-start;\n    }\n\n    mat-nav-list > * {\n      display: block;\n      box-sizing: border-box;\n    }\n\n    mat-nav-list a {\n      display: flex;\n      align-items: center;\n      line-height: normal;\n    }\n\n    .mat-nav-list .entity {\n      border: 1px solid #54646E;\n      border-radius: 5px;\n      padding: 2px 8px;\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n      flex: 0 1 auto;\n      overflow: hidden;\n\n    }\n\n    .mat-nav-list .entity.last {\n      flex: 0 0 auto;\n    }\n\n    .mat-nav-list .entity * {\n      flex: 0 0 auto;\n    }\n\n    .mat-nav-list .entity .link {\n      flex: 0 1 auto;\n      overflow: hidden;\n    }\n\n    .mat-nav-list .entity a {\n      line-height: 40px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      display: block;\n    }\n\n    .mat-nav-list app-upgrade {\n      margin-left: -8px;\n    }\n\n  `],\n})\nexport class NavigationComponent extends BaseDirective {\n\n  actionFlag = false;\n  actionLink: string;\n  actions: IAction[] = [];\n  state: string;\n  cluster: { id: number; hostcomponent: string };\n\n  private ownPath: Observable<AdcmTypedEntity[]>;\n\n  isIssue = (issue: IIssues): boolean => !!(issue && Object.keys(issue).length);\n\n  @Input() set path(path: Observable<AdcmTypedEntity[]>) {\n    this.ownPath = path;\n    this.ownPath.pipe(this.takeUntil()).subscribe((lPath) => {\n      if (lPath && !!lPath.length) {\n        const last = lPath[lPath.length - 1];\n        const exclude = ['bundle', 'job'];\n        this.actionFlag = !exclude.includes(last.typeName);\n        this.actionLink = (<any>last).action;\n        this.actions = (<any>last).actions;\n        this.state = (<any>last).state;\n        const { id, hostcomponent } = <any>lPath[0];\n        this.cluster = { id, hostcomponent };\n      }\n    });\n  }\n\n  get path(): Observable<AdcmTypedEntity[]> {\n    return this.ownPath;\n  }\n\n  @Output()\n  refresh: EventEmitter<EmmitRow> = new EventEmitter<EmmitRow>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      font-size: 14px;\n      margin-left: 8px;\n      width: 100%;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    mat-nav-list {\n      padding-top: 0;\n      display: flex;\n      align-items: center;\n      max-width: 100%;\n      overflow: hidden;\n      flex-flow: row nowrap;\n      justify-content: flex-start;\n    }\n\n    mat-nav-list > * {\n      display: block;\n      box-sizing: border-box;\n    }\n\n    mat-nav-list a {\n      display: flex;\n      align-items: center;\n      line-height: normal;\n    }\n\n    .mat-nav-list .entity {\n      border: 1px solid #54646E;\n      border-radius: 5px;\n      padding: 2px 8px;\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n      flex: 0 1 auto;\n      overflow: hidden;\n\n    }\n\n    .mat-nav-list .entity.last {\n      flex: 0 0 auto;\n    }\n\n    .mat-nav-list .entity * {\n      flex: 0 0 auto;\n    }\n\n    .mat-nav-list .entity .link {\n      flex: 0 1 auto;\n      overflow: hidden;\n    }\n\n    .mat-nav-list .entity a {\n      line-height: 40px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      display: block;\n    }\n\n    .mat-nav-list app-upgrade {\n      margin-left: -8px;\n    }\n\n  \n",
            "extends": "BaseDirective",
            "accessors": {
                "path": {
                    "name": "path",
                    "setSignature": {
                        "name": "path",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "path",
                                "type": "Observable<AdcmTypedEntity[]>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 113,
                        "jsdoctags": [
                            {
                                "name": "path",
                                "type": "Observable<AdcmTypedEntity[]>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "path",
                        "type": "",
                        "returnType": "Observable<AdcmTypedEntity[]>",
                        "line": 129
                    }
                }
            }
        },
        {
            "name": "NotificationsComponent",
            "id": "component-NotificationsComponent-c3452fb90fd9c20c78b325f077ae33df",
            "file": "src/app/components/notifications/notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"counters\">\n  <div class=\"item\" routerLink=\"/task\" [queryParams]=\"{ status: 'running' }\" matTooltip=\"Show jobs in progress\">\n    <mat-icon class=\"running\">autorenew</mat-icon> {{ (data?.counts | async)?.runningCount }}\n  </div>\n  <div class=\"item\" routerLink=\"/task\" [queryParams]=\"{ status: 'success' }\" matTooltip=\"Show success jobs\">\n    <mat-icon class=\"success\">done_all</mat-icon> {{ (data?.counts | async)?.successCount }}\n  </div>\n  <div class=\"item\" routerLink=\"/task\" [queryParams]=\"{ status: 'failed' }\" matTooltip=\"Show failed jobs\">\n    <mat-icon class=\"failed\">done_all</mat-icon> {{ (data?.counts | async)?.failedCount }}\n  </div>\n</div>\n\n<ng-container *ngIf=\"(data?.tasks | async)?.length; else empty\">\n  <div class=\"header\">\n    <span>Last {{(data.tasks | async)?.length}} notifications:</span>\n  </div>\n\n  <div class=\"notifications\" #notifications>\n    <div *ngFor=\"let task of (data.tasks | async)\" class=\"notification\">\n      <ng-container [ngSwitch]=\"task.status\">\n        <mat-icon *ngSwitchCase=\"'running'\" class=\"icon-locked running\">autorenew</mat-icon>\n        <mat-icon *ngSwitchCase=\"'aborted'\" [ngClass]=\"task.status\">block</mat-icon>\n        <mat-icon *ngSwitchDefault [ngClass]=\"task.status\">done_all</mat-icon>\n      </ng-container>\n      <a [routerLink]=\"task | bellTaskLink\">{{ task.action.display_name }}</a>\n    </div>\n\n    <div class=\"footer\">\n      <a routerLink=\"/task\">Show more...</a>\n      <a (click)=\"acknowledge()\" class=\"acknowledge\"><mat-icon class=\"success\">check_circle</mat-icon>acknowledge</a>\n    </div>\n\n  </div>\n</ng-container>\n<ng-template #empty>\n  <div class=\"empty-label\" [ngStyle]=\"{ 'min-height': minHeightNotifications + 'px' }\">\n    Nothing to display\n  </div>\n  <div class=\"empty-footer\">\n    <a routerLink=\"/task\">Show all jobs...</a>\n  </div>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverEventFunc",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "minHeightNotifications",
                    "defaultValue": "200",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "notificationsRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'notifications', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "acknowledge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLabelHeightAfterAcknowledge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NotificationsData } from '@app/components/bell/bell.component';\nimport { TaskRaw } from '@app/core/types';\nimport { PopoverEventFunc } from '@app/abstract-directives/popover-content.directive';\n\nexport const ACKNOWLEDGE_EVENT = 'acknowledge';\n\n@Component({\n  selector: 'app-notifications',\n  template: `\n    <div class=\"counters\">\n      <div class=\"item\" routerLink=\"/task\" [queryParams]=\"{ status: 'running' }\" matTooltip=\"Show jobs in progress\">\n        <mat-icon class=\"running\">autorenew</mat-icon> {{ (data?.counts | async)?.runningCount }}\n      </div>\n      <div class=\"item\" routerLink=\"/task\" [queryParams]=\"{ status: 'success' }\" matTooltip=\"Show success jobs\">\n        <mat-icon class=\"success\">done_all</mat-icon> {{ (data?.counts | async)?.successCount }}\n      </div>\n      <div class=\"item\" routerLink=\"/task\" [queryParams]=\"{ status: 'failed' }\" matTooltip=\"Show failed jobs\">\n        <mat-icon class=\"failed\">done_all</mat-icon> {{ (data?.counts | async)?.failedCount }}\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"(data?.tasks | async)?.length; else empty\">\n      <div class=\"header\">\n        <span>Last {{(data.tasks | async)?.length}} notifications:</span>\n      </div>\n\n      <div class=\"notifications\" #notifications>\n        <div *ngFor=\"let task of (data.tasks | async)\" class=\"notification\">\n          <ng-container [ngSwitch]=\"task.status\">\n            <mat-icon *ngSwitchCase=\"'running'\" class=\"icon-locked running\">autorenew</mat-icon>\n            <mat-icon *ngSwitchCase=\"'aborted'\" [ngClass]=\"task.status\">block</mat-icon>\n            <mat-icon *ngSwitchDefault [ngClass]=\"task.status\">done_all</mat-icon>\n          </ng-container>\n          <a [routerLink]=\"task | bellTaskLink\">{{ task.action.display_name }}</a>\n        </div>\n\n        <div class=\"footer\">\n          <a routerLink=\"/task\">Show more...</a>\n          <a (click)=\"acknowledge()\" class=\"acknowledge\"><mat-icon class=\"success\">check_circle</mat-icon>acknowledge</a>\n        </div>\n\n      </div>\n    </ng-container>\n    <ng-template #empty>\n      <div class=\"empty-label\" [ngStyle]=\"{ 'min-height': minHeightNotifications + 'px' }\">\n        Nothing to display\n      </div>\n      <div class=\"empty-footer\">\n        <a routerLink=\"/task\">Show all jobs...</a>\n      </div>\n    </ng-template>\n  `,\n  styleUrls: ['./notifications.component.scss']\n})\nexport class NotificationsComponent {\n\n  minHeightNotifications = 200;\n\n  @ViewChild('notifications', { static: false }) notificationsRef: ElementRef;\n\n  @Input() data: { counts: BehaviorSubject<NotificationsData>, tasks: BehaviorSubject<TaskRaw[]> };\n\n  event: PopoverEventFunc;\n\n  setLabelHeightAfterAcknowledge() {\n    this.minHeightNotifications = this.notificationsRef.nativeElement.clientHeight;\n  }\n\n  acknowledge() {\n    this.setLabelHeightAfterAcknowledge();\n    this.event(ACKNOWLEDGE_EVENT);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".counters {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 300px;\n\n  & .item {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n  }\n}\n\n.notifications {\n  margin-top: 10px;\n  padding-top: 10px;\n  width: 100%;\n}\n\n.notification {\n  display: flex;\n  align-items: center;\n  width: 100%;\n}\n\n.notification + .notification {\n  border-top: solid 1px #455A64;\n  margin-top: 5px;\n  padding-top: 5px;\n}\n\n.footer, .header {\n  margin-top: 20px;\n}\n\n.footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.acknowledge {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n}\n\n.empty-label {\n  margin: 20px 0;\n  text-align: center;\n  font-style: italic;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.empty-footer {\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: center;\n}\n\nmat-icon {\n  margin-right: 3px;\n}\n",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-ab7f01615421ad17b1b760b49a67020e",
            "file": "src/app/main/server-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [
                "styleCSS"
            ],
            "template": "<div>Page not found.</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nconst styleCSS = 'div { font-weight:bold; margin: 40px auto; width: 400px;}';\n\n// http 500\n@Component({\n  styles: [styleCSS],\n  template: '<div>Critical error on the server. <p>Contact to <a routerLink=\"/support\">support</a>.</p></div>',\n})\nexport class FatalErrorComponent {}\n\n// http 504\n@Component({\n  styles: [styleCSS],\n  template: '<div>Gateway Timeout.</div>',\n})\nexport class GatewayTimeoutComponent {}\n\n// http 404\n@Component({\n  styles: [styleCSS],\n  template: '<div>Page not found.</div>',\n})\nexport class PageNotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "styleCSS\n"
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-16478709b72d26532a38216f56a831fe",
            "file": "src/app/shared/form-elements/password/password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-password",
            "styleUrls": [
                "./password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "conf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'conf', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "dummy",
                    "defaultValue": "'********'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "isHideDummy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmPasswordFieldUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getConfirmPasswordFieldErrors",
                    "args": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasErrorConfirm",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideDummy",
                    "args": [
                        {
                            "name": "isConfirmField",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isConfirmField",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isCleared",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValidField",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { AbstractControl, FormControl } from '@angular/forms';\nimport { fromEvent, merge } from 'rxjs';\nimport { debounceTime, pluck, tap } from 'rxjs/operators';\n\nimport { FieldDirective } from '../field.directive';\nimport { FieldService } from '../../configuration/services/field.service';\n\n@Component({\n  selector: 'app-fields-password',\n  templateUrl: './password.component.html',\n  styleUrls: ['./password.component.scss'],\n})\nexport class PasswordComponent extends FieldDirective implements OnInit, AfterViewInit, OnChanges {\n  dummy = '********';\n  isHideDummy = false;\n  value: string;\n\n  constructor(private service: FieldService, private cd: ChangeDetectorRef) {\n    super();\n  }\n\n  @ViewChild('input', { read: ElementRef }) input: ElementRef;\n  @ViewChild('conf', { read: ElementRef }) conf: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!changes.field.firstChange) {\n      this.initConfirm();\n    }\n  }\n\n  ngOnInit() {\n    this.initConfirm();\n    super.ngOnInit();\n\n    if (!this.control.value) this.dummy = '';\n    this.value = this.control.value;\n  }\n\n  initConfirm(): void {\n    if (!this.field.ui_options?.no_confirm) {\n      this.form.addControl(\n        `confirm_${this.field.name}`,\n        new FormControl(\n          { value: this.field.value, disabled: this.control.disabled },\n          this.field.activatable ? [] : this.service.setValidator(this.field, this.control)\n        )\n      );\n\n      this.control.statusChanges.pipe(\n        this.takeUntil()\n      ).subscribe((state) => {\n        if (state === 'DISABLED') {\n          this.form.controls[`confirm_${this.field.name}`].disable();\n        } else {\n          this.form.controls[`confirm_${this.field.name}`].enable();\n        }\n      });\n    }\n\n    if (this.field.required && !this.field.value) {\n      this.hideDummy(false);\n    }\n\n    if (this.ConfirmPasswordField) this.ConfirmPasswordField.markAllAsTouched();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.ConfirmPasswordField) {\n      const a = fromEvent(this.input.nativeElement, 'blur');\n      const c = fromEvent(this.input.nativeElement, 'focus');\n      const b = fromEvent(this.conf.nativeElement, 'blur');\n      const d = fromEvent(this.conf.nativeElement, 'focus');\n\n      merge(a, b, c, d)\n        .pipe(\n          debounceTime(100),\n          pluck('type'),\n          tap((res: 'focus' | 'blur') => {\n            if (res === 'blur' && (this.isValidField() || this.isCleared())) {\n              if ((this.isValidField() && this.isCleared()) || this.isCleared()) {\n                this.control.setValue(this.value);\n                this.ConfirmPasswordField.setValue(this.value);\n              }\n              this.isHideDummy = false;\n              this.cd.detectChanges();\n            }\n          })\n        )\n        .subscribe();\n    } else {\n      fromEvent(this.input.nativeElement, 'blur')\n        .pipe(\n          tap(_ => {\n            if (this.control.valid || this.value !== '' && this.control.value === '') {\n              if ((this.control.valid && this.value !== '' && this.control.value === '') || this.value !== '' && this.control.value === '') {\n                this.control.setValue(this.value);\n              }\n              this.isHideDummy = false;\n              this.cd.detectChanges();\n            }\n          })\n        ).subscribe();\n    }\n  }\n\n  isValidField(): boolean {\n    return this.control.valid && this.ConfirmPasswordField.valid;\n  }\n\n  isCleared(): boolean {\n    return this.value !== '' && this.control.value === '' && this.ConfirmPasswordField.value === '';\n  }\n\n  hideDummy(isConfirmField: boolean): void {\n    if (this.field.read_only) return null;\n    this.isHideDummy = true;\n    this.cd.detectChanges();\n\n    if (isConfirmField) {\n      this.conf.nativeElement.focus();\n    } else {\n      this.input.nativeElement.focus();\n    }\n\n    this.control.setValue('');\n    if (this.ConfirmPasswordField) this.ConfirmPasswordField.setValue('');\n  }\n\n  get ConfirmPasswordField(): AbstractControl {\n    return this.form.controls['confirm_' + this.field.name];\n  }\n\n  hasErrorConfirm(name: string) {\n    const c = this.ConfirmPasswordField;\n    return this.getConfirmPasswordFieldErrors(name) && (c.touched || c.dirty);\n  }\n\n  confirmPasswordFieldUpdate() {\n    this.dummy = this.control.value;\n    this.value = this.control.value;\n    const confirm = this.ConfirmPasswordField;\n    return confirm ? confirm.updateValueAndValidity() : '';\n  }\n\n  getConfirmPasswordFieldErrors(error: string) {\n    const confirm = this.ConfirmPasswordField;\n    if (confirm && confirm.errors) {\n      return confirm.errors[error];\n    }\n    return null;\n  }\n\n  change(value: string) {\n    if (value === null) {\n      this.hideDummy(false);\n      this.cd.detectChanges();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\n  flex: 1;\n\n  & mat-form-field {\n    flex-basis: 50%;\n  }\n\n  & mat-form-field:first-child {\n    margin-right: 10px;\n  }\n}\n",
                    "styleUrl": "./password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "FieldService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FieldDirective",
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "accessors": {
                "ConfirmPasswordField": {
                    "name": "ConfirmPasswordField",
                    "getSignature": {
                        "name": "ConfirmPasswordField",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 150
                    }
                }
            },
            "templateData": "<div [ngStyle]=\"{ display: isHideDummy ? 'none' : 'flex' }\">\n  <mat-form-field>\n    <input matInput\n           type=\"password\"\n           (focus)=\"hideDummy(false)\"\n           [value]=\"dummy\"\n           [readonly]=\"field.read_only\"\n           [disabled]=\"control.disabled\"\n    >\n  </mat-form-field>\n  <mat-form-field *ngIf=\"ConfirmPasswordField\">\n    <input matInput\n           type=\"password\"\n           (focus)=\"hideDummy(true)\"\n           [value]=\"dummy\"\n           [readonly]=\"field.read_only\"\n           [disabled]=\"control.disabled\"\n    >\n  </mat-form-field>\n</div>\n\n<div [formGroup]=\"form\" [ngStyle]=\"{ display: !isHideDummy ? 'none' : 'flex' }\">\n  <mat-form-field>\n    <input #input matInput type=\"password\" (input)=\"confirmPasswordFieldUpdate()\" [readonly]=\"field.read_only\" (ngModelChange)=\"change($event)\"\n           [formControlName]=\"field.name\" (click)=\"$event.stopPropagation()\" />\n    <mat-error *ngIf=\"hasError('required')\"> Field [{{ field.display_name }}] is required! </mat-error>\n  </mat-form-field>\n  <mat-form-field *ngIf=\"ConfirmPasswordField\">\n    <input #conf matInput type=\"password\" [readonly]=\"field.read_only\" [formControlName]=\"'confirm_' + field.name\" />\n    <mat-error *ngIf=\"hasErrorConfirm('required')\"> Confirm [{{ field.display_name }}] is required! </mat-error>\n    <mat-error *ngIf=\"hasErrorConfirm('notEqual')\">\n      Field [{{ field.display_name }}] and confirm [{{ field.display_name }}] does not match!\n    </mat-error>\n  </mat-form-field>\n</div>\n"
        },
        {
            "name": "PatternComponent",
            "id": "component-PatternComponent-df6255474545fbce67d0c49e26727d6f",
            "file": "src/app/admin/pattern.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pattern",
            "styleUrls": [
                "../styles/details.scss"
            ],
            "styles": [],
            "template": "<mat-toolbar>\n  <app-crumbs [navigation]=\"crumbs\"></app-crumbs>\n  <div class=\"example-spacer\"></div>\n</mat-toolbar>\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened [style.backgroundColor]=\"'transparent'\" [style.minWidth.px]=\"200\">\n    <mat-nav-list [style.paddingTop.px]=\"20\">\n      <a mat-list-item [appForTest]=\"'tab_' + item.url\" *ngFor=\"let item of leftMenu\" [routerLink]=\"[item.url]\" routerLinkActive=\"active\">{{ item.title }} </a>\n    </mat-nav-list>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{ title }}</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "crumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "data",
                    "defaultValue": "{\n    '/admin': { title: 'Hi there!', crumbs: [{ path: '/admin/', name: 'intro' }] },\n    '/admin/intro': { title: 'Hi there!', crumbs: [{ path: '/admin/', name: 'intro' }] },\n    '/admin/settings': { title: 'Global configuration', crumbs: [{ path: '/admin/settings', name: 'settings' }] },\n    '/admin/users': { title: 'User management', crumbs: [{ path: '/admin/users', name: 'users' }] },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    { url: 'intro', title: 'Intro' },\n    { url: 'settings', title: 'Settings' },\n    { url: 'users', title: 'Users' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getContext",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { ApiService } from '@app/core/api';\nimport { getProfileSelector, settingsSave, State } from '@app/core/store';\nimport { BaseDirective } from '@app/shared/directives';\nimport { IConfig } from '@app/shared/configuration/types';\nimport { select, Store } from '@ngrx/store';\nimport { exhaustMap, filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-pattern',\n  template: `\n    <mat-toolbar>\n      <app-crumbs [navigation]=\"crumbs\"></app-crumbs>\n      <div class=\"example-spacer\"></div>\n    </mat-toolbar>\n    <mat-drawer-container [style.flex]=\"1\" autosize>\n      <mat-drawer disableClose=\"true\" mode=\"side\" opened [style.backgroundColor]=\"'transparent'\" [style.minWidth.px]=\"200\">\n        <mat-nav-list [style.paddingTop.px]=\"20\">\n          <a mat-list-item [appForTest]=\"'tab_' + item.url\" *ngFor=\"let item of leftMenu\" [routerLink]=\"[item.url]\" routerLinkActive=\"active\">{{ item.title }} </a>\n        </mat-nav-list>\n      </mat-drawer>\n      <mat-drawer-content [style.display]=\"'flex'\">\n        <mat-card>\n          <mat-card-header>\n            <mat-card-title>{{ title }}</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <router-outlet></router-outlet>\n          </mat-card-content>\n        </mat-card>\n      </mat-drawer-content>\n    </mat-drawer-container>\n  `,\n  styleUrls: ['../styles/details.scss'],\n})\nexport class PatternComponent extends BaseDirective implements OnInit, OnDestroy {\n  title = '';\n  crumbs = [];\n  leftMenu = [\n    { url: 'intro', title: 'Intro' },\n    { url: 'settings', title: 'Settings' },\n    { url: 'users', title: 'Users' },\n  ];\n  data = {\n    '/admin': { title: 'Hi there!', crumbs: [{ path: '/admin/', name: 'intro' }] },\n    '/admin/intro': { title: 'Hi there!', crumbs: [{ path: '/admin/', name: 'intro' }] },\n    '/admin/settings': { title: 'Global configuration', crumbs: [{ path: '/admin/settings', name: 'settings' }] },\n    '/admin/users': { title: 'User management', crumbs: [{ path: '/admin/users', name: 'users' }] },\n  };\n\n  constructor(private store: Store<State>, private api: ApiService, private router: Router) {\n    super();\n  }\n\n  ngOnInit() {\n    this.getContext(this.router.routerState.snapshot.url);\n\n    this.router.events\n      .pipe(\n        filter((e) => e instanceof NavigationEnd),\n        this.takeUntil()\n      )\n      .subscribe((e: NavigationEnd) => this.getContext(e.url));\n\n    // auto-save and flag in to profile\n    this.store\n      .pipe(\n        select(getProfileSelector),\n        filter((p) => p.username === 'admin' && !p.profile.settingsSaved),\n        exhaustMap(() =>\n          this.api.get<IConfig>('/api/v1/adcm/1/config/current/?noview').pipe(\n            exhaustMap((c) => {\n              const config = c.config;\n              const global = config['global'] || {};\n              global.adcm_url = global.adcm_url || `${location.protocol}//${location.host}`;\n              return this.api.post('/api/v1/adcm/1/config/history/', c);\n            })\n          )\n        ),\n        this.takeUntil()\n      )\n      .subscribe(() => this.store.dispatch(settingsSave({ isSet: true })));\n  }\n\n  getContext(url: string) {\n    const a = this.data[url];\n    this.title = a.title;\n    this.crumbs = a.crumbs;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "PopoverComponent",
            "id": "component-PopoverComponent-3ff4f7f4944c2f64226e4c300903ecf2",
            "file": "src/app/components/popover/popover.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popover",
            "styleUrls": [
                "./popover.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"container\">\n    <ng-container #container></ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Type<PopoverContentDirective>"
                },
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "PopoverInput"
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "PopoverEventFunc"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "containerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<PopoverContentDirective>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.right'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  ViewContainerRef,\n  ComponentRef,\n  Input,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  AfterViewInit,\n  Type,\n  HostListener, ElementRef, HostBinding,\n} from '@angular/core';\nimport { EventHelper } from '@adwp-ui/widgets';\n\nimport { PopoverContentDirective, PopoverEventFunc } from '@app/abstract-directives/popover-content.directive';\nimport { PopoverInput } from '@app/directives/popover.directive';\n\n@Component({\n  selector: 'app-popover',\n  template: `\n    <div class=\"container\">\n        <ng-container #container></ng-container>\n    </div>\n  `,\n  styleUrls: ['./popover.component.scss']\n})\nexport class PopoverComponent implements AfterViewInit {\n\n  @ViewChild('container', { read: ViewContainerRef }) container: ViewContainerRef;\n  containerRef: ComponentRef<PopoverContentDirective>;\n\n  @Input() component: Type<PopoverContentDirective>;\n  @Input() data: PopoverInput = {};\n  @Input() event: PopoverEventFunc;\n\n  @HostListener('click', ['$event']) click(event: MouseEvent) {\n    EventHelper.stopPropagation(event);\n  }\n\n  @HostBinding('style.right') right: string;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      const factory: ComponentFactory<any> = this.componentFactoryResolver.resolveComponentFactory(this.component);\n      this.container.clear();\n      this.containerRef = this.container.createComponent(factory);\n      this.containerRef.instance.data = this.data;\n      this.containerRef.instance.event = this.event;\n      setTimeout(() => {\n        const left = document.documentElement.clientWidth - (this.elementRef.nativeElement.offsetLeft + this.elementRef.nativeElement.offsetWidth);\n        if (left < 0) {\n          this.right = `0px`;\n        }\n      });\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  line-height: normal;\n  text-align: left;\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  color: #fff;\n  font-size: 14px;\n  position: absolute;\n  display: block;\n  border: solid 1px #455A64;\n  padding: 0;\n  background-color: #37474F;\n  border-radius: 5px;\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2),\n  0px 2px 2px 0px rgba(0, 0, 0, 0.14),\n  0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  height: auto;\n  z-index: 1100;\n  overflow: auto;\n  box-sizing: content-box;\n  cursor: auto;\n}\n\n.container {\n  margin: 8px 14px;\n  box-sizing: content-box;\n  width: auto !important;\n}\n",
                    "styleUrl": "./popover.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-867ee8014831c2a9d971522f910b211b",
            "file": "src/app/main/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [],
            "styles": [
                ":host {flex: 1 }",
                ".container { padding-top: 40px; }",
                "hr { margin: 40px 0; border: 0; border-top: dashed 1px rgb(140, 140, 140); }",
                "h3, h4, h5 { font-weight: normal; }"
            ],
            "template": "<div class=\"container\">\n  <div *ngIf=\"user$ | async as user\">\n    <p>\n      You are authorized as [ <b>{{ user.username }}</b> ]\n    </p>\n    <hr />\n    <div [formGroup]=\"cpForm\">\n      <h3>Change Password</h3>\n      <mat-form-field>\n        <input\n          matInput\n          placeholder=\"Password\"\n          formControlName=\"password\"\n          (input)=\"cpForm.get('cpassword').updateValueAndValidity()\"\n          type=\"password\"\n        />\n      </mat-form-field>\n      &nbsp;\n      <mat-form-field>\n        <input\n          matInput\n          placeholder=\"Confirm password\"\n          formControlName=\"cpassword\"\n          appConfirmEqualValidator=\"password\"\n          type=\"password\"\n        />\n      </mat-form-field>\n      &nbsp;\n      <button mat-raised-button [disabled]=\"!cpForm.valid\" (click)=\"changePassword()\">Save</button>\n    </div>\n    <hr />\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cpForm",
                    "defaultValue": "new FormGroup({\n    password: new FormControl('', Validators.required),\n    cpassword: new FormControl('', Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProfileState>",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { getProfileSelector, ProfileService, ProfileState } from '@app/core/store';\nimport { BaseDirective } from '@app/shared/directives';\n\n@Component({\n  selector: 'app-profile',\n  template: `\n    <div class=\"container\">\n      <div *ngIf=\"user$ | async as user\">\n        <p>\n          You are authorized as [ <b>{{ user.username }}</b> ]\n        </p>\n        <hr />\n        <div [formGroup]=\"cpForm\">\n          <h3>Change Password</h3>\n          <mat-form-field>\n            <input\n              matInput\n              placeholder=\"Password\"\n              formControlName=\"password\"\n              (input)=\"cpForm.get('cpassword').updateValueAndValidity()\"\n              type=\"password\"\n            />\n          </mat-form-field>\n          &nbsp;\n          <mat-form-field>\n            <input\n              matInput\n              placeholder=\"Confirm password\"\n              formControlName=\"cpassword\"\n              appConfirmEqualValidator=\"password\"\n              type=\"password\"\n            />\n          </mat-form-field>\n          &nbsp;\n          <button mat-raised-button [disabled]=\"!cpForm.valid\" (click)=\"changePassword()\">Save</button>\n        </div>\n        <hr />\n      </div>\n    </div>\n  `,\n  styles: [\n    ':host {flex: 1 }',\n    '.container { padding-top: 40px; }',\n    'hr { margin: 40px 0; border: 0; border-top: dashed 1px rgb(140, 140, 140); }',\n    'h3, h4, h5 { font-weight: normal; }',\n  ],\n})\nexport class ProfileComponent extends BaseDirective implements OnInit, OnDestroy {\n  link: string;\n  user$: Observable<ProfileState>;\n\n  cpForm = new FormGroup({\n    password: new FormControl('', Validators.required),\n    cpassword: new FormControl('', Validators.required),\n  });\n\n  constructor(private router: Router, private store: Store<ProfileState>, private service: ProfileService) {\n    super();\n  }\n\n  ngOnInit() {\n    this.user$ = this.store.select(getProfileSelector).pipe(\n      this.takeUntil()\n    );\n  }\n\n  changePassword() {\n    const password = this.cpForm.get('password').value;\n    this.service.setPassword(password).subscribe(() => this.router.navigate(['/login']));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {flex: 1 }\n.container { padding-top: 40px; }\nhr { margin: 40px 0; border: 0; border-top: dashed 1px rgb(140, 140, 140); }\nh3, h4, h5 { font-weight: normal; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<ProfileState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ProfileState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "ProgressComponent",
            "id": "component-ProgressComponent-4e47a32ca945d3ebe7ed8cacb035c729",
            "file": "src/app/main/progress.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress",
            "styleUrls": [],
            "styles": [
                ".progress-bar {position: absolute;width: 100%;height: 3px;z-index: 3;}"
            ],
            "template": "<mat-progress-bar\n  mode=\"indeterminate\"\n  class=\"progress-bar\"\n  [class.hidden]=\"(show$ | async) === false\"\n></mat-progress-bar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "show$",
                    "defaultValue": "of(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { PreloaderService } from '@app/core/services';\nimport { Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-progress',\n  template: `\n    <mat-progress-bar\n      mode=\"indeterminate\"\n      class=\"progress-bar\"\n      [class.hidden]=\"(show$ | async) === false\"\n    ></mat-progress-bar>\n  `,\n  styles: ['.progress-bar {position: absolute;width: 100%;height: 3px;z-index: 3;}'],\n})\nexport class ProgressComponent implements OnInit {\n  show$: Observable<boolean> = of(false);\n  constructor(private preloader: PreloaderService) {}\n  ngOnInit() {\n    this.show$ = this.preloader.active$.pipe(delay(1));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".progress-bar {position: absolute;width: 100%;height: 3px;z-index: 3;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "preloader",
                        "type": "PreloaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "preloader",
                        "type": "PreloaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ProviderComponent",
            "id": "component-ProviderComponent-001d736e2901a12141c44680d731e893",
            "file": "src/app/shared/add-component/provider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-provider",
            "styleUrls": [],
            "styles": [
                ".row {display: flex;}"
            ],
            "template": "<ng-container [formGroup]=\"form\">\n  <app-bundles [form]=\"form\" [typeName]=\"'provider'\" (prototypeChanged)=\"prototypeChanged($event)\"></app-bundles>\n  <ng-container *ngIf=\"displayMode === 0; else asHost\">\n    <app-input [form]=\"form\" [label]=\"'Hostprovider name'\" [controlName]=\"'name'\" [isRequired]=\"true\"></app-input>\n    <app-input [form]=\"form\" [label]=\"'Description'\" [controlName]=\"'description'\"></app-input>\n    <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n  </ng-container>\n  <ng-template #asHost>\n    <div class=\"row\">\n      <mat-form-field class=\"full-width\">\n        <input required matInput placeholder=\"Hostprovider name\" formControlName=\"name\" />\n        <button [style.fontSize.px]=\"24\" [disabled]=\"!form.valid\" matTooltip=\"Create hostprovider\" matSuffix mat-icon-button [color]=\"'accent'\" (click)=\"save()\">\n          <mat-icon>add_box</mat-icon>\n        </button>\n        <mat-error *ngIf=\"form.get('name').hasError('required')\">Hostprovider name is required </mat-error>\n      </mat-form-field>\n    </div>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayMode",
                    "defaultValue": "DisplayMode.default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "DisplayMode"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "prototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StackBase",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sgn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prototypeChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StackBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, EventEmitter, Output, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { clearEmptyField, Provider, StackBase } from '@app/core/types';\nimport { BaseFormDirective } from './base-form.directive';\n\nexport enum DisplayMode {\n  default,\n  inHost,\n  noCluster\n}\n\n@Component({\n  selector: 'app-add-provider',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <app-bundles [form]=\"form\" [typeName]=\"'provider'\" (prototypeChanged)=\"prototypeChanged($event)\"></app-bundles>\n      <ng-container *ngIf=\"displayMode === 0; else asHost\">\n        <app-input [form]=\"form\" [label]=\"'Hostprovider name'\" [controlName]=\"'name'\" [isRequired]=\"true\"></app-input>\n        <app-input [form]=\"form\" [label]=\"'Description'\" [controlName]=\"'description'\"></app-input>\n        <app-add-controls [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n      </ng-container>\n      <ng-template #asHost>\n        <div class=\"row\">\n          <mat-form-field class=\"full-width\">\n            <input required matInput placeholder=\"Hostprovider name\" formControlName=\"name\" />\n            <button [style.fontSize.px]=\"24\" [disabled]=\"!form.valid\" matTooltip=\"Create hostprovider\" matSuffix mat-icon-button [color]=\"'accent'\" (click)=\"save()\">\n              <mat-icon>add_box</mat-icon>\n            </button>\n            <mat-error *ngIf=\"form.get('name').hasError('required')\">Hostprovider name is required </mat-error>\n          </mat-form-field>\n        </div>\n      </ng-template>\n    </ng-container>\n  `,\n  styles: ['.row {display: flex;}'],\n})\nexport class ProviderComponent extends BaseFormDirective implements OnInit, OnDestroy {\n  sgn: Subscription;\n  private prototype: StackBase;\n  @Input() displayMode: DisplayMode = DisplayMode.default;\n  @Output() cancel = new EventEmitter();\n\n  ngOnInit() {\n    this.form = this.service.model('provider').form;\n    this.sgn = this.service.genName(this.form);\n  }\n\n  ngOnDestroy() {\n    this.sgn.unsubscribe();\n  }\n\n  prototypeChanged(event: StackBase) {\n    this.prototype = event;\n  }\n\n  save() {\n    const data = clearEmptyField(this.form.value);\n    this.service\n      .add<Provider>(data, 'provider', this.prototype)\n      .pipe(this.takeUntil())\n      .subscribe((x) => {\n        if (this.displayMode === 0) this.onCancel();\n        else {\n          this.form.reset();\n          this.cancel.emit(x.id);\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".row {display: flex;}\n",
            "extends": "BaseFormDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "ProviderDetailsComponent",
            "id": "component-ProviderDetailsComponent-0e457d3bb311fc9c56259f818a6843e0",
            "file": "src/app/components/hostprovider/provider-details/provider-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-provider-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'provider'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.HostProvider, 'provider'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\nimport { Provider } from '@app/core/types';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { ProviderService } from '@app/services/provider.service';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-provider-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class ProviderDetailsComponent extends DetailAbstractDirective<Provider> {\n\n  entityParam = 'provider';\n\n  leftMenu = [\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.HostProvider, 'provider'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n  ];\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: ProviderService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "ProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "ProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "RootComponent",
            "id": "component-RootComponent-0d7d1367306549fa685c589a9cbaa72d",
            "file": "src/app/shared/configuration/scheme/root.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root-scheme",
            "styleUrls": [
                "./root.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./root.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FormGroup | FormArray"
                },
                {
                    "name": "isReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IYContainer | IYField"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TValue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IControl[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "v",
                            "type": "[string, ]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "['', '']"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "[string, ]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "['', '']",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reload",
                    "args": [
                        {
                            "name": "value",
                            "type": "TValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "TValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "name",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showControls",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\n\nimport { TNReq, TValue } from '../types';\nimport { IYContainer, IYField } from '../yspec/yspec.service';\nimport { IControl, IValue, SchemeService } from './scheme.service';\n\n@Component({\n  selector: 'app-root-scheme',\n  templateUrl: './root.component.html',\n  styleUrls: ['./root.component.scss'],\n})\nexport class RootComponent implements OnInit {\n  @Input() form: FormGroup | FormArray;\n  @Input() options: IYContainer | IYField;\n  @Input() value: TValue;\n  @Input() isReadOnly = false;\n\n  controls: IControl[] = [];\n\n  constructor(private scheme: SchemeService) {}\n\n  init() {\n    if (this.value) {\n      if (this.options.type === 'list' && Array.isArray(this.value)) (this.value as IValue[]).map((x, i) => this.add(['', x]));\n      else if (typeof this.value === 'object') Object.keys(this.value).map((x) => this.add([x, this.value[x]]));\n    } else if (this.options.type === 'dict' && Array.isArray(this.options.options)) {\n      this.options.options.map((x) => this.add([x.name, '']));\n    }\n  }\n\n  ngOnInit(): void {\n    this.init();\n  }\n\n  reload(value: TValue) {\n    this.value = value;\n    this.controls = [];\n    if (Array.isArray(this.form.controls)) {\n      this.form.controls.forEach((v, i) => (this.form as FormArray).removeAt(i));\n    }\n    this.init();\n  }\n\n  add(v: [string, IValue | TValue] = ['', '']) {\n    const [name, value] = v;\n    const flag = (this.rules as IYContainer).type === 'dict';\n    const item = flag\n      ? this.scheme.addControlsDict(name, value, this.form as FormArray, this.itemRules as IYContainer[])\n      : this.scheme.addControls(name, value, this.form, this.rules, this.options.type as TNReq);\n    this.controls = [...this.controls, item];\n  }\n\n  showControls() {\n    return !this.isReadOnly && (this.options.type === 'list' || this.options.type === 'dict');\n  }\n\n  remove(name: string | number) {\n    if (Array.isArray(this.form.controls)) {\n      (this.form as FormArray).removeAt(+name);\n      this.controls = this.controls.filter((a, i) => (a.name ? a.name !== name : i !== +name));\n    }\n  }\n\n  get rules(): IYField | IYContainer | (IYField | IYContainer)[] {\n    if ('options' in this.options) return this.options.options;\n    else return this.options;\n  }\n\n  get itemRules(): (IYField | IYContainer)[] {\n    return (this.rules as IYContainer).options as (IYField | IYContainer)[];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  width: 100%;\n  margin-bottom: 20px;\n\n  & div.label {\n    display: flex;\n    align-items: center;\n    justify-content: space-between\n  }\n\n  & div.content {\n    margin-left: 10px;\n\n    & .item-iteration.dif:nth-child(even) {\n      background-color: #545454;\n    }\n\n    & .item-iteration {\n      display: flex;\n\n      &>div {\n        flex: 1;\n      }\n    }\n\n    & .remote-btn {\n      align-self: center;\n      margin-left: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./root.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scheme",
                        "type": "SchemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "scheme",
                        "type": "SchemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "rules": {
                    "name": "rules",
                    "getSignature": {
                        "name": "rules",
                        "type": "",
                        "returnType": "IYField | IYContainer | []",
                        "line": 76
                    }
                },
                "itemRules": {
                    "name": "itemRules",
                    "getSignature": {
                        "name": "itemRules",
                        "type": "[]",
                        "returnType": "[]",
                        "line": 81
                    }
                }
            },
            "templateData": "<div *ngIf=\"options.type === 'list' || options.type === 'dict'\" class=\"label\">\n  <label>{{ options.name }}</label>\n  <button *ngIf=\"!isReadOnly && options.type === 'list'\" mat-icon-button color=\"accent\" (click)=\"add()\">\n    <mat-icon>add_circle_outline</mat-icon>\n  </button>\n</div>\n<div class=\"content\" *ngIf=\"form\">\n  <ng-container [formGroup]=\"form\">\n    <div [ngClass]=\"{'item-iteration': true, dif: options.type === 'list' || options.type === 'dict'}\"\n      *ngFor=\"let item of controls; let i = index;\">\n\n      <app-root-scheme [form]=\"item.form\" [options]=\"item.rules\" [value]=\"item.value\"\n        *ngIf=\"item.type === 'list' || item.type === 'dict'; else simple\">\n      </app-root-scheme>\n\n      <ng-template #simple>\n        <app-item-scheme [item]=\"item\" [isReadOnly]=\"isReadOnly\" [index]=\"i\" (remove)=\"remove($event)\">\n        </app-item-scheme>\n      </ng-template>\n\n      <button class=\"remote-btn\" *ngIf=\"!isReadOnly && item.parent === 'list' && item.type === 'dict'\" mat-icon-button\n        color=\"primary\" (click)=\"remove(i)\">\n        <mat-icon>highlight_off</mat-icon>\n      </button>\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "SchemeComponent",
            "id": "component-SchemeComponent-c78387c61af573a74288850d9226c9ed",
            "file": "src/app/shared/configuration/scheme/scheme.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scheme",
            "styleUrls": [],
            "styles": [
                "\n      div.main {\n        flex: 1;\n      }\n      .error {\n        display: block;\n        margin: -20px 0 6px 10px;\n      }\n    "
            ],
            "template": "<div class=\"main\">    <app-root-scheme #root [isReadOnly]=\"field.read_only\" [form]=\"current\" [options]=\"rules\" [value]=\"field.value || field.default\"></app-root-scheme>\n    <mat-error *ngIf=\"hasError('isEmpty')\" class=\"error\">Field [{{ field.display_name }}] is required!</mat-error>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RootComponent",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'root'"
                        }
                    ]
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYField | IYContainer",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nafter saving, the link between the form and the current (form) is lost\nTODO: eliminate\n",
                    "description": "<p>after saving, the link between the form and the current (form) is lost\nTODO: eliminate</p>\n",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nthis is using for restore default value",
                    "description": "<p>this is using for restore default value</p>\n"
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { FieldDirective } from '@app/shared/form-elements/field.directive';\n\nimport { TNReq } from '../types';\nimport { IYContainer, IYField, YspecService } from '../yspec/yspec.service';\nimport { RootComponent } from './root.component';\nimport { SchemeService } from './scheme.service';\n\n@Component({\n  selector: 'app-scheme',\n  styles: [\n    `\n      div.main {\n        flex: 1;\n      }\n      .error {\n        display: block;\n        margin: -20px 0 6px 10px;\n      }\n    `,\n  ],\n  template: `<div class=\"main\">\n    <app-root-scheme #root [isReadOnly]=\"field.read_only\" [form]=\"current\" [options]=\"rules\" [value]=\"field.value || field.default\"></app-root-scheme>\n    <mat-error *ngIf=\"hasError('isEmpty')\" class=\"error\">Field [{{ field.display_name }}] is required!</mat-error>\n  </div>`,\n})\nexport class SchemeComponent extends FieldDirective implements OnInit, OnChanges {\n  rules: IYField | IYContainer;\n  current: AbstractControl;\n\n  @ViewChild('root') root: RootComponent;\n\n  constructor(private yspec: YspecService, private scheme: SchemeService) {\n    super();\n  }\n\n  /**\n   * after saving, the link between the form and the current (form) is lost\n   * TODO: eliminate\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!changes.form.firstChange) {\n      this.field.limits.rules = this.rules;\n      this.form.setControl(this.field.name, this.current);\n    }\n  }\n\n  ngOnInit() {\n    this.yspec.Root = this.field.limits.yspec;\n    this.rules = this.yspec.build();\n    this.field.limits.rules = this.rules;\n    this.rules.name = '';\n    this.current = this.scheme.setCurrentForm(this.rules.type as TNReq, this.form, this.field);\n  }\n\n  /** this is using for restore default value */\n  reload() {\n    this.root.reload(this.field.default);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      div.main {\n        flex: 1;\n      }\n      .error {\n        display: block;\n        margin: -20px 0 6px 10px;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "yspec",
                        "type": "YspecService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scheme",
                        "type": "SchemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "yspec",
                        "type": "YspecService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scheme",
                        "type": "SchemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FieldDirective",
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-9090bcee97f1cf88ae7298306e1fff12",
            "file": "src/app/shared/configuration/tools/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [],
            "styles": [
                "mat-form-field {flex: auto;margin: 0 10px;font-size: 14px;}"
            ],
            "template": "<mat-form-field class=\"seach-field\">\n  <input matInput type=\"text\" placeholder=\"Search field\" [formControl]=\"search\" id=\"config_search_input\" />\n  <button mat-button matSuffix mat-icon-button aria-label=\"Search\"><mat-icon>search</mat-icon></button>\n  <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"search.setValue('')\">\n    <mat-icon>close</mat-icon>\n  </button>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "pattern",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "search",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { BaseDirective } from '@app/shared/directives/base.directive';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-search',\n  template: `\n    <mat-form-field class=\"seach-field\">\n      <input matInput type=\"text\" placeholder=\"Search field\" [formControl]=\"search\" id=\"config_search_input\" />\n      <button mat-button matSuffix mat-icon-button aria-label=\"Search\"><mat-icon>search</mat-icon></button>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"search.setValue('')\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-form-field>\n  `,\n  styles: ['mat-form-field {flex: auto;margin: 0 10px;font-size: 14px;}'],\n})\nexport class SearchComponent extends BaseDirective implements OnInit, OnDestroy {\n  search = new FormControl();\n  @Output() pattern = new EventEmitter<string>();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.search.valueChanges.pipe(this.takeUntil(), debounceTime(300), distinctUntilChanged()).subscribe((value) => this.pattern.emit(value));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "mat-form-field {flex: auto;margin: 0 10px;font-size: 14px;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SecretTextComponent",
            "id": "component-SecretTextComponent-b449e366b5f5d18ae217c89db186eb3f",
            "file": "src/app/shared/form-elements/secret-text/secret-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-secret-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./secret-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dummy",
                    "defaultValue": "'********'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "dummyControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "_initDummyControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit, } from '@angular/core';\n\nimport { FieldDirective } from '../field.directive';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-fields-secret-text',\n  templateUrl: './secret-text.component.html',\n})\nexport class SecretTextComponent extends FieldDirective implements OnInit, OnChanges {\n  dummy = '********';\n  dummyControl: FormControl;\n  value: string;\n\n  ngOnChanges(): void {\n    this.value = this.field.value as string;\n  }\n\n  ngOnInit(): void {\n    this._initDummyControl();\n  }\n\n  onBlur(): void {\n    this.control.setValue(this.dummyControl.value || this.value);\n    this.dummyControl.setValue(this.dummyControl.value ? this.dummy : '');\n  }\n\n  onFocus(): void {\n    this.dummyControl.setValue(null);\n  }\n\n  private _initDummyControl(): void {\n    this.dummyControl = new FormControl(\n      { value: this.control.value ? this.dummy : '', disabled: this.control.disabled },\n      Validators.compose(this.field.required ? [Validators.required] : [])\n    );\n    this.dummyControl.markAllAsTouched();\n\n\n    this.control.statusChanges.pipe(this.takeUntil()).subscribe((status) => {\n      if (status === 'VALID') {\n        this.dummyControl.enable();\n      } else if (status === 'DISABLED') {\n        this.dummyControl.disable();\n      }\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "FieldDirective",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n  <mat-form-field>\n    <textarea matInput\n              (blur)=\"onBlur()\"\n              (focus)=\"onFocus()\"\n              [appMTextarea]=\"field.key\"\n              [formControl]=\"dummyControl\"\n              [readonly]=\"field.read_only\"\n    >\n\n    </textarea>\n    <mat-error *ngIf=\"!isValid\"><app-error-info [field]=\"field\" [control]=\"dummyControl\"></app-error-info></mat-error>\n  </mat-form-field>\n</ng-container>\n"
        },
        {
            "name": "ServiceComponent",
            "id": "component-ServiceComponent-eb48b86de9d2c7cd6a6d972d692aa5b3",
            "file": "src/app/shared/add-component/service.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-service",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"options$ | async as protos\">\n  <mat-selection-list #listServices (selectionChange)=\"selectAll($event)\">\n    <mat-list-option *ngIf=\"protos.length\">All</mat-list-option>\n    <mat-list-option *ngFor=\"let proto of protos\" [value]=\"proto\">\n      {{ proto.name }}\n    </mat-list-option>\n  </mat-selection-list>\n  <app-add-controls *ngIf=\"protos.length; else not\" [title]=\"'Add'\" [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n</ng-container>\n<ng-template #not>\n  <p>\n    <i>\n      There are no new services. You cluster already has all of them.\n    </i>\n  </p>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listServices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'listServices'"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "options$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SelectOption[]>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ADD_SERVICE_PROVIDER"
                        }
                    ],
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFormDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\nimport { SelectOption } from '@app/core/types';\nimport { Observable } from 'rxjs';\n\nimport { BaseFormDirective } from './base-form.directive';\n\n@Component({\n  selector: 'app-add-service',\n  template: `\n    <ng-container *ngIf=\"options$ | async as protos\">\n      <mat-selection-list #listServices (selectionChange)=\"selectAll($event)\">\n        <mat-list-option *ngIf=\"protos.length\">All</mat-list-option>\n        <mat-list-option *ngFor=\"let proto of protos\" [value]=\"proto\">\n          {{ proto.name }}\n        </mat-list-option>\n      </mat-selection-list>\n      <app-add-controls *ngIf=\"protos.length; else not\" [title]=\"'Add'\" [disabled]=\"!form.valid\" (cancel)=\"onCancel()\" (save)=\"save()\"></app-add-controls>\n    </ng-container>\n    <ng-template #not>\n      <p>\n        <i>\n          There are no new services. You cluster already has all of them.\n        </i>\n      </p>\n    </ng-template>\n  `\n})\nexport class ServiceComponent extends BaseFormDirective implements OnInit {\n  options$: Observable<SelectOption[]>;\n  @ViewChild('listServices')\n  private listServices: MatSelectionList;\n\n  ngOnInit() {\n    this.options$ = this.service.getProtoServiceForCurrentCluster();\n  }\n\n\n  selectAll(e: MatSelectionListChange) {\n    if (!e.option.value) {\n      if (e.option.selected) this.listServices.selectAll();\n      else this.listServices.deselectAll();\n    }\n  }\n\n  save() {\n    const result = this.listServices.selectedOptions.selected.filter(a => a.value).map(a => ({ prototype_id: +a.value.id }));\n    this.service\n      .addService(result)\n      .pipe(this.takeUntil())\n      .subscribe(() => this.dialog.closeAll());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "BaseFormDirective",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ServiceComponentDetailsComponent",
            "id": "component-ServiceComponentDetailsComponent-c7897d1dd368093f90b7f0253788dd97",
            "file": "src/app/components/service-component/service-component-details/service-component-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-component-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'servicecomponent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.ServiceComponent, 'component'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'component'),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { ServiceComponentService } from '@app/services/service-component.service';\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { IServiceComponent } from '@app/models/service-component';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-service-component-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class ServiceComponentDetailsComponent extends DetailAbstractDirective<IServiceComponent> {\n\n  entityParam = 'servicecomponent';\n\n  leftMenu = [\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.ServiceComponent, 'component'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'component'),\n  ];\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: ServiceComponentService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "ServiceComponentsComponent",
            "id": "component-ServiceComponentsComponent-44b8d9f4e68707a23a5df732d83c7c26",
            "file": "src/app/components/service-component/service-components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-components",
            "styleUrls": [],
            "styles": [
                "\n    :host { flex: 1; }\n  "
            ],
            "template": "<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventTypes",
                    "defaultValue": "[ConcernEventType.ServiceComponent]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.nameColumn('display_name'),\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.configColumn(this),\n  ] as IColumns<any>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "type",
                    "defaultValue": "'servicecomponent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { IColumns } from '@adwp-ui/widgets';\nimport { Component } from '@angular/core';\n\nimport { TypeName } from '@app/core/types';\nimport { ListFactory } from '@app/factories/list.factory';\nimport { ConcernListDirective } from '@app/abstract-directives/concern-list.directive';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-service-components',\n  template: `\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [`\n    :host { flex: 1; }\n  `],\n})\nexport class ServiceComponentsComponent extends ConcernListDirective<any> {\n\n  type: TypeName = 'servicecomponent';\n  eventTypes = [ConcernEventType.ServiceComponent];\n\n  listColumns = [\n    ListFactory.nameColumn('display_name'),\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.configColumn(this),\n  ] as IColumns<any>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host { flex: 1; }\n  \n",
            "extends": "ConcernListDirective"
        },
        {
            "name": "ServiceComponentStatusComponent",
            "id": "component-ServiceComponentStatusComponent-c5083b2c8a72cc4f2994a4172e50993c",
            "file": "src/app/components/service-component/service-component-status/service-component-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-component-status",
            "styleUrls": [
                "../../../styles/status-tree.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/status-tree.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServiceComponentService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "folding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Folding",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "statusTree",
                    "defaultValue": "new BehaviorSubject<StatusTreeType>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree', {static: false}"
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "eventReceived",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "getEntityIdFromParams",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "pipeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "expandCollapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTreeType",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { fromJS, updateIn } from 'immutable';\n\nimport { StatusAbstractDirective } from '@app/abstract-directives/status.abstract.directive';\nimport { HostComponentStatusTree } from '@app/models/status-tree';\nimport { EventMessage, SocketState } from '@app/core/store';\nimport { ServiceComponentService } from '@app/services/service-component.service';\nimport { IServiceComponent } from '@app/models/service-component';\n\n@Component({\n  selector: 'app-service-component-status',\n  templateUrl: '../../../templates/status-tree.html',\n  styleUrls: ['../../../styles/status-tree.scss']\n})\nexport class ServiceComponentStatusComponent extends StatusAbstractDirective<HostComponentStatusTree, IServiceComponent> {\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected store: Store<SocketState>,\n    public entityService: ServiceComponentService,\n  ) {\n    super(route, store, entityService);\n  }\n\n  pipeData(): any {\n    return this.entity.cluster_id;\n  }\n\n  eventReceived(event: EventMessage) {\n    let output;\n    switch (event.object.type) {\n      case 'hostcomponent':\n        const componentId = this.statusTree.value.id;\n        output = updateIn(fromJS(this.statusTree.value), ['hosts'], (hosts: any[]) =>\n          hosts.map(host => {\n            if (host.get('id') === event.object.id && componentId === +event.object.details.id) {\n              return host.set('status', +event.object.details.value);\n            }\n            return host;\n          })\n        );\n        this.statusTree.next(output.toJS() as any as HostComponentStatusTree);\n        break;\n      case 'component':\n        output = fromJS(this.statusTree.value);\n        if (output.get('id') === event.object.id) {\n          output = output.set('status', +event.object.details.value);\n        }\n        this.statusTree.next(output.toJS() as any as HostComponentStatusTree);\n        break;\n    }\n  }\n\n  getEntityIdFromParams(): number {\n    return +this.route.parent.snapshot.params.servicecomponent;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n}\n\n.controls {\n  position: fixed;\n  top: 130px;\n  right: 10px;\n\n  .notify {\n    opacity: 0;\n\n    &>span {\n      line-height: 24px;\n      vertical-align: text-bottom;\n    }\n  }\n}\n",
                    "styleUrl": "../../../styles/status-tree.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entityService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityService",
                        "type": "ServiceComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "StatusAbstractDirective",
            "templateData": "<ng-container *ngIf=\"loading; else loaded\">\n  <p>Loading...</p>\n</ng-container>\n\n<ng-template #loaded>\n\n  <div class=\"controls\">\n    <button mat-raised-button color=\"primary\" (click)=\"expandCollapseAll()\">Expand/Collapse All</button>\n  </div>\n\n  <app-status-tree\n    [tree]=\"statusTree | async | entityStatusToStatusTree : entityService : pipeData()\"\n    [folding]=\"folding\"\n    #tree\n  ></app-status-tree>\n\n</ng-template>\n"
        },
        {
            "name": "ServiceDetailsComponent",
            "id": "component-ServiceDetailsComponent-606faf1f579ac48a28130e600e925f72",
            "file": "src/app/components/service/service-details/service-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-details",
            "styleUrls": [
                "../../../styles/details.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/details.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityParam",
                    "defaultValue": "'service'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "leftMenu",
                    "defaultValue": "[\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Components', 'component', 'host-component', ConcernEventType.Service, 'service'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.Service, 'service'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'service'),\n    DetailsFactory.concernMenuItem('Import', 'import', 'import', ConcernEventType.Service, 'service'),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "subjectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityService<EntityType>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        125
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "entityReceived",
                    "args": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "EntityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DetailAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { DetailAbstractDirective } from '@app/abstract-directives/detail.abstract.directive';\nimport { Service } from '@app/core/types';\nimport { SocketState } from '@app/core/store';\nimport { ClusterService } from '@app/core/services/cluster.service';\nimport { ChannelService } from '@app/core/services';\nimport { ServiceService } from '@app/services/service.service';\nimport { DetailsFactory } from '@app/factories/details.factory';\nimport { ConcernEventType } from '@app/models/concern/concern-reason';\n\n@Component({\n  selector: 'app-service-details',\n  templateUrl: '../../../templates/details.html',\n  styleUrls: ['../../../styles/details.scss']\n})\nexport class ServiceDetailsComponent extends DetailAbstractDirective<Service> {\n\n  entityParam = 'service';\n\n  leftMenu = [\n    DetailsFactory.labelMenuItem('Main', 'main'),\n    DetailsFactory.concernMenuItem('Components', 'component', 'host-component', ConcernEventType.Service, 'service'),\n    DetailsFactory.concernMenuItem('Configuration', 'config', 'config', ConcernEventType.Service, 'service'),\n    DetailsFactory.labelMenuItem('Configuration groups', 'group_config'),\n    DetailsFactory.statusMenuItem('Status', 'status', 'service'),\n    DetailsFactory.concernMenuItem('Import', 'import', 'import', ConcernEventType.Service, 'service'),\n  ];\n\n  constructor(\n    socket: Store<SocketState>,\n    protected route: ActivatedRoute,\n    protected service: ClusterService,\n    protected channel: ChannelService,\n    protected store: Store,\n    injector: Injector,\n    protected subjectService: ServiceService,\n  ) {\n    super(socket, route, service, channel, store, injector);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/@angular/material/theming\";\n\n:host {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\nmat-drawer {\n  min-width: 240px;\n  background-color: transparent;\n  padding-left: 10px;\n}\n\n.mat-card {\n  flex: 1;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n\n  & .mat-card-header {\n    min-height: 40px;\n    padding: 6px 10px 0;\n\n    & .mat-card-title {\n      font-size: 26px;\n    }\n  }\n\n  .mat-card-content {\n    display: flex;\n    flex: 1;\n    overflow: auto;\n  }\n}\n\n.mat-toolbar {\n  height: auto;\n  min-height: 50px;\n}\n\n.issue-warning {\n  width: 40px;\n  height: 40px;\n  position: relative;\n  cursor: pointer;\n\n  .mat-icon {\n    margin: 8px 0 0 8px;\n  }\n\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    background: mat-color($mat-orange, 500);\n    border-radius: 20px;\n    top: 0;\n    opacity: 0;\n    animation: ripple 2s infinite ease-in-out;\n  }\n}\n\n\n@keyframes ripple {\n  0% {\n    opacity: .5;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n",
                    "styleUrl": "../../../styles/details.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "ServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ClusterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "ServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DetailAbstractDirective",
            "templateData": "<mat-toolbar>\n\n  <app-navigation\n    [path]=\"navigationPath\"\n    (refresh)=\"refresh($event)\"\n  ></app-navigation>\n\n</mat-toolbar>\n\n<mat-drawer-container [style.flex]=\"1\" autosize>\n  <mat-drawer disableClose=\"true\" mode=\"side\" opened>\n    <app-left-menu [leftMenu]=\"leftMenu\" [entity]=\"entity\"></app-left-menu>\n  </mat-drawer>\n  <mat-drawer-content [style.display]=\"'flex'\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>\n          {{ currentName }}\n        </mat-card-title>\n        <mat-card-subtitle>\n          <app-details-subtitle [current]=\"current\"></app-details-subtitle>\n        </mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content appScroll (read)=\"scroll($event)\" *ngIf=\"current\">\n        <router-outlet></router-outlet>\n      </mat-card-content>\n    </mat-card>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "ServiceHostComponent",
            "id": "component-ServiceHostComponent-4037fbad8829475aec2c39d891679afa",
            "file": "src/app/shared/host-components-map/services2hosts/service-host.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-host",
            "styleUrls": [
                "./service-host.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./service-host.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "IActionParameter[]"
                },
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "literal type"
                },
                {
                    "name": "fixedButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "fixed position buttons for the scrolling",
                    "description": "<p>fixed position buttons for the scrolling</p>\n",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "hideButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "hide Save button",
                    "description": "<p>hide Save button</p>\n",
                    "line": 54,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "saveResult",
                    "defaultValue": "new EventEmitter<Post[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "initFlag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "loadPost",
                    "defaultValue": "new StatePost()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "saveFlag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "scrollEventData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TakeService",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showSpinner",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "sourceMap",
                    "defaultValue": "new Map<string, Tile[]>([\n    ['host', []],\n    ['compo', []],\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "statePost",
                    "defaultValue": "new StatePost()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "socket$",
                    "defaultValue": "this.socket.pipe(this.takeUntil(), select(getMessage), filter(m => !!m && !!m.object))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "SocketListenerDirective"
                    }
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "io",
                            "type": "IEMObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "io",
                            "type": "IEMObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearHostFromService",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearServiceFromHost",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "raw",
                            "type": "IRawHosComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "raw",
                            "type": "IRawHosComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "io",
                            "type": "IEMObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nhost only",
                    "description": "<p>host only</p>\n",
                    "jsdoctags": [
                        {
                            "name": "io",
                            "type": "IEMObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectHost",
                    "args": [
                        {
                            "name": "host",
                            "type": "HostTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "host",
                            "type": "HostTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectService",
                    "args": [
                        {
                            "name": "component",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "CompTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "socketListener",
                    "args": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SocketListenerDirective"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "em",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "em",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "startListenSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SocketListenerDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ChannelService } from '@app/core/services';\nimport { keyChannelStrim } from '@app/core/services';\nimport { EventMessage, IEMObject, SocketState } from '@app/core/store';\nimport { IActionParameter } from '@app/core/types';\nimport { Store } from '@ngrx/store';\n\nimport { SocketListenerDirective } from '@app/shared/directives';\nimport { getSelected, TakeService } from '../take.service';\nimport { CompTile, HostTile, IRawHosComponent, Post, StatePost, Tile } from '../types';\n\n@Component({\n  selector: 'app-service-host',\n  templateUrl: './service-host.component.html',\n  styleUrls: ['./service-host.component.scss'],\n})\nexport class ServiceHostComponent extends SocketListenerDirective implements OnInit {\n  showSpinner = false;\n\n  statePost = new StatePost();\n  loadPost = new StatePost();\n  sourceMap = new Map<string, Tile[]>([\n    ['host', []],\n    ['compo', []],\n  ]);\n\n  form = new FormGroup({});\n\n  @Input()\n  cluster: { id: number; hostcomponent: string };\n\n  /**\n   * fixed position buttons for the scrolling\n   */\n  @Input()\n  fixedButton = true;\n\n  /**\n   * hide Save button\n   */\n  @Input()\n  hideButton = false;\n\n  @Input()\n  actionParameters: IActionParameter[];\n\n  @Output() saveResult = new EventEmitter<Post[]>();\n\n  saveFlag = false;\n  initFlag = false;\n\n  scrollEventData: { direct: 1 | -1 | 0; scrollTop: number };\n\n  get Hosts(): HostTile[] {\n    return this.sourceMap.get('host');\n  }\n\n  set Hosts(v: HostTile[]) {\n    this.sourceMap.set('host', v);\n  }\n\n  get Components(): CompTile[] {\n    return this.sourceMap.get('compo') as CompTile[];\n  }\n\n  set Components(v: CompTile[]) {\n    this.sourceMap.set('compo', v);\n  }\n\n  constructor(public service: TakeService, private channel: ChannelService, socket: Store<SocketState>) {\n    super(socket);\n  }\n\n  public get noValid() {\n    return /*!!this.service.countConstraint */ !this.form.valid || !this.statePost.data.length;\n  }\n\n  ngOnInit() {\n    this.load();\n    super.startListenSocket();\n\n    this.channel\n      .on(keyChannelStrim.scroll)\n      .pipe(this.takeUntil())\n      .subscribe((e) => (this.scrollEventData = e));\n  }\n\n  socketListener(m: EventMessage) {\n    const isCurrent = (type: string, id: number) => type === 'cluster' && id === this.cluster.id;\n    if (\n      (m.event === 'change_hostcomponentmap' || m.event === 'change_state') &&\n      isCurrent(m.object.type, m.object.id) &&\n      !this.saveFlag\n    ) {\n      this.reset().load();\n    }\n    if ((m.event === 'add' || m.event === 'remove') && isCurrent(m.object.details.type, +m.object.details.value))\n      this.update(m);\n  }\n\n  reset() {\n    this.Hosts = [];\n    this.Components = [];\n    this.statePost.clear();\n    this.loadPost.clear();\n    this.form = new FormGroup({});\n    return this;\n  }\n\n  update(em: EventMessage) {\n    if (em.event === 'add') this.add(em.object);\n    if (em.event === 'remove') this.remove(em.object);\n  }\n\n  add(io: IEMObject) {\n    const { id, type, details } = io;\n    if (details.type === 'cluster' && +details.value === this.cluster.id) {\n      this.service\n        .load(this.cluster.hostcomponent)\n        .pipe(this.takeUntil())\n        .subscribe((raw: IRawHosComponent) => {\n          if (type === 'host')\n            this.Hosts = [\n              ...this.Hosts,\n              ...this.service.fillHost(\n                raw.host.map((h) => new HostTile(h)).filter((h) => h.id === id),\n                this.actionParameters\n              ),\n            ];\n          if (type === 'service')\n            this.Components = [\n              ...this.Components,\n              ...this.service.fillComponent(\n                raw.component.filter((a) => a.service_id === id && this.Components.every((b) => b.id !== a.id)),\n                this.actionParameters\n              ),\n            ];\n        });\n    }\n  }\n\n  /** host only */\n  remove(io: IEMObject) {\n    if (io.type === 'host') {\n      const { id } = io;\n      this.Hosts = this.Hosts.filter((a) => a.id !== id);\n    }\n  }\n\n  load() {\n    if (this.cluster) {\n      if (this.initFlag) return;\n      this.initFlag = true;\n\n      this.service\n        .load(this.cluster.hostcomponent)\n        .pipe(this.takeUntil())\n        .subscribe((raw: IRawHosComponent) => this.init(raw));\n    }\n  }\n\n  init(raw: IRawHosComponent) {\n    if (raw.host) this.Hosts = raw.host.map((h) => new HostTile(h));\n\n    if (raw.component)\n      this.Components = [...this.Components, ...this.service.fillComponent(raw.component, this.actionParameters)];\n\n    if (raw.hc) {\n      this.initFlag = false;\n      this.statePost.update(raw.hc);\n      this.loadPost.update(raw.hc);\n      this.service.setRelations(raw.hc, this.Components, this.Hosts, this.actionParameters);\n      this.service.fillHost(this.Hosts, this.actionParameters);\n    }\n    this.service.formFill(this.Components, this.Hosts, this.form);\n  }\n\n  clearServiceFromHost(data: { relation: CompTile; model: HostTile }) {\n    this.service.divorce([data.relation, data.model], this.Components, this.Hosts, this.statePost, this.form);\n  }\n\n  clearHostFromService(data: { relation: HostTile; model: CompTile }) {\n    this.service.divorce([data.model, data.relation], this.Components, this.Hosts, this.statePost, this.form);\n  }\n\n  selectHost(host: HostTile) {\n    const stream = {\n      linkSource: this.Components,\n      link: getSelected(this.Components),\n      selected: getSelected(this.Hosts),\n    };\n    this.service.next(host, stream, this.Components, this.Hosts, this.statePost, this.loadPost, this.form);\n  }\n\n  selectService(component: CompTile) {\n    const stream = {\n      linkSource: this.Hosts,\n      link: getSelected(this.Hosts),\n      selected: getSelected(this.Components),\n    };\n    this.service.next(component, stream, this.Components, this.Hosts, this.statePost, this.loadPost, this.form);\n  }\n\n  save() {\n    this.saveFlag = true;\n    const { id, hostcomponent } = this.cluster;\n    this.service.save(id, hostcomponent, this.statePost.data).subscribe((data) => {\n      this.loadPost.update(data);\n      this.statePost.update(data);\n      this.saveResult.emit(data);\n      this.saveFlag = false;\n      this.channel.next(keyChannelStrim.notifying, 'Successfully saved.');\n    });\n  }\n\n  restore() {\n    const ma = (a: Tile): void => {\n      a.isSelected = false;\n      a.isLink = false;\n      a.relations = [];\n    };\n\n    this.Hosts.forEach(ma);\n    this.Components.forEach(ma);\n\n    this.statePost.clear();\n    this.statePost.update(this.loadPost.data);\n\n    this.service.setRelations(this.loadPost.data, this.Components, this.Hosts, this.actionParameters);\n    this.form = new FormGroup({});\n    this.service.formFill(this.Components, this.Hosts, this.form);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".holder {\n  display: flex;\n  justify-content: space-around;\n  margin: 10px 0;\n\n\n  h3 {\n    margin: 10px;\n    line-height: 40px;\n    display: flex;\n\n    .slide-toggle {\n      margin-left: 20px;\n    }\n  }\n\n  div {\n    padding: 6px;\n    flex: 1 0 auto;\n    margin: 0 10px;\n  }\n}\n\np {\n  padding-right: 40px;\n  text-align: right;\n}\n\n.wrapper {\n  overflow: auto;\n  transition-property: margin-top;\n  transition-duration: .5s;\n  transition-timing-function: ease-out-cubic;\n  margin-top: 0px;\n}\n\n.link {\n  font-size: 1em;\n}\n\n.controls {\n  top: 130px;\n  right: 80px;\n\n  .notify {\n    opacity: 0;\n\n    &>span {\n      line-height: 24px;\n      vertical-align: text-bottom;\n    }\n  }\n}\n",
                    "styleUrl": "./service-host.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "TakeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "TakeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "channel",
                        "type": "ChannelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socket",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "SocketListenerDirective",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "Hosts": {
                    "name": "Hosts",
                    "setSignature": {
                        "name": "Hosts",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "HostTile[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "HostTile[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "Hosts",
                        "type": "[]",
                        "returnType": "HostTile[]",
                        "line": 66
                    }
                },
                "Components": {
                    "name": "Components",
                    "setSignature": {
                        "name": "Components",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "CompTile[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 78,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "CompTile[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "Components",
                        "type": "[]",
                        "returnType": "CompTile[]",
                        "line": 74
                    }
                },
                "noValid": {
                    "name": "noValid",
                    "getSignature": {
                        "name": "noValid",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                }
            },
            "templateData": "<div class=\"controls\" [ngStyle]=\"{'position': fixedButton ? 'fixed': 'initial'}\">\n  <button mat-raised-button color=\"primary\" (click)=\"restore()\">Restore</button>\n  <button [disabled]=\"noValid\" mat-raised-button color=\"accent\" (click)=\"save()\" *ngIf=\"!hideButton\">Save</button>\n</div>\n\n<div class=\"holder\" [appHolder]=\"scrollEventData\">\n  <div>\n    <h3><span>Components</span></h3>\n    <div class=\"wrapper\">\n      <div *ngIf=\"!Components?.length\">\n        Add services on the <a [routerLink]=\"['/cluster', cluster?.id, 'service']\">services page.</a>\n      </div>\n      <app-much-2-many *ngFor=\"let service of Components\" [model]=\"service\" [form]=\"form\"\n        (clickToTitleEvt)=\"selectService($event)\" (clearRelationEvt)=\"clearHostFromService($event)\">\n      </app-much-2-many>\n    </div>\n  </div>\n  <div>\n    <h3><span>Hosts</span>\n      <app-add-button [name]=\"'host2cluster'\" [asIcon]=\"true\" [style.lineHeight.px]=\"16\"></app-add-button>\n    </h3>\n    <div class=\"wrapper\">\n      <div *ngIf=\"!Hosts?.length\">\n        Add hosts on the <a [routerLink]=\"['/cluster', cluster?.id, 'host']\">hosts page.</a>\n      </div>\n      <app-much-2-many *ngFor=\"let host of Hosts\" [model]=\"host\" [form]=\"form\" (clickToTitleEvt)=\"selectHost($event)\"\n        (clearRelationEvt)=\"clearServiceFromHost($event)\">\n      </app-much-2-many>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ServicesComponent",
            "id": "component-ServicesComponent-c8be3c53591d2994e00e9662997bcc40",
            "file": "src/app/components/cluster/services/services.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-services",
            "styleUrls": [],
            "styles": [
                ":host { flex: 1; }",
                ".add-button {position:fixed; right: 20px;top:120px;}"
            ],
            "template": "<app-add-button [name]=\"'service'\" class=\"add-button\">Add services</app-add-button>\n\n<adwp-list\n  [columns]=\"listColumns\"\n  [dataSource]=\"data$ | async\"\n  [paging]=\"paging | async\"\n  [sort]=\"sorting | async\"\n  [defaultSort]=\"defaultSort\"\n  [currentId]=\"current ? current.id : undefined\"\n  (clickRow)=\"clickRow($event)\"\n  (auxclickRow)=\"auxclickRow($event)\"\n  (changePaging)=\"onChangePaging($event)\"\n  (changeSort)=\"onChangeSort($event)\"\n></adwp-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventTypes",
                    "defaultValue": "[ConcernEventType.Service]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    ListFactory.nameColumn('display_name'),\n    {\n      label: 'Version',\n      value: (row) => row.version,\n    },\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.importColumn(this),\n    ListFactory.configColumn(this),\n  ] as IColumns<IClusterService>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "type",
                    "defaultValue": "'service2cluster'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ConcernListDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IColumns } from '@adwp-ui/widgets';\n\nimport { TypeName } from '@app/core/types';\nimport { ListFactory } from '../../../factories/list.factory';\nimport { IClusterService } from '@app/models/cluster-service';\nimport { ConcernListDirective } from '@app/abstract-directives/concern-list.directive';\nimport { ConcernEventType } from '../../../models/concern/concern-reason';\n\n@Component({\n  selector: 'app-services',\n  template: `\n    <app-add-button [name]=\"'service'\" class=\"add-button\">Add services</app-add-button>\n\n    <adwp-list\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [paging]=\"paging | async\"\n      [sort]=\"sorting | async\"\n      [defaultSort]=\"defaultSort\"\n      [currentId]=\"current ? current.id : undefined\"\n      (clickRow)=\"clickRow($event)\"\n      (auxclickRow)=\"auxclickRow($event)\"\n      (changePaging)=\"onChangePaging($event)\"\n      (changeSort)=\"onChangeSort($event)\"\n    ></adwp-list>\n  `,\n  styles: [':host { flex: 1; }', '.add-button {position:fixed; right: 20px;top:120px;}'],\n})\nexport class ServicesComponent extends ConcernListDirective<IClusterService> {\n\n  type: TypeName = 'service2cluster';\n  eventTypes = [ConcernEventType.Service];\n\n  listColumns = [\n    ListFactory.nameColumn('display_name'),\n    {\n      label: 'Version',\n      value: (row) => row.version,\n    },\n    ListFactory.stateColumn(),\n    ListFactory.statusColumn(this),\n    ListFactory.actionsButton(this),\n    ListFactory.importColumn(this),\n    ListFactory.configColumn(this),\n  ] as IColumns<IClusterService>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { flex: 1; }\n.add-button {position:fixed; right: 20px;top:120px;}\n",
            "extends": "ConcernListDirective"
        },
        {
            "name": "ServiceStatusComponent",
            "id": "component-ServiceStatusComponent-8f5f1a718b179237de4bf580d5ec8631",
            "file": "src/app/components/service/service-status/service-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-status",
            "styleUrls": [
                "../../../styles/status-tree.scss"
            ],
            "styles": [],
            "templateUrl": [
                "../../../templates/status-tree.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "entityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServiceService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "folding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Folding",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "statusTree",
                    "defaultValue": "new BehaviorSubject<StatusTreeType>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree', {static: false}"
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "eventReceived",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "getEntityIdFromParams",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "pipeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "expandCollapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                },
                {
                    "name": "prepareStatusTree",
                    "args": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusTreeType",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "StatusTreeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StatusAbstractDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { fromJS, updateIn } from 'immutable';\n\nimport { StatusAbstractDirective } from '@app/abstract-directives/status.abstract.directive';\nimport { EventMessage, SocketState } from '@app/core/store';\nimport { ServiceService } from '@app/services/service.service';\nimport { ServiceStatusTree } from '@app/models/status-tree';\nimport { Service } from '@app/core/types';\n\n@Component({\n  selector: 'app-service-status',\n  templateUrl: '../../../templates/status-tree.html',\n  styleUrls: ['../../../styles/status-tree.scss']\n})\nexport class ServiceStatusComponent extends StatusAbstractDirective<ServiceStatusTree, Service> {\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected store: Store<SocketState>,\n    public entityService: ServiceService,\n  ) {\n    super(route, store, entityService);\n  }\n\n  pipeData(): any {\n    return this.entity.cluster_id;\n  }\n\n  eventReceived(event: EventMessage) {\n    let output;\n    switch (event.object.type) {\n      case 'hostcomponent':\n        output = updateIn(fromJS(this.statusTree.value), ['hc'], (components: any[]) =>\n          components.map(component => updateIn(component, ['hosts'], (hosts: any[]) =>\n            hosts.map((host: any) => {\n              if (host.get('id') === event.object.id && component.get('id') === +event.object.details.id) {\n                return host.set('status', +event.object.details.value);\n              }\n              return host;\n            })\n          ))\n        );\n        this.statusTree.next(output.toJS() as any as ServiceStatusTree);\n        break;\n      case 'component':\n        output = updateIn(fromJS(this.statusTree.value), ['hc'], (components: any[]) =>\n          components.map(component => {\n            if (component.get('id') === event.object.id) {\n              return component.set('status', +event.object.details.value);\n            }\n            return component;\n          })\n        );\n        this.statusTree.next(output.toJS() as any as ServiceStatusTree);\n        break;\n      case 'service':\n        output = fromJS(this.statusTree.value);\n        if (output.get('id') === event.object.id) {\n          output = output.set('status', +event.object.details.value);\n        }\n        this.statusTree.next(output.toJS() as any as ServiceStatusTree);\n        break;\n    }\n  }\n\n  getEntityIdFromParams(): number {\n    return +this.route.parent.snapshot.params.service;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n}\n\n.controls {\n  position: fixed;\n  top: 130px;\n  right: 10px;\n\n  .notify {\n    opacity: 0;\n\n    &>span {\n      line-height: 24px;\n      vertical-align: text-bottom;\n    }\n  }\n}\n",
                    "styleUrl": "../../../styles/status-tree.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entityService",
                        "type": "ServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityService",
                        "type": "ServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "StatusAbstractDirective",
            "templateData": "<ng-container *ngIf=\"loading; else loaded\">\n  <p>Loading...</p>\n</ng-container>\n\n<ng-template #loaded>\n\n  <div class=\"controls\">\n    <button mat-raised-button color=\"primary\" (click)=\"expandCollapseAll()\">Expand/Collapse All</button>\n  </div>\n\n  <app-status-tree\n    [tree]=\"statusTree | async | entityStatusToStatusTree : entityService : pipeData()\"\n    [folding]=\"folding\"\n    #tree\n  ></app-status-tree>\n\n</ng-template>\n"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-72857ee1013912372108b00169e6acb3",
            "file": "src/app/admin/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings",
            "styleUrls": [],
            "styles": [
                ":host {flex:1; display: flex;}"
            ],
            "template": "<app-config-form *ngIf=\"set$ | async as set\" [configUrl]=\"set.config\" (event)=\"onEvent($event)\"></app-config-form>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "set$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEvent",
                    "args": [
                        {
                            "name": "e",
                            "type": "DynamicEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "DynamicEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { ApiService } from '@app/core/api';\nimport { settingsSave, State } from '@app/core/store';\nimport { BaseEntity } from '@app/core/types/api';\nimport { DynamicEvent } from '@app/shared/directives';\n\n@Component({\n  selector: 'app-settings',\n  template: '<app-config-form *ngIf=\"set$ | async as set\" [configUrl]=\"set.config\" (event)=\"onEvent($event)\"></app-config-form>',\n  styles: [':host {flex:1; display: flex;}'],\n})\nexport class SettingsComponent implements OnInit {\n  set$: Observable<any>;\n\n  constructor(private api: ApiService, private store: Store<State>) {}\n\n  ngOnInit() {\n    this.set$ = this.api.root.pipe(\n      switchMap((root) => this.api.get<BaseEntity>(root.adcm)),\n      map((adcm) => adcm[0]),\n    );\n  }\n\n  onEvent(e: DynamicEvent) {\n    if (e.name === 'send') this.store.dispatch(settingsSave({ isSet: true }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {flex:1; display: flex;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SimpleTextComponent",
            "id": "component-SimpleTextComponent-a70b027f8ca1cb2ef7bd433cd939cbfc",
            "file": "src/app/shared/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-simple-text",
            "styleUrls": [],
            "styles": [],
            "template": "{{ current }}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  Type,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseDirective } from '@app/shared/directives';\nimport { delay } from 'rxjs/operators';\n\nimport { IssueInfoComponent } from '../issue-info.component';\nimport { StatusInfoComponent } from '../status-info.component';\nimport { ComponentData, TooltipOptions, TooltipService } from './tooltip.service';\n\nconst POSITION_MARGIN = 16;\n\n@Component({\n  selector: 'app-simple-text',\n  template: '{{ current }}',\n})\nexport class SimpleTextComponent implements OnInit {\n  @Input() current: any;\n  constructor(private componentData: ComponentData) {}\n  ngOnInit(): void {\n    this.current = this.current || this.componentData.current;\n    this.componentData.emitter.emit('Done');\n  }\n}\n\nconst kit = { issue: IssueInfoComponent, status: StatusInfoComponent };\n@Component({\n  selector: 'app-tooltip',\n  template: '<ng-container *ngComponentOutlet=\"CurrentComponent; injector: componentInjector\"></ng-container>',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class TooltipComponent extends BaseDirective implements OnInit, OnDestroy {\n  private options: TooltipOptions;\n  source: HTMLElement;\n\n  CurrentComponent: Type<SimpleTextComponent | IssueInfoComponent | StatusInfoComponent>;\n  componentInjector: Injector;\n\n  constructor(\n    private el: ElementRef,\n    private service: TooltipService,\n    private renderer: Renderer2,\n    private router: Router,\n    private parentInjector: Injector\n  ) {\n    super();\n  }\n\n  @HostListener('mouseenter', ['$event']) menter() {\n    this.service.mouseEnterTooltip();\n  }\n\n  @HostListener('mouseleave') mleave() {\n    this.service.mouseLeaveTooltip();\n  }\n\n  ngOnInit(): void {\n    this.service.position$.pipe(this.takeUntil()).subscribe((o) => {\n      if (o) {\n        this.clear();\n        this.buildComponent(o);\n      } else this.hide();\n    });\n  }\n\n  hide() {\n    this.renderer.setAttribute(this.el.nativeElement, 'style', `opacity: 0; height: auto;`);\n    this.clear();\n  }\n\n  clear() {\n    if (this.source) {\n      this.source = null;\n      this.CurrentComponent = null;\n    }\n  }\n\n  position() {\n    const o = this.options;\n    const el = this.el.nativeElement;\n    const root = document.querySelector<HTMLElement>('app-root');\n    const position = { left: 0, top: 0, bottom: 0, right: 0, height: 0 };\n    const offsetParent = (s: HTMLElement) => s.offsetParent as HTMLElement;\n    const offset = (s: HTMLElement) => ({ top: s.offsetTop, left: s.offsetLeft });\n    const increment = (a: { top: number; left: number }, b: { top: number; left: number }) => ({ top: a.top + b.top, left: a.left + b.left });\n    const offsetSum = (s: HTMLElement) => (offsetParent(s) ? increment(offset(s), offsetSum(offsetParent(s))) : offset(s));\n    const os = offsetSum(o.source);\n    position.top = os.top + o.source.offsetHeight;\n\n    // TODO: maybe let's up tooltip?\n    // this height for tooltip for scrolling\n    position.height = o.event.y > root.offsetHeight - el.offsetHeight ? root.offsetHeight - position.top - POSITION_MARGIN : 0;\n\n    switch (o.options.position) {\n      case 'bottom':\n        if (o.event.x + el.offsetWidth > root.offsetWidth) position.right = POSITION_MARGIN * 2;\n        else position.left = os.left + o.source.clientWidth;\n        break;\n      case 'left':\n        position.left = o.event.x < el.clientWidth ? POSITION_MARGIN * 2 : os.left - el.clientWidth;\n        break;\n    }\n\n    this.renderer.setAttribute(el, 'style', `opacity: .9; ${this.getPositionString(position)}`);\n  }\n\n  getPositionString(po: any) {\n    return Object.keys(po).reduce((p, c) => p + (po[c] ? `${c}: ${po[c]}px;` : ''), '');\n  }\n\n  buildComponent(o: TooltipOptions) {\n    this.options = o;\n    this.source = this.options.source;\n    this.CurrentComponent = kit[this.options.options.componentName] || SimpleTextComponent;\n\n    const emitter = new EventEmitter();\n    emitter.pipe(delay(100), this.takeUntil()).subscribe(() => this.position());\n\n    const parse = (url: string) =>\n      url\n        .split('/')\n        .map((b) => b.split(';')[0])\n        .join('/');\n\n    this.componentInjector = Injector.create({\n      providers: [\n        {\n          provide: ComponentData,\n          useValue: { path: parse(this.router.url), current: this.options.options.content, emitter: emitter },\n        },\n      ],\n      parent: this.parentInjector,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentData",
                        "type": "ComponentData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "componentData",
                        "type": "ComponentData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StateColumnComponent",
            "id": "component-StateColumnComponent-025e88ffd22afc289eb7e093192f4bdc",
            "file": "src/app/components/columns/state-column/state-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-state-column",
            "styleUrls": [
                "./state-column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./state-column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "T"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-state-column',\n  templateUrl: './state-column.component.html',\n  styleUrls: ['./state-column.component.scss']\n})\nexport class StateColumnComponent<T> {\n\n  @Input() row: T;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./state-column.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-icon class=\"icon-locked running\" *ngIf=\"row?.state === 'locked'; else title\">autorenew</mat-icon>\n<ng-template #title>{{ row?.state }}</ng-template>\n"
        },
        {
            "name": "StatusColumnComponent",
            "id": "component-StatusColumnComponent-afb8a8911522db45a368173e82024384",
            "file": "src/app/components/columns/status-column/status-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status-column",
            "styleUrls": [
                "./status-column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status-column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "T"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<StatusData<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickCell",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { AdwpCellComponent } from '@adwp-ui/widgets';\n\nexport interface StatusData<T> {\n  event: MouseEvent;\n  action: string;\n  row: T;\n}\n\n@Component({\n  selector: 'app-status-column',\n  templateUrl: './status-column.component.html',\n  styleUrls: ['./status-column.component.scss']\n})\nexport class StatusColumnComponent<T> implements AdwpCellComponent<T> {\n\n  @Input() row: T;\n\n  @Output() onClick = new EventEmitter<StatusData<T>>();\n\n  clickCell(event: MouseEvent, action: string, row: T): void {\n    this.onClick.emit({ event, action, row });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./status-column.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AdwpCellComponent"
            ],
            "templateData": "<span *ngIf=\"row?.status && row?.status?.length; else icons\" [class]=\"row?.status\">{{ row?.status }}</span>\n<ng-template #icons>\n  <button *ngIf=\"row?.status === 0\" [appForTest]=\"'row_status'\" mat-icon-button color=\"accent\"\n          (click)=\"clickCell($event, 'status', row)\">\n    <mat-icon>check_circle_outline</mat-icon>\n  </button>\n  <button *ngIf=\"row?.status !== 0\" [appForTest]=\"'row_status'\" mat-icon-button color=\"warn\" [appTooltip]=\"row\"\n          [appTooltipComponent]=\"'status'\" [appTooltipPosition]=\"'left'\" (click)=\"clickCell($event, 'status', row)\">\n    <mat-icon>error_outline</mat-icon>\n  </button>\n</ng-template>\n"
        },
        {
            "name": "StatusInfoComponent",
            "id": "component-StatusInfoComponent-0dabaa5d0526105b87aa689d4354120b",
            "file": "src/app/shared/components/status-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status-info",
            "styleUrls": [],
            "styles": [
                "mat-icon {vertical-align: middle;}",
                "a.component {display: block; padding: 6px 8px;}"
            ],
            "template": "<div *ngIf=\"statusInfo$ | async as components\" (click)=\"onClick()\">\n  <ng-container *ngIf=\"!components.length\">Nothing to display</ng-container>\n  <a [routerLink]=\"['/cluster', cluster.id, 'service', c.service_id, 'status']\" *ngFor=\"let c of components\" class=\"component\">\n    {{ (c.display_name || c.name || c.component_display_name || c.component).toUpperCase() }}&nbsp;<ng-container\n      *ngTemplateOutlet=\"status; context: { status: c.status }\"\n    ></ng-container>\n  </a>\n  <ng-template #status let-status=\"status\">\n    <mat-icon *ngIf=\"status === 0\" color=\"accent\">check_circle_outline</mat-icon>\n    <mat-icon *ngIf=\"status !== 0\" color=\"warn\">error_outline</mat-icon>\n  </ng-template>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cluster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICluster",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseEntity",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "statusInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseEntity } from '@app/core/types/api';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, tap, map } from 'rxjs/operators';\n\nimport { StatusService } from './status/status.service';\nimport { ComponentData } from './tooltip/tooltip.service';\nimport { ICluster } from '@app/models/cluster';\n\n@Component({\n  selector: 'app-status-info',\n  template: `\n    <div *ngIf=\"statusInfo$ | async as components\" (click)=\"onClick()\">\n      <ng-container *ngIf=\"!components.length\">Nothing to display</ng-container>\n      <a [routerLink]=\"['/cluster', cluster.id, 'service', c.service_id, 'status']\" *ngFor=\"let c of components\" class=\"component\">\n        {{ (c.display_name || c.name || c.component_display_name || c.component).toUpperCase() }}&nbsp;<ng-container\n          *ngTemplateOutlet=\"status; context: { status: c.status }\"\n        ></ng-container>\n      </a>\n      <ng-template #status let-status=\"status\">\n        <mat-icon *ngIf=\"status === 0\" color=\"accent\">check_circle_outline</mat-icon>\n        <mat-icon *ngIf=\"status !== 0\" color=\"warn\">error_outline</mat-icon>\n      </ng-template>\n    </div>\n  `,\n  styles: ['mat-icon {vertical-align: middle;}', 'a.component {display: block; padding: 6px 8px;}'],\n})\nexport class StatusInfoComponent implements OnInit {\n  path: string;\n  cluster: ICluster;\n  current: BaseEntity;\n  statusInfo$: Observable<any>;\n\n  constructor(private service: StatusService, private componentData: ComponentData) {}\n\n  ngOnInit(): void {\n    this.current = this.current || this.componentData.current;\n    this.path = this.path || this.componentData.path;\n\n    const [name] = this.path.split('/').reverse();\n\n    let req$ = of([]);\n\n    switch (name) {\n      case 'cluster':\n        this.cluster = this.current as ICluster;\n        req$ = this.service.getServiceComponentsByCluster(this.cluster);\n        break;\n      case 'service':\n        req$ = this.service.getClusterById((<any>this.current).cluster_id).pipe(\n          tap((c) => (this.cluster = c)),\n          switchMap((cluster) => this.service.getServiceComponentsByCluster(cluster, this.current.id))\n        );\n        break;\n      case 'host':\n        if ((<any>this.current).cluster_id)\n          req$ = this.service.getClusterById((<any>this.current).cluster_id).pipe(\n            tap((c) => (this.cluster = c)),\n            switchMap((cluster) => this.service.getStatusInfo(cluster.id, cluster.hostcomponent).pipe(map((a) => this.service.getComponentsOnly(a, this.current.id))))\n          );\n        break;\n    }\n\n    this.statusInfo$ = req$.pipe(tap(() => this.componentData.emitter.emit('onLoad')));\n  }\n\n  onClick(): void {\n    this.componentData.emitter.emit('onClose');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "mat-icon {vertical-align: middle;}\na.component {display: block; padding: 6px 8px;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentData",
                        "type": "ComponentData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentData",
                        "type": "ComponentData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StatusMenuItemComponent",
            "id": "component-StatusMenuItemComponent-aa2e7ea9f32f2b5b4a0bd14585209968",
            "file": "src/app/shared/details/left-menu-items/status-menu-item/status-menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status-menu-item",
            "styleUrls": [],
            "styles": [
                "a span { white-space: nowrap; }"
            ],
            "template": "<a mat-list-item\n   [appForTest]=\"'tab_' + link\"\n   [routerLink]=\"link\"\n   routerLinkActive=\"active\"\n>\n  <span>{{ label }}</span>&nbsp;\n  <ng-container *ngIf=\"entity\">\n    <mat-icon [color]=\"entity.status === 0 ? 'accent' : 'warn'\">\n      {{ entity.status === 0 ? 'check_circle_outline' : 'error_outline' }}\n    </mat-icon>\n  </ng-container>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityType",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "MenuItemAbstractDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "listenToStatusChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { MenuItemAbstractDirective } from '@app/abstract-directives/menu-item.abstract.directive';\nimport { BaseEntity } from '@app/core/types';\nimport { selectMessage, SocketState } from '@app/core/store';\n\n@Component({\n  selector: 'app-status-menu-item',\n  template: `\n    <a mat-list-item\n       [appForTest]=\"'tab_' + link\"\n       [routerLink]=\"link\"\n       routerLinkActive=\"active\"\n    >\n      <span>{{ label }}</span>&nbsp;\n      <ng-container *ngIf=\"entity\">\n        <mat-icon [color]=\"entity.status === 0 ? 'accent' : 'warn'\">\n          {{ entity.status === 0 ? 'check_circle_outline' : 'error_outline' }}\n        </mat-icon>\n      </ng-container>\n    </a>\n  `,\n  styles: ['a span { white-space: nowrap; }'],\n})\nexport class StatusMenuItemComponent extends MenuItemAbstractDirective<BaseEntity> {\n\n  @Input() set entity(entity: BaseEntity) {\n    this._entity = entity;\n    this.listenToStatusChanges();\n  }\n  get entity(): BaseEntity {\n    return this._entity;\n  }\n\n  constructor(\n    private store: Store<SocketState>,\n  ) {\n    super();\n  }\n\n  listenToStatusChanges() {\n    this.store.pipe(\n      selectMessage,\n      filter(event => event?.object?.id && this.entity?.id && event.object.id === this.entity.id),\n      filter(event => event?.event === 'change_status'),\n      filter(event => event?.object?.type === this.data.entityType),\n      this.takeUntil(),\n    ).subscribe((event) => this.entity.status = +event.object.details.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "a span { white-space: nowrap; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<SocketState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "MenuItemAbstractDirective",
            "accessors": {
                "entity": {
                    "name": "entity",
                    "setSignature": {
                        "name": "entity",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "entity",
                                "type": "BaseEntity",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "entity",
                                "type": "BaseEntity",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "entity",
                        "type": "",
                        "returnType": "BaseEntity",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "StatusTreeComponent",
            "id": "component-StatusTreeComponent-91f369d83e4defa92ad4e5e0aa366670",
            "file": "src/app/components/status-tree/status-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status-tree",
            "styleUrls": [
                "./status-tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status-tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "folding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": ""
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calcCounts",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTreeFlatDataSource(this.treeControl, this.treeFlattener)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "ownFolding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Folding",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ownTree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusTree[]",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "transformer",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "treeControl",
                    "defaultValue": "new FlatTreeControl<ExampleFlatNode>(\n  node => node.level,\n  node => node.expandable,\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "treeFlattener",
                    "defaultValue": "new MatTreeFlattener(\n    this.transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "treeNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'treeNode', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "expandAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasCollapsed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\n\nimport { StatusTree, StatusTreeSubject } from '@app/models/status-tree';\n\ninterface ExampleFlatNode {\n  expandable: boolean;\n  subject: StatusTreeSubject;\n  level: number;\n}\n\ninterface Counts {\n  total: number;\n  succeed: number;\n}\n\ninterface CountedStatusTree extends StatusTree {\n  counts?: Counts;\n}\n\nexport enum Folding {\n  Collapsed,\n  Expanded,\n}\n\n@Component({\n  selector: 'app-status-tree',\n  templateUrl: './status-tree.component.html',\n  styleUrls: ['./status-tree.component.scss']\n})\nexport class StatusTreeComponent {\n\n  @ViewChild('treeNode', { static: true }) treeNode: any;\n\n  private calcCounts = (children: CountedStatusTree[]): Counts => {\n    return children.reduce((acc: Counts, child: CountedStatusTree) => {\n        acc.total++;\n        if ('status' in child.subject) {\n          if (child.subject.status === 0) {\n            acc.succeed++;\n          }\n        } else {\n          const childrenSucceed = child.children.reduce((accum, item) => item.subject.status === 0 ? accum + 1 : accum, 0);\n          if (childrenSucceed === child.children.length) {\n            acc.succeed++;\n          }\n        }\n        return acc;\n      },\n      { total: 0, succeed: 0 } as Counts,\n    ) as Counts;\n  }\n\n  private transformer = (node: StatusTree, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      subject: node.subject,\n      level: level,\n      counts: node.children ? this.calcCounts(node.children) : { total: 0, succeed: 0 },\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n  node => node.level,\n  node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this.transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  private ownTree: StatusTree[];\n  @Input() set tree(tree: StatusTree[]) {\n    this.ownTree = tree;\n    this.dataSource.data = tree;\n\n    if (this.folding === Folding.Expanded) {\n      this.treeControl.expandAll();\n    }\n\n    if (this.folding === Folding.Collapsed) {\n      this.treeControl.collapseAll();\n    }\n  }\n  get tree(): StatusTree[] {\n    return this.ownTree;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  private ownFolding: Folding;\n  @Input() set folding(folding: Folding) {\n    this.ownFolding = folding;\n    this.tree = this.tree;\n  }\n  get folding(): Folding {\n    return this.ownFolding;\n  }\n\n  expandAll() {\n    this.treeControl.expandAll();\n  }\n\n  collapseAll() {\n    this.treeControl.collapseAll();\n  }\n\n  hasCollapsed(): boolean {\n    for (const item of this.treeControl.dataNodes) {\n      if (!this.treeControl.isExpanded(item)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".expandable {\n  font-weight: bold;\n}\n\n.counts {\n  color: #ff9800;\n}\n\n.success {\n  color: #00e676;\n}\n\nbutton {\n  width: 35px;\n  height: 35px;\n}\n\nmat-tree-node {\n  min-height: 35px;\n}\n",
                    "styleUrl": "./status-tree.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tree": {
                    "name": "tree",
                    "setSignature": {
                        "name": "tree",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "tree",
                                "type": "StatusTree[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "tree",
                                "type": "StatusTree[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tree",
                        "type": "[]",
                        "returnType": "StatusTree[]",
                        "line": 92
                    }
                },
                "folding": {
                    "name": "folding",
                    "setSignature": {
                        "name": "folding",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "folding",
                                "type": "Folding",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "folding",
                                "type": "Folding",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "folding",
                        "type": "",
                        "returnType": "Folding",
                        "line": 103
                    }
                }
            },
            "templateData": "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding #treeNode>\n    <button mat-icon-button disabled></button>\n\n    <ng-container\n      [ngTemplateOutlet]=\"statusNode\"\n      [ngTemplateOutletContext]=\"{ node: node }\"\n    ></ng-container>\n\n  </mat-tree-node>\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n\n    <ng-container\n      [ngTemplateOutlet]=\"statusNode\"\n      [ngTemplateOutletContext]=\"{ node: node }\"\n    ></ng-container>\n\n  </mat-tree-node>\n</mat-tree>\n\n<ng-template #statusNode let-node=\"node\">\n  <ng-container *ngIf=\"node.subject.status !== undefined && node.subject.status !== null\">\n    <mat-icon *ngIf=\"node.subject.status === 0; else failed\" color=\"accent\">check_circle_outline</mat-icon>\n    <ng-template #failed>\n      <mat-icon color=\"warn\">error_outline</mat-icon>\n    </ng-template>\n  </ng-container>\n  &nbsp;\n  <span *ngIf=\"!node.subject.link; else link\" [ngClass]=\"{ expandable: node.expandable }\">{{node.subject.name}}</span>\n  <ng-template #link>\n    <a [ngClass]=\"{ expandable: node.expandable }\"\n       [routerLink]=\"node.subject.id | statusTreeLink : tree : node.subject.link\">\n      {{node.subject.name}}\n    </a>\n  </ng-template>\n  &nbsp;\n  <span\n    *ngIf=\"node.counts.total\"\n    class=\"counts\"\n    [ngClass]=\"{ success: node.counts.succeed === node.counts.total }\"\n  >\n    successful {{node.counts.succeed}}/{{node.counts.total}}\n  </span>\n</ng-template>\n"
        },
        {
            "name": "SubtitleComponent",
            "id": "component-SubtitleComponent-4081fb8524bb32b2e846b6a1c81285ac",
            "file": "src/app/shared/details/subtitle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-details-subtitle",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"cur\">\n  <ng-container *ngIf=\"cur.typeName === 'job'; else link\">\n    <app-task-objects [row]=\"cur\"></app-task-objects>\n  </ng-container>\n  <ng-template #link>\n    <a [routerLink]=\"['/', cur.provider_id ? 'provider' : 'bundle', cur.provider_id || cur.bundle_id || {}]\">\n      {{ cur.prototype_display_name || cur.prototype_name }}\n      {{ cur.prototype_version }}\n    </a>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDetails",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IDetails } from '@app/models/details';\n\n@Component({\n  selector: 'app-details-subtitle',\n  template: `\n    <ng-container *ngIf=\"cur\">\n      <ng-container *ngIf=\"cur.typeName === 'job'; else link\">\n        <app-task-objects [row]=\"cur\"></app-task-objects>\n      </ng-container>\n      <ng-template #link>\n        <a [routerLink]=\"['/', cur.provider_id ? 'provider' : 'bundle', cur.provider_id || cur.bundle_id || {}]\">\n          {{ cur.prototype_display_name || cur.prototype_name }}\n          {{ cur.prototype_version }}\n        </a>\n      </ng-template>\n    </ng-container>\n  `,\n})\nexport class SubtitleComponent {\n  cur: IDetails;\n\n  @Input() set current(c: IDetails) {\n    if (c) {\n      this.cur = c;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "current": {
                    "name": "current",
                    "setSignature": {
                        "name": "current",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "c",
                                "type": "IDetails",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "c",
                                "type": "IDetails",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "SupportComponent",
            "id": "component-SupportComponent-1d9d62db486fa6e7ded9c7d2abbfd5b9",
            "file": "src/app/main/support/support.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-support",
            "styleUrls": [
                "./support.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./support.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-support',\n  templateUrl: './support.component.html',\n  styleUrls: ['./support.component.scss']\n})\nexport class SupportComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./support.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  support works!\n</p>\n"
        },
        {
            "name": "TaskNameComponent",
            "id": "component-TaskNameComponent-ae4563e9e25fed90e46269c10f384aa9",
            "file": "src/app/components/columns/task-name/task-name.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-name",
            "styleUrls": [
                "./task-name.component.scss"
            ],
            "styles": [],
            "template": "<adwp-link-cell\n  *ngIf=\"row.jobs.length === 1; else multi\"\n  [row]=\"row\"\n  [column]=\"linkColumn\"\n></adwp-link-cell>\n<ng-template #multi>\n  <div class=\"multi-title\" (click)=\"toggleExpand(row)\">\n    <span>{{ row.action?.display_name || 'unknown' }}</span>\n    &nbsp;\n    <mat-icon>\n      {{ (expandedTask | async) && (expandedTask | async).id === row.id ? 'expand_less' : 'expand_more' }}\n    </mat-icon>\n  </div>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expandedTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "BehaviorSubject<Task | null>"
                },
                {
                    "name": "toggleExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "function"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "linkColumn",
                    "defaultValue": "{\n    label: '',\n    type: 'link',\n    value: (row) => row.action?.display_name || 'unknown',\n    url: (row) => `/job/${row.jobs[0].id}`,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILinkColumn<Task>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AdwpCellComponent, ILinkColumn } from '@adwp-ui/widgets';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Task } from '@app/core/types';\n\n@Component({\n  selector: 'app-task-name',\n  template: `\n    <adwp-link-cell\n      *ngIf=\"row.jobs.length === 1; else multi\"\n      [row]=\"row\"\n      [column]=\"linkColumn\"\n    ></adwp-link-cell>\n    <ng-template #multi>\n      <div class=\"multi-title\" (click)=\"toggleExpand(row)\">\n        <span>{{ row.action?.display_name || 'unknown' }}</span>\n        &nbsp;\n        <mat-icon>\n          {{ (expandedTask | async) && (expandedTask | async).id === row.id ? 'expand_less' : 'expand_more' }}\n        </mat-icon>\n      </div>\n    </ng-template>\n  `,\n  styleUrls: ['./task-name.component.scss']\n})\nexport class TaskNameComponent implements AdwpCellComponent<Task> {\n\n  row: Task;\n\n  linkColumn: ILinkColumn<Task> = {\n    label: '',\n    type: 'link',\n    value: (row) => row.action?.display_name || 'unknown',\n    url: (row) => `/job/${row.jobs[0].id}`,\n  };\n\n  @Input() expandedTask: BehaviorSubject<Task | null>;\n  @Input() toggleExpand: (row: Task) => void;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}\n\n.multi-title {\n  cursor: pointer;\n}\n\n.mat-icon {\n  vertical-align: middle;\n  font-size: 1.2em;\n  width: auto;\n  height: auto;\n}\n",
                    "styleUrl": "./task-name.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AdwpCellComponent"
            ]
        },
        {
            "name": "TaskObjectsComponent",
            "id": "component-TaskObjectsComponent-b04ce328b0f09e7c11cfcd792a40e970",
            "file": "src/app/components/columns/task-objects/task-objects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-objects",
            "styleUrls": [
                "./task-objects.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-objects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Task"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AdwpCellComponent } from '@adwp-ui/widgets';\n\nimport { Task } from '@app/core/types';\n\n@Component({\n  selector: 'app-task-objects',\n  templateUrl: './task-objects.component.html',\n  styleUrls: ['./task-objects.component.scss']\n})\nexport class TaskObjectsComponent implements AdwpCellComponent<Task> {\n\n  @Input() row: Task;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "adwp-link-cell {\n  display: inline;\n}\n\n:host ::ng-deep adwp-link-cell a {\n  display: inline !important;\n  line-height: 22px;\n}\n",
                    "styleUrl": "./task-objects.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AdwpCellComponent"
            ],
            "templateData": "<ng-container *ngIf=\"row?.objects\">\n  <ng-container *ngFor=\"let obj of (row.objects | sortObjects); last as lastElement\">\n    <adwp-link-cell\n      [row]=\"row\"\n      [column]=\"obj | objectLinkColumn : row\"\n    ></adwp-link-cell>\n    <span *ngIf=\"!lastElement\"> / </span>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "TasksComponent",
            "id": "component-TasksComponent-f8644f5018a92a60bc7e36b2a99a93b1",
            "file": "src/app/entry/task/tasks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tasks",
            "styleUrls": [
                "./tasks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tasks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IListResult<Task>>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "expandedTask",
                    "defaultValue": "new BehaviorSubject<Task | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "JobsComponent",
                    "defaultValue": "JobsComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "jobsTableInstanceTaken",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InstanceTakenFunc<Task>",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "listColumns",
                    "defaultValue": "[\n    {\n      label: '#',\n      value: (row) => row.id,\n      className: 'first-child',\n      headerClassName: 'first-child',\n    },\n    {\n      type: 'component',\n      label: 'Action name',\n      component: TaskNameComponent,\n      instanceTaken: (componentRef: ComponentRef<TaskNameComponent>) => {\n        componentRef.instance.expandedTask = this.expandedTask;\n        componentRef.instance.toggleExpand = (row) => {\n          this.expandedTask.next(\n            this.expandedTask.value && this.expandedTask.value.id === row.id ? null : row\n          );\n        };\n      },\n    },\n    {\n      type: 'component',\n      label: 'Objects',\n      component: TaskObjectsComponent,\n    },\n    {\n      label: 'Start date',\n      value: row => DateHelper.short(row.start_date),\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      label: 'Finish date',\n      value: row => row.status === 'success' || row.status === 'failed' ? DateHelper.short(row.finish_date) : '',\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      type: 'component',\n      label: 'Status',\n      component: TaskStatusColumnComponent,\n      className: 'table-end center status',\n      headerClassName: 'table-end center status',\n    }\n  ] as IColumns<Task>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "paging",
                    "defaultValue": "new BehaviorSubject<Paging>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Paging>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskStatus",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addTask",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTask",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatButtonToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatButtonToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLimit",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initPaging",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "jobChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshList",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "TaskStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IListResult<Task>>",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "TaskStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startListen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ComponentRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { filter, tap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { BaseDirective, IColumns, IListResult, InstanceTakenFunc, Paging } from '@adwp-ui/widgets';\nimport { MatButtonToggleChange } from '@angular/material/button-toggle';\n\nimport { DateHelper } from '@app/helpers/date-helper';\nimport { EventMessage } from '@app/core/store';\nimport { JobStatus, Task, Job } from '@app/core/types';\nimport { TaskObjectsComponent } from '@app/components/columns/task-objects/task-objects.component';\nimport { TaskStatusColumnComponent } from '@app/components/columns/task-status-column/task-status-column.component';\nimport { JobsComponent } from '@app/components/job/jobs/jobs.component';\nimport { TaskNameComponent } from '@app/components/columns/task-name/task-name.component';\nimport { TaskService } from '@app/services/task.service';\nimport { JobService } from '@app/services/job.service';\n\ntype TaskStatus = '' | 'running' | 'success' | 'failed';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.scss'],\n})\nexport class TasksComponent extends BaseDirective implements OnInit {\n\n  JobsComponent = JobsComponent;\n  expandedTask = new BehaviorSubject<Task | null>(null);\n\n  data$: BehaviorSubject<IListResult<Task>> = new BehaviorSubject(null);\n  paging: BehaviorSubject<Paging> = new BehaviorSubject<Paging>(null);\n  status: TaskStatus = '';\n\n  listColumns = [\n    {\n      label: '#',\n      value: (row) => row.id,\n      className: 'first-child',\n      headerClassName: 'first-child',\n    },\n    {\n      type: 'component',\n      label: 'Action name',\n      component: TaskNameComponent,\n      instanceTaken: (componentRef: ComponentRef<TaskNameComponent>) => {\n        componentRef.instance.expandedTask = this.expandedTask;\n        componentRef.instance.toggleExpand = (row) => {\n          this.expandedTask.next(\n            this.expandedTask.value && this.expandedTask.value.id === row.id ? null : row\n          );\n        };\n      },\n    },\n    {\n      type: 'component',\n      label: 'Objects',\n      component: TaskObjectsComponent,\n    },\n    {\n      label: 'Start date',\n      value: row => DateHelper.short(row.start_date),\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      label: 'Finish date',\n      value: row => row.status === 'success' || row.status === 'failed' ? DateHelper.short(row.finish_date) : '',\n      className: 'action_date',\n      headerClassName: 'action_date',\n    },\n    {\n      type: 'component',\n      label: 'Status',\n      component: TaskStatusColumnComponent,\n      className: 'table-end center status',\n      headerClassName: 'table-end center status',\n    }\n  ] as IColumns<Task>;\n\n  jobsTableInstanceTaken: InstanceTakenFunc<Task> = (componentRef: ComponentRef<JobsComponent<Task>>) => {\n    componentRef.instance.expandedTask = this.expandedTask;\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private taskService: TaskService,\n    private jobService: JobService,\n  ) {\n    super();\n  }\n\n  addTask(event: EventMessage): void {\n    if (this.data$.value.results.some((task) => task.id === event.object.id)) {\n      return;\n    }\n\n    const data: IListResult<Task> = Object.assign({}, this.data$.value);\n    this.taskService.get(event.object.id).subscribe((task) => {\n      if (data.results.length < this.paging.value.pageSize) {\n        data.count++;\n      } else {\n        data.results.splice(data.results.length - 1, 1);\n      }\n      data.results = [task, ...data.results];\n      this.data$.next(data);\n    });\n  }\n\n  deleteTask(event: EventMessage): void {\n    const data: IListResult<Task> = Object.assign({}, this.data$.value);\n    const index = data.results.findIndex((task) => task.id === event.object.id);\n    if (index > -1) {\n      data.results.splice(index, 1);\n      data.count--;\n      this.data$.next(data);\n    }\n  }\n\n  changeTask(event: EventMessage): void {\n    const data: IListResult<Task> = Object.assign({}, this.data$.value);\n    const index = data.results.findIndex((a) => a.id === event.object.id);\n    if (index > -1) {\n      const task: Task = Object.assign({}, data.results[index]);\n      task.finish_date = new Date().toISOString();\n      task.status = event.object.details.value as JobStatus;\n      data.results.splice(index, 1, task);\n      this.data$.next(data);\n    }\n  }\n\n  jobChanged(event: EventMessage): void {\n    const data: IListResult<Task> = Object.assign({}, this.data$.value);\n    const taskIndex = data.results.findIndex(\n      (item) => item.jobs.some((job) => job.id === event.object.id)\n    );\n    if (taskIndex > -1) {\n      const task: Task = Object.assign({}, data.results[taskIndex]);\n      const jobIndex = task.jobs.findIndex((item) => item.id === event.object.id);\n      if (jobIndex > -1) {\n        const job: Job = Object.assign({}, task.jobs[jobIndex]);\n        job.status = event.object.details.value as JobStatus;\n        if (event.object.details.type === 'status' && event.object.details.value === 'running') {\n          job.start_date = new Date().toISOString();\n        }\n        if (\n          event.object.details.type === 'status'\n          && (event.object.details.value === 'success' || event.object.details.value === 'failed')\n        ) {\n          job.finish_date = new Date().toISOString();\n        }\n        task.jobs.splice(jobIndex, 1, job);\n        data.results.splice(taskIndex, 1, task);\n        this.data$.next(data);\n      }\n    }\n  }\n\n  startListen() {\n    this.taskService.events({ events: ['change_job_status'] })\n      .pipe(\n        this.takeUntil(),\n      )\n      .subscribe(event => {\n        if (event.object.details.type === 'status') {\n          switch (event.object.details.value) {\n            case 'created':\n              if (['', 'running'].includes(this.status)) {\n                this.addTask(event);\n              }\n              break;\n            case 'running':\n              if (['', 'running'].includes(this.status)) {\n                this.changeTask(event);\n              }\n              break;\n            case 'success':\n              if (this.status === '') {\n                this.changeTask(event);\n              } else if (this.status === 'running') {\n                this.deleteTask(event);\n              } else if (this.status === 'success') {\n                this.addTask(event);\n              }\n              break;\n            case 'failed':\n              if (this.status === '') {\n                this.changeTask(event);\n              } else if (this.status === 'running') {\n                this.deleteTask(event);\n              } else if (this.status === 'failed') {\n                this.addTask(event);\n              }\n              break;\n          }\n        } else {\n          this.changeTask(event);\n        }\n      });\n\n    this.jobService.events({ events: ['change_job_status'] })\n      .pipe(this.takeUntil())\n      .subscribe(event => this.jobChanged(event));\n  }\n\n  refreshList(page: number, limit: number, status: TaskStatus): Observable<IListResult<Task>> {\n    const params: any = {\n      limit: limit.toString(),\n      offset: ((page - 1) * limit).toString(),\n    };\n\n    if (status) {\n      params.status = status.toString();\n    }\n\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: {\n        page,\n        limit,\n        status,\n      },\n      queryParamsHandling: 'merge',\n    });\n\n    return this.taskService.list(params).pipe(tap(resp => this.data$.next(resp)));\n  }\n\n  initPaging() {\n    this.paging.pipe(\n      this.takeUntil(),\n      filter(paging => !!paging),\n    ).subscribe((paging) => this.refreshList(paging.pageIndex, paging.pageSize, this.status).subscribe());\n  }\n\n  getLimit(): number {\n    const p = this.route.snapshot.queryParamMap;\n    return p.get('limit') ? +p.get('limit') : +localStorage.getItem('limit');\n  }\n\n  ngOnInit() {\n    this.initPaging();\n\n    if (!localStorage.getItem('limit')) localStorage.setItem('limit', '10');\n\n    this.route.queryParamMap.pipe(this.takeUntil()).subscribe((p) => {\n      const page = +p.get('page') ? +p.get('page') : 1;\n      const limit = this.getLimit();\n      if (limit) {\n        localStorage.setItem('limit', limit.toString());\n      }\n      this.status = (p.get('status') || '') as TaskStatus;\n      this.paging.next({ pageIndex: page, pageSize: limit });\n    });\n\n    this.startListen();\n  }\n\n  filterChanged(event: MatButtonToggleChange) {\n    this.status = event.value;\n    this.paging.next({ pageIndex: 1, pageSize: this.getLimit() });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n}\n\n.multi-title {\n  cursor: pointer;\n}\n\n.mat-icon {\n  vertical-align: middle;\n  font-size: 1.2em;\n  width: auto;\n  height: auto;\n}\n\ntable.main {\n  width: 100%;\n}\n\n:host ::ng-deep .first-child {\n  width: 35px;\n  padding-right: 10px;\n  flex-grow: 0;\n  flex-basis: 35px;\n}\n\n:host ::ng-deep .action_date {\n  width: 200px;\n  flex-basis: 200px;\n  flex-grow: 0;\n}\n\n:host ::ng-deep .regular-table {\n  mat-row:not(:hover) {\n    background-color: #303030 !important;\n  }\n  mat-cell {\n    cursor: auto;\n  }\n  adwp-link-cell {\n    cursor: pointer;\n  }\n}\n\n:host ::ng-deep .expandedRow > mat-cell {\n  padding: 0;\n}\n\n.padding20 {\n  padding-right: 20px;\n}\n\n:host ::ng-deep .parent-end {\n  width: 84px;\n  flex-basis: 84px;\n  flex-grow: 0;\n}\n\n:host ::ng-deep .table-end {\n  width: 50px;\n  flex-basis: 50px;\n  flex-grow: 0;\n}\n\n.end {\n  width: 40px;\n  padding-left: 30px !important;\n}\n\n:host ::ng-deep .center {\n  text-align: center;\n}\n\n:host ::ng-deep .status {\n  display: flex;\n  justify-content: center;\n}\n\ntable.inner {\n  width: 100%;\n  margin-bottom: 10px;\n\n  & tr:last-child td {\n    border-bottom-width: 0;\n  }\n}\n\ntd.mat-cell,\nth.mat-header-cell {\n  white-space: nowrap;\n  padding: 0 10px;\n}\n\ntr.jobs-row {\n  height: 0;\n}\n\n.expand-jobs {\n  overflow: hidden;\n  padding: 0 12px;\n}\n\n.toggle {\n  font-size: small;\n}\n\n:host ::ng-deep .toggle .mat-button-toggle-label-content {\n  line-height: 36px;\n}\n",
                    "styleUrl": "./tasks.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jobService",
                        "type": "JobService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 93,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jobService",
                        "type": "JobService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar class=\"toolbar\">\n  <app-crumbs [navigation]=\"[{ url: '/task', title: 'jobs' }]\"></app-crumbs>\n\n  <mat-button-toggle-group\n    name=\"jobsFilter\"\n    [value]=\"status\"\n    aria-label=\"Jobs filter\"\n    class=\"toggle\"\n    (change)=\"filterChanged($event)\"\n  >\n    <mat-button-toggle value=\"\">All</mat-button-toggle>\n    <mat-button-toggle value=\"running\">In progress</mat-button-toggle>\n    <mat-button-toggle value=\"success\">Success</mat-button-toggle>\n    <mat-button-toggle value=\"failed\">Failed</mat-button-toggle>\n  </mat-button-toggle-group>\n\n</mat-toolbar>\n<div class=\"container-entry\">\n  <div class=\"main\">\n\n    <adwp-list\n      class=\"regular-table\"\n      [columns]=\"listColumns\"\n      [dataSource]=\"data$ | async\"\n      [expandedRow]=\"JobsComponent\"\n      [expandedRowInstanceTaken]=\"jobsTableInstanceTaken\"\n      [paging]=\"paging | async\"\n      (changePaging)=\"paging.next($event)\"\n      expandedRowClassName=\"expandedRow\"\n    ></adwp-list>\n\n  </div>\n</div>\n"
        },
        {
            "name": "TaskStatusColumnComponent",
            "id": "component-TaskStatusColumnComponent-e760b35cbde144fe3ff0bb1b88b318a4",
            "file": "src/app/components/columns/task-status-column/task-status-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-status-column",
            "styleUrls": [
                "./task-status-column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-status-column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelTask",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AdwpCellComponent } from '@adwp-ui/widgets';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Task } from '@app/core/types';\nimport { DialogComponent } from '@app/shared/components';\nimport { ApiService } from '@app/core/api';\n\n@Component({\n  selector: 'app-task-status-column',\n  templateUrl: './task-status-column.component.html',\n  styleUrls: ['./task-status-column.component.scss']\n})\nexport class TaskStatusColumnComponent implements AdwpCellComponent<Task> {\n\n  constructor(\n    public dialog: MatDialog,\n    private api: ApiService,\n  ) {}\n\n  row: Task;\n\n  cancelTask(url: string) {\n    this.dialog\n      .open(DialogComponent, {\n        data: {\n          text: 'Are you sure?',\n          controls: ['Yes', 'No'],\n        },\n      })\n      .beforeClosed()\n      .pipe(\n        filter((yes) => yes),\n        switchMap(() => this.api.put(url, {}))\n      )\n      .subscribe();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-icon {\n  vertical-align: middle;\n  font-size: 1.2em;\n  width: auto;\n  height: auto;\n}\n",
                    "styleUrl": "./task-status-column.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AdwpCellComponent"
            ],
            "templateData": "<ng-container *ngIf=\"row.status === 'running'; else done\">\n  <button\n    mat-raised-button\n    appHoverStatusTask\n    *ngIf=\"row.terminatable; else iconStatus\"\n    [style.minWidth]=\"'auto'\"\n    (click)=\"cancelTask(row.cancel)\"\n    matTooltip=\"Stop task\"\n  >\n    <mat-icon class=\"icon-locked running\" #taskIcon>autorenew</mat-icon>\n  </button>\n  <ng-template #iconStatus>\n    <mat-icon class=\"icon-locked running\">autorenew</mat-icon>\n  </ng-template>\n</ng-container>\n<ng-template #done>\n  <span [class]=\"row.status\" [matTooltip]=\"row.status\">\n    <mat-icon *ngIf=\"row.status === 'aborted'; else defaultIcon\">block</mat-icon>\n    <ng-template #defaultIcon>\n      <mat-icon>done_all</mat-icon>\n    </ng-template>\n  </span>\n</ng-template>\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-aa1c7244c01c6c4e479df6f78459af29",
            "file": "src/app/shared/form-elements/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-textarea",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [formGroup]=\"form\">\n  <mat-form-field>\n    <textarea matInput [appMTextarea]=\"field.key\" [formControlName]=\"field.name\" [readonly]=\"field.read_only\"></textarea>\n    <mat-error *ngIf=\"!isValid\"><app-error-info [field]=\"field\" [control]=\"control\"></app-error-info></mat-error>\n  </mat-form-field>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { FieldDirective } from './field.directive';\n\n@Component({\n  selector: 'app-fields-textarea',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <mat-form-field>\n        <textarea matInput [appMTextarea]=\"field.key\" [formControlName]=\"field.name\" [readonly]=\"field.read_only\"></textarea>\n        <mat-error *ngIf=\"!isValid\"><app-error-info [field]=\"field\" [control]=\"control\"></app-error-info></mat-error>\n      </mat-form-field>\n    </ng-container>\n  `,\n})\nexport class TextareaComponent extends FieldDirective {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "FieldDirective"
        },
        {
            "name": "TextBoxComponent",
            "id": "component-TextBoxComponent-4b4acc84982e7580cd38f672c9e4ee69",
            "file": "src/app/shared/form-elements/text-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-textbox",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [formGroup]=\"form\">\n  <mat-form-field>\n    <input matInput [formControlName]=\"field.name\" [readonly]=\"field.read_only\" [type]=\"field.type\" />\n    <mat-error *ngIf=\"!isValid\"><app-error-info [field]=\"field\" [control]=\"control\"></app-error-info></mat-error>\n  </mat-form-field>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { FieldDirective } from './field.directive';\n\n@Component({\n  selector: 'app-fields-textbox',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <mat-form-field>\n        <input matInput [formControlName]=\"field.name\" [readonly]=\"field.read_only\" [type]=\"field.type\" />\n        <mat-error *ngIf=\"!isValid\"><app-error-info [field]=\"field\" [control]=\"control\"></app-error-info></mat-error>\n      </mat-form-field>\n    </ng-container>\n  `\n})\nexport class TextBoxComponent extends FieldDirective {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "FieldDirective"
        },
        {
            "name": "TextComponent",
            "id": "component-TextComponent-ec779dd686b8b0b425c29ed4b719ba4f",
            "file": "src/app/entry/job/log/text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-text",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: flex;\n        flex: 1;\n        flex-direction: column;\n      }\n      .tools {\n        position: fixed;\n        right: 60px;\n        top: 150px;\n      }\n      textarea {\n        background-color: #424242;\n        border: 0;\n        color: #fff;\n        flex: 1;\n      }\n    "
            ],
            "template": "<div class=\"tools\">\n  <ng-container *ngIf=\"isScroll\">\n    <button color=\"accent\" mat-icon-button (click)=\"down()\" matTooltip=\"To the bottom\" [disabled]=\"(isRun && isWatch) || !isScroll\">\n      <mat-icon>arrow_downward</mat-icon>\n    </button>\n    <button color=\"accent\" mat-icon-button (click)=\"top()\" matTooltip=\"To the top\" [disabled]=\"!isScroll\">\n      <mat-icon>arrow_upward</mat-icon>\n    </button>\n  </ng-container>\n</div>\n<textarea appScroll #tea (read)=\"read($event)\" [readonly]=\"true\">{{ content || 'Nothing to display...' }}</textarea>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string"
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "JobStatus"
                }
            ],
            "outputsClass": [
                {
                    "name": "refresh",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isRun",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "isScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "isWatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "textarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tea', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "watch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "down",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "read",
                    "args": [
                        {
                            "name": "stop",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stop",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startWatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "top",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "status",
                            "type": "JobStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "JobStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { interval, Subscription } from 'rxjs';\nimport { BaseDirective } from '@adwp-ui/widgets';\n\nimport { JobStatus } from '@app/core/types/task-job';\n\n@Component({\n  selector: 'app-log-text',\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex: 1;\n        flex-direction: column;\n      }\n      .tools {\n        position: fixed;\n        right: 60px;\n        top: 150px;\n      }\n      textarea {\n        background-color: #424242;\n        border: 0;\n        color: #fff;\n        flex: 1;\n      }\n    `,\n  ],\n  template: `\n    <div class=\"tools\">\n      <ng-container *ngIf=\"isScroll\">\n        <button color=\"accent\" mat-icon-button (click)=\"down()\" matTooltip=\"To the bottom\" [disabled]=\"(isRun && isWatch) || !isScroll\">\n          <mat-icon>arrow_downward</mat-icon>\n        </button>\n        <button color=\"accent\" mat-icon-button (click)=\"top()\" matTooltip=\"To the top\" [disabled]=\"!isScroll\">\n          <mat-icon>arrow_upward</mat-icon>\n        </button>\n      </ng-container>\n    </div>\n    <textarea appScroll #tea (read)=\"read($event)\" [readonly]=\"true\">{{ content || 'Nothing to display...' }}</textarea>\n  `,\n})\nexport class TextComponent extends BaseDirective implements OnInit, DoCheck {\n  isScroll = false;\n  isRun = false;\n  isWatch = false;\n  watch: Subscription;\n  @Input() content: string;\n  @Input() status: JobStatus;\n  @Output() refresh = new EventEmitter();\n\n  @ViewChild('tea', { read: ElementRef }) textarea: ElementRef;\n\n  ngOnInit(): void {\n    this.isRun = this.status === 'running';\n    if (this.isRun) this.startWatch();\n  }\n\n  ngDoCheck(): void {\n    if (this.textarea) {\n      const el = this.textarea.nativeElement;\n      this.isScroll = el.offsetHeight < el.scrollHeight;\n      if (this.isScroll && this.isWatch) this.down();\n    }\n  }\n\n  update(status: JobStatus) {\n    this.isRun = status === 'running';\n    if (!this.isRun && this.isWatch) {\n      this.isWatch = false;\n      this.watch.unsubscribe();\n    }\n  }\n\n  down() {\n    const el = this.textarea.nativeElement;\n    el.scrollTop = el.scrollHeight;\n    if (this.isRun && !this.isWatch) this.startWatch();\n  }\n\n  top() {\n    const el = this.textarea.nativeElement;\n    el.scrollTop = 0;\n    if (this.isRun && this.isWatch) {\n      this.isWatch = false;\n      this.watch.unsubscribe();\n    }\n  }\n\n  read(stop: { direct: -1 | 1 | 0 }) {\n    if (this.isRun && this.isWatch && stop.direct === -1) {\n      this.isWatch = false;\n      this.watch.unsubscribe();\n    }\n    if (this.isRun && !this.isWatch && !stop.direct) this.startWatch();\n  }\n\n  startWatch() {\n    this.isWatch = true;\n    this.watch = interval(5000)\n      .pipe(this.takeUntil())\n      .subscribe(_ => this.refresh.emit());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: flex;\n        flex: 1;\n        flex-direction: column;\n      }\n      .tools {\n        position: fixed;\n        right: 60px;\n        top: 150px;\n      }\n      textarea {\n        background-color: #424242;\n        border: 0;\n        color: #fff;\n        flex: 1;\n      }\n    \n",
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "DoCheck"
            ]
        },
        {
            "name": "ToolsComponent",
            "id": "component-ToolsComponent-73a34d103ccaf596fec58838d6cc3cfb",
            "file": "src/app/shared/configuration/tools/tools.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tools",
            "styleUrls": [],
            "styles": [
                ":host {display: flex;justify-content: space-between;align-items: baseline; margin: 10px 20px 0;}",
                ".form_config_button_save { margin: 0 16px 0 30px;}",
                ".description {flex: 0}"
            ],
            "template": "<mat-form-field class=\"description\">\n  <input matInput placeholder=\"Description configuration\" [formControl]=\"description\" />\n</mat-form-field>\n<app-search (pattern)=\"search($event)\"></app-search>\n<mat-checkbox [(ngModel)]=\"advanced\" [disabled]=\"isAdvanced === null\" [ngClass]=\"{ advanced: isAdvanced }\">Advanced</mat-checkbox>\n<div class=\"control-buttons\">\n  <button mat-raised-button color=\"accent\" class=\"form_config_button_save\" [disabled]=\"disabledSave\" (click)=\"onSave()\">Save</button>\n  <button mat-icon-button [disabled]=\"disabledHistory\" (click)=\"toggleHistory()\" [matTooltip]=\"historyShow ? 'Hide history' : 'Show history'\">\n    <mat-icon>history</mat-icon>\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabledHistory",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean"
                },
                {
                    "name": "disabledSave",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "applyFilter",
                    "defaultValue": "new EventEmitter<ISearchParam>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "save",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "showHistory",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "description",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "filter$",
                    "defaultValue": "new Subject<ISearchParam>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filterParams",
                    "defaultValue": "{ advanced: false, search: '' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISearchParam",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "historyShow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "isAdvanced",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { BaseDirective } from '@app/shared/directives';\nimport { Subject } from 'rxjs';\n\nimport { ISearchParam } from '../main/main.service';\n\n@Component({\n  selector: 'app-tools',\n  template: `\n    <mat-form-field class=\"description\">\n      <input matInput placeholder=\"Description configuration\" [formControl]=\"description\" />\n    </mat-form-field>\n    <app-search (pattern)=\"search($event)\"></app-search>\n    <mat-checkbox [(ngModel)]=\"advanced\" [disabled]=\"isAdvanced === null\" [ngClass]=\"{ advanced: isAdvanced }\">Advanced</mat-checkbox>\n    <div class=\"control-buttons\">\n      <button mat-raised-button color=\"accent\" class=\"form_config_button_save\" [disabled]=\"disabledSave\" (click)=\"onSave()\">Save</button>\n      <button mat-icon-button [disabled]=\"disabledHistory\" (click)=\"toggleHistory()\" [matTooltip]=\"historyShow ? 'Hide history' : 'Show history'\">\n        <mat-icon>history</mat-icon>\n      </button>\n    </div>\n  `,\n  styles: [\n    ':host {display: flex;justify-content: space-between;align-items: baseline; margin: 10px 20px 0;}',\n    '.form_config_button_save { margin: 0 16px 0 30px;}',\n    '.description {flex: 0}',\n  ],\n})\nexport class ToolsComponent extends BaseDirective implements OnInit {\n  private filter$ = new Subject<ISearchParam>();\n  filterParams: ISearchParam = { advanced: false, search: '' };\n  historyShow = false;\n  isAdvanced: boolean;\n  description = new FormControl();\n  @Input() disabledSave = true;\n  @Input() disabledHistory = true;\n\n  @Output() applyFilter = new EventEmitter<ISearchParam>();\n  @Output() save = new EventEmitter();\n  @Output() showHistory = new EventEmitter<boolean>();\n\n  ngOnInit() {\n    this.filter$.pipe(this.takeUntil()).subscribe(() => this.applyFilter.emit(this.filterParams));\n  }\n\n  set advanced(advanced: boolean) {\n    this.filterParams.advanced = advanced;\n    this.filter$.next();\n  }\n\n  search(search: string) {\n    this.filterParams.search = search;\n    this.filter$.next();\n  }\n\n  toggleHistory() {\n    this.historyShow = !this.historyShow;\n    this.showHistory.emit(this.historyShow);\n  }\n\n  onSave() {\n    this.save.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {display: flex;justify-content: space-between;align-items: baseline; margin: 10px 20px 0;}\n.form_config_button_save { margin: 0 16px 0 30px;}\n.description {flex: 0}\n",
            "extends": "BaseDirective",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "advanced": {
                    "name": "advanced",
                    "setSignature": {
                        "name": "advanced",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "advanced",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "advanced",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-a70b027f8ca1cb2ef7bd433cd939cbfc",
            "file": "src/app/shared/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "template": "<ng-container *ngComponentOutlet=\"CurrentComponent; injector: componentInjector\"></ng-container>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentInjector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "CurrentComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<SimpleTextComponent | IssueInfoComponent | StatusInfoComponent>",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TooltipOptions",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "buildComponent",
                    "args": [
                        {
                            "name": "o",
                            "type": "TooltipOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "TooltipOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPositionString",
                    "args": [
                        {
                            "name": "po",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "po",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "menter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter', ['$event']"
                        }
                    ]
                },
                {
                    "name": "mleave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "position",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  Type,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseDirective } from '@app/shared/directives';\nimport { delay } from 'rxjs/operators';\n\nimport { IssueInfoComponent } from '../issue-info.component';\nimport { StatusInfoComponent } from '../status-info.component';\nimport { ComponentData, TooltipOptions, TooltipService } from './tooltip.service';\n\nconst POSITION_MARGIN = 16;\n\n@Component({\n  selector: 'app-simple-text',\n  template: '{{ current }}',\n})\nexport class SimpleTextComponent implements OnInit {\n  @Input() current: any;\n  constructor(private componentData: ComponentData) {}\n  ngOnInit(): void {\n    this.current = this.current || this.componentData.current;\n    this.componentData.emitter.emit('Done');\n  }\n}\n\nconst kit = { issue: IssueInfoComponent, status: StatusInfoComponent };\n@Component({\n  selector: 'app-tooltip',\n  template: '<ng-container *ngComponentOutlet=\"CurrentComponent; injector: componentInjector\"></ng-container>',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class TooltipComponent extends BaseDirective implements OnInit, OnDestroy {\n  private options: TooltipOptions;\n  source: HTMLElement;\n\n  CurrentComponent: Type<SimpleTextComponent | IssueInfoComponent | StatusInfoComponent>;\n  componentInjector: Injector;\n\n  constructor(\n    private el: ElementRef,\n    private service: TooltipService,\n    private renderer: Renderer2,\n    private router: Router,\n    private parentInjector: Injector\n  ) {\n    super();\n  }\n\n  @HostListener('mouseenter', ['$event']) menter() {\n    this.service.mouseEnterTooltip();\n  }\n\n  @HostListener('mouseleave') mleave() {\n    this.service.mouseLeaveTooltip();\n  }\n\n  ngOnInit(): void {\n    this.service.position$.pipe(this.takeUntil()).subscribe((o) => {\n      if (o) {\n        this.clear();\n        this.buildComponent(o);\n      } else this.hide();\n    });\n  }\n\n  hide() {\n    this.renderer.setAttribute(this.el.nativeElement, 'style', `opacity: 0; height: auto;`);\n    this.clear();\n  }\n\n  clear() {\n    if (this.source) {\n      this.source = null;\n      this.CurrentComponent = null;\n    }\n  }\n\n  position() {\n    const o = this.options;\n    const el = this.el.nativeElement;\n    const root = document.querySelector<HTMLElement>('app-root');\n    const position = { left: 0, top: 0, bottom: 0, right: 0, height: 0 };\n    const offsetParent = (s: HTMLElement) => s.offsetParent as HTMLElement;\n    const offset = (s: HTMLElement) => ({ top: s.offsetTop, left: s.offsetLeft });\n    const increment = (a: { top: number; left: number }, b: { top: number; left: number }) => ({ top: a.top + b.top, left: a.left + b.left });\n    const offsetSum = (s: HTMLElement) => (offsetParent(s) ? increment(offset(s), offsetSum(offsetParent(s))) : offset(s));\n    const os = offsetSum(o.source);\n    position.top = os.top + o.source.offsetHeight;\n\n    // TODO: maybe let's up tooltip?\n    // this height for tooltip for scrolling\n    position.height = o.event.y > root.offsetHeight - el.offsetHeight ? root.offsetHeight - position.top - POSITION_MARGIN : 0;\n\n    switch (o.options.position) {\n      case 'bottom':\n        if (o.event.x + el.offsetWidth > root.offsetWidth) position.right = POSITION_MARGIN * 2;\n        else position.left = os.left + o.source.clientWidth;\n        break;\n      case 'left':\n        position.left = o.event.x < el.clientWidth ? POSITION_MARGIN * 2 : os.left - el.clientWidth;\n        break;\n    }\n\n    this.renderer.setAttribute(el, 'style', `opacity: .9; ${this.getPositionString(position)}`);\n  }\n\n  getPositionString(po: any) {\n    return Object.keys(po).reduce((p, c) => p + (po[c] ? `${c}: ${po[c]}px;` : ''), '');\n  }\n\n  buildComponent(o: TooltipOptions) {\n    this.options = o;\n    this.source = this.options.source;\n    this.CurrentComponent = kit[this.options.options.componentName] || SimpleTextComponent;\n\n    const emitter = new EventEmitter();\n    emitter.pipe(delay(100), this.takeUntil()).subscribe(() => this.position());\n\n    const parse = (url: string) =>\n      url\n        .split('/')\n        .map((b) => b.split(';')[0])\n        .join('/');\n\n    this.componentInjector = Injector.create({\n      providers: [\n        {\n          provide: ComponentData,\n          useValue: { path: parse(this.router.url), current: this.options.options.content, emitter: emitter },\n        },\n      ],\n      parent: this.parentInjector,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  line-height: normal;\n  text-align: left;\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  color: #fff;\n  font-size: 14px;\n  position: absolute;\n  display: block;\n  border: solid 1px #455A64;\n  padding: 8px 14px;\n  background-color: #37474F;\n  border-radius: 5px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14),\n    0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  opacity: 0;\n  height: auto;\n  // -webkit-transition: .2s ease-in-out;\n  // -moz-transition: .2s ease-in-out;\n  // -o-transition: .2s ease-in-out;\n  //transition: .2s ease-in-out;\n  z-index: 1100;\n  overflow: auto;\n}\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "TooltipService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "TooltipService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "TopComponent",
            "id": "component-TopComponent-80e20dc06909003d8740fc7b9a082fc4",
            "file": "src/app/main/top/top.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-top",
            "styleUrls": [
                "./top.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAuth$",
                    "defaultValue": "of(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "profile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\n\nimport { authLogout, AuthState, isAuthenticated } from '@app/core/store';\n\n@Component({\n  selector: 'app-top',\n  templateUrl: './top.component.html',\n  styleUrls: ['./top.component.scss'],\n})\nexport class TopComponent implements OnInit {\n  isAuth$: Observable<boolean> = of(false);\n\n  constructor(\n    private router: Router,\n    private authStore: Store<AuthState>,\n  ) {}\n\n  ngOnInit() {\n    this.isAuth$ = this.authStore.select(isAuthenticated);\n  }\n\n  profile() {\n    this.router.navigate(['profile']);\n  }\n\n  logout() {\n    this.authStore.dispatch(authLogout());\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-toolbar {\n  height: auto !important;\n  padding: 6px 16px !important;\n  background-color: #333c47 !important;\n  margin-bottom: 0;\n  display: block;\n}\n\n.right-panel {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\napp-bell {\n  margin-right: 8px;\n}\n\na {\n  display: flex;\n  align-items: center;\n  margin: 5px 0;\n\n  img {\n    height: 40px;\n    vertical-align: bottom;\n  }\n\n  &:hover {\n    text-decoration: none;\n  }\n}\n\n.top-menu {\n  display: flex;\n  justify-content: center;\n  height: 50px;\n  justify-items: baseline;\n\n  & a {\n    font-size: 14px;\n  }\n}\n\n.job-status {\n  display: inline-block;\n  margin: 0 4px;\n\n  & .mat-mini-fab {\n    margin: 0 4px;\n    width: 24px;\n    height: 24px;\n    line-height: 12px;\n  }\n}\n",
                    "styleUrl": "./top.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\" class=\"mat-elevation-z6 row\">\n  <a routerLink=\"/\" class=\"col s12 l3\">\n    <img src=\"/assets/adcm-logo.png\" alt=\"Arenadata cluster manager\" />\n  </a>\n\n  <mat-nav-list class=\"col s12 l6 top-menu\">\n    <a mat-list-item class=\"topmenu_clusters top\" routerLink=\"/cluster\" routerLinkActive=\"mat-warn\">\n      <span>CLUSTERS</span>\n    </a>\n    <a mat-list-item class=\"topmenu_hostproviders top\" routerLink=\"/provider\" routerLinkActive=\"mat-warn\">\n      <span>HOSTPROVIDERS</span>\n    </a>\n    <a mat-list-item class=\"topmenu_hosts top\" routerLink=\"/host\" routerLinkActive=\"mat-warn\">\n      <span>HOSTS</span>\n    </a>\n    <a mat-list-item class=\"topmenu_jobs top\" routerLink=\"/task\" routerLinkActive=\"mat-warn\"><span>JOBS</span></a>\n    <a mat-list-item class=\"topmenu_bundles top\" routerLink=\"/bundle\" routerLinkActive=\"mat-warn\">\n      <span>BUNDLES</span>\n    </a>\n  </mat-nav-list>\n\n  <span class=\"col s12 l3\">\n    <span *ngIf=\"(isAuth$ | async)\" class=\"right-panel\">\n      <app-bell></app-bell>\n\n      <button [appForTest]=\"'help'\" mat-icon-button [matMenuTriggerFor]=\"helpMenu\">\n        <mat-icon>help</mat-icon>\n      </button>\n\n      <mat-menu #helpMenu=\"matMenu\" [overlapTrigger]=\"false\">\n        <a href=\"https://t.me/joinchat/DYEBbReM-hj421LV0y5prw\" target=\"_blank\" [appForTest]=\"'ask_for_help'\"\n          mat-menu-item>\n          <mat-icon>contact_support</mat-icon>\n          <span>Ask for help</span>\n        </a>\n\n        <a [appForTest]=\"'dock'\" mat-menu-item href=\"http://docs.arenadata.io/adcm/\" target=\"_blank\">\n          <mat-icon>event_seat</mat-icon>\n          <span>Documentation</span>\n        </a>\n\n      </mat-menu>\n\n      <button [appForTest]=\"'account'\" class=\"toppanel_button_user\" mat-icon-button [matMenuTriggerFor]=\"accountMenu\">\n        <mat-icon>account_circle</mat-icon>\n      </button>\n      <mat-menu #accountMenu=\"matMenu\" [overlapTrigger]=\"false\">\n        <a [appForTest]=\"'settings'\" mat-menu-item [routerLink]=\"['/admin/settings/']\">\n          <mat-icon>settings_applications</mat-icon>\n          <span>Settings</span>\n        </a>\n        <button [appForTest]=\"'profile'\" mat-menu-item (click)=\"profile()\">\n          <mat-icon>folder_shared</mat-icon>\n          <span>Profile</span>\n        </button>\n        <button [appForTest]=\"'logout'\" mat-menu-item (click)=\"logout()\">\n          <mat-icon>exit_to_app</mat-icon>\n          <span>Logout</span>\n        </button>\n      </mat-menu>\n    </span>\n  </span>\n</mat-toolbar>\n"
        },
        {
            "name": "UpgradeComponent",
            "id": "component-UpgradeComponent-34c36605396243e8465a70ce623de60b",
            "file": "src/app/shared/components/upgrade.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upgrade",
            "styleUrls": [],
            "styles": [],
            "template": "<button mat-icon-button\n        matTooltip=\"There are a pending upgrades of object here\"\n        [appForTest]=\"'upgrade_btn'\"\n        color=\"warn\"\n        [disabled]=\"!checkIssue()\"\n        [matMenuTriggerFor]=\"menu\"\n        (click)=\"EventHelper.stopPropagation($event)\"\n>\n  <mat-icon>sync_problem</mat-icon>\n</button>\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [xPosition]=\"xPosition\" yPosition=\"below\">\n  <ng-template matMenuContent>\n    <button *ngFor=\"let item of list$ | async\" mat-menu-item (click)=\"runUpgrade(item)\">\n      <span>{{ item.name || 'No name' }}</span>\n    </button>\n  </ng-template>\n</mat-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": ""
                },
                {
                    "name": "xPosition",
                    "defaultValue": "'before'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "refresh",
                    "defaultValue": "new EventEmitter<EmmitRow>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter<EmmitRow>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "EventHelper",
                    "defaultValue": "EventHelper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "list$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Upgrade[]>",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "pRow",
                    "defaultValue": "{ upgradable: false, upgrade: '', issue: null }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UpgradeItem",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIssue",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fork",
                    "args": [
                        {
                            "name": "item",
                            "type": "Upgrade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Upgrade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUpgrades",
                    "args": [
                        {
                            "name": "upgrade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "upgrade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runUpgrade",
                    "args": [
                        {
                            "name": "item",
                            "type": "Upgrade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Upgrade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                },
                {
                    "name": "takeUntil",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ApiService } from '@app/core/api';\nimport { EmmitRow } from '@app/core/types';\nimport { concat, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { EventHelper } from '@adwp-ui/widgets';\n\nimport { BaseDirective } from '../directives';\nimport { DialogComponent } from './dialog.component';\nimport { IIssues } from '@app/models/issue';\nimport { IssueHelper } from '@app/helpers/issue-helper';\n\nexport interface UpgradeItem {\n  upgradable: boolean;\n  upgrade: string;\n  issue: IIssues;\n}\n\nexport interface Upgrade {\n  id: number;\n  bundle_id: number;\n  name: string;\n  description: string;\n  do: string;\n  upgradable: boolean;\n  from_edition: string[];\n  license: 'unaccepted' | 'absent';\n  license_url: string;\n  max_strict: boolean;\n  max_version: string;\n  min_strict: boolean;\n  min_version: string;\n  state_available: string;\n  state_on_success: string;\n  url: string;\n}\n\n@Component({\n  selector: 'app-upgrade',\n  template: `\n    <button mat-icon-button\n            matTooltip=\"There are a pending upgrades of object here\"\n            [appForTest]=\"'upgrade_btn'\"\n            color=\"warn\"\n            [disabled]=\"!checkIssue()\"\n            [matMenuTriggerFor]=\"menu\"\n            (click)=\"EventHelper.stopPropagation($event)\"\n    >\n      <mat-icon>sync_problem</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [xPosition]=\"xPosition\" yPosition=\"below\">\n      <ng-template matMenuContent>\n        <button *ngFor=\"let item of list$ | async\" mat-menu-item (click)=\"runUpgrade(item)\">\n          <span>{{ item.name || 'No name' }}</span>\n        </button>\n      </ng-template>\n    </mat-menu>\n  `\n})\nexport class UpgradeComponent extends BaseDirective {\n  EventHelper = EventHelper;\n\n  list$: Observable<Upgrade[]>;\n  pRow: UpgradeItem = { upgradable: false, upgrade: '', issue: null };\n\n  @Input() xPosition = 'before';\n\n  @Input()\n  set row(row: UpgradeItem) {\n    this.pRow = row;\n    this.list$ = this.getUpgrades(this.pRow.upgrade);\n  }\n\n  @Output()\n  refresh: EventEmitter<EmmitRow> = new EventEmitter<EmmitRow>();\n\n  constructor(private api: ApiService, private dialog: MatDialog) {\n    super();\n  }\n\n  checkIssue() {\n    return this.pRow.upgradable && !IssueHelper.isIssue(this.pRow.issue);\n  }\n\n  runUpgrade(item: Upgrade) {\n    const license$ = item.license === 'unaccepted' ? this.api.put(`${item.license_url}accept/`, {}) : of();\n    const do$ = this.api.post<{ id: number }>(item.do, {});\n    this.fork(item)\n      .pipe(\n        switchMap(text =>\n          this.dialog\n            .open(DialogComponent, {\n              data: {\n                title: 'Are you sure you want to upgrade?',\n                text,\n                disabled: !item.upgradable,\n                controls: item.license === 'unaccepted' ? {\n                  label: 'Do you accept the license agreement?',\n                  buttons: ['Yes', 'No']\n                } : ['Yes', 'No']\n              }\n            })\n            .beforeClosed()\n            .pipe(\n              this.takeUntil(),\n              filter(yes => yes),\n              switchMap(() => concat(license$, do$))\n            )\n        )\n      )\n      .subscribe(row => this.refresh.emit({ cmd: 'refresh', row }));\n  }\n\n  fork(item: Upgrade) {\n    const flag = item.license === 'unaccepted';\n    return flag ? this.api.get<{ text: string }>(item.license_url).pipe(map(a => a.text)) : of(item.description);\n  }\n\n  getUpgrades(upgrade: string): Observable<any> {\n    return this.api.get(`${upgrade}?ordering=-name`).pipe(\n      filter((list: Upgrade[]) => !!list.length)\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseDirective",
            "accessors": {
                "row": {
                    "name": "row",
                    "setSignature": {
                        "name": "row",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "row",
                                "type": "UpgradeItem",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "row",
                                "type": "UpgradeItem",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "UsersComponent",
            "id": "component-UsersComponent-ea1fe3d6dc908d036a0a83d472ae080f",
            "file": "src/app/admin/users/users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "UsersService"
                }
            ],
            "selector": "app-users",
            "styleUrls": [
                "users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addForm",
                    "defaultValue": "new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.pattern('[a-zA-Z0-9]*')]),\n    xxx: this.chPassword,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "chPassword",
                    "defaultValue": "new FormGroup({\n    password: new FormControl('', [Validators.required]),\n    cpassword: new FormControl('', [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currentUserName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hideLeft",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "showChangePassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validRow",
                    "args": [
                        {
                            "name": "pass",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cpass",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pass",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpass",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, NgModel, Validators } from '@angular/forms';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { AuthService } from '../../core/auth/auth.service';\nimport { DialogComponent } from '@app/shared/components';\nimport { User, UsersService } from './users.service';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['users.component.scss'],\n  providers: [UsersService],\n})\nexport class UsersComponent implements OnInit {\n  users: User[];\n  hideLeft = true;\n  showChangePassword = false;\n  currentUserName: string;\n\n  chPassword = new FormGroup({\n    password: new FormControl('', [Validators.required]),\n    cpassword: new FormControl('', [Validators.required]),\n  });\n\n  addForm = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.pattern('[a-zA-Z0-9]*')]),\n    xxx: this.chPassword,\n  });\n\n  constructor(private us: UsersService, private auth: AuthService, private router: Router, private dialog: MatDialog) {}\n\n  get username() {\n    return this.addForm.get('username');\n  }\n\n  get password() {\n    return this.addForm.get('xxx').get('password');\n  }\n\n  get cpassword() {\n    return this.addForm.get('xxx').get('cpassword');\n  }\n\n  ngOnInit() {\n    this.currentUserName = this.auth.auth.login;\n    this.us\n      .getUsers()\n      .pipe(map((u) => u.filter((a) => a.username !== 'status')))\n      .subscribe((users) => (this.users = users));\n  }\n\n  addUser() {\n    if (this.addForm.valid)\n      this.us.addUser(this.addForm.get('username').value, this.addForm.get('xxx').get('password').value).subscribe((user) => {\n        this.users = this.users.concat(user);\n        this.addForm.reset();\n        this.hideLeft = true;\n      });\n  }\n\n  clearUser(user: User) {\n    const dialogRef = this.dialog.open(DialogComponent, {\n      width: '250px',\n      data: {\n        text: `Delete [ ${user.username} ]? Are you sure?`,\n        controls: ['Yes', 'No'],\n      },\n    });\n\n    dialogRef.beforeClosed().subscribe((yes) => {\n      if (yes) {\n        this.us.clearUser(user).subscribe((_) => (this.users = this.users.filter((u) => u !== user)));\n      }\n    });\n  }\n\n  validRow(pass: NgModel, cpass: NgModel): boolean {\n    return pass.valid && cpass.valid && pass.value === cpass.value;\n  }\n\n  changePassword(user: User) {\n    this.us.changePassword(user.password, user.change_password).subscribe((_) => {\n      user.password = '';\n      user.confirm = '';\n      if (user.username === this.currentUserName) this.router.navigate(['/login']);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1;\n  width: 100%;\n}\n\n.users-add-card {\n  position: fixed;\n  right: 20px;\n  width: 250px;\n}\n\n.add-button {\n  position: absolute;\n  right: 40px;\n  top: 10px;\n}\n",
                    "styleUrl": "users.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "us",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "us",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "cpassword": {
                    "name": "cpassword",
                    "getSignature": {
                        "name": "cpassword",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                }
            },
            "templateData": "<button mat-raised-button color=\"accent\" (click)=\"hideLeft=!hideLeft\" class=\"add-button\">\n    <mat-icon>library_add</mat-icon> Add user\n</button>\n\n<mat-card class=\"users-add-card\" [class.hidden]=\"hideLeft\">\n  <mat-card-content>\n    <div [formGroup]=\"addForm\">\n      <div style=\"display: flex\">\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"Username\" formControlName=\"username\">\n          <mat-error *ngIf=\"username.invalid && (username.dirty || username.touched)\">\n            <mat-error *ngIf=\"username.hasError('required')\">\n              Username is\n              <b>required</b>\n            </mat-error>\n            <mat-error *ngIf=\"username.hasError('pattern')\">\n              Username is\n              <b>not valid</b>\n            </mat-error>\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div>\n        <div formGroupName=\"xxx\">\n          <div style=\"display: flex\">\n            <mat-form-field class=\"full-width\">\n              <input type=\"password\" matInput formControlName=\"password\" placeholder=\"Password\" (input)=\"cpassword.updateValueAndValidity()\">\n              <mat-error *ngIf=\"password.invalid && (password.dirty || password.touched)\">\n                <mat-error *ngIf=\"password.hasError('required')\">\n                  Password is\n                  <b>required</b>\n                </mat-error>\n              </mat-error>\n            </mat-form-field>\n          </div>\n          <div style=\"display: flex\">\n            <mat-form-field class=\"full-width\">\n              <input type=\"password\" matInput formControlName=\"cpassword\" appConfirmEqualValidator=\"password\"\n                placeholder=\"Confirm Password\">\n              <mat-error *ngIf=\"cpassword.invalid && (cpassword.dirty || cpassword.touched)\">\n                <mat-error *ngIf=\"cpassword.hasError('required')\">\n                  Confirm password is\n                  <b>required</b>\n                </mat-error>\n                <mat-error *ngIf=\"cpassword.hasError('notEqual')\">\n                  Password and confirm password does not match\n                </mat-error>\n              </mat-error>\n            </mat-form-field>\n          </div>\n        </div>\n        <p class=\"controls\">\n          <button mat-raised-button (click)=\"addUser()\" [disabled]=\"!addForm.valid\" color=\"primary\">\n            Save\n          </button>\n        </p>\n      </div>\n    </div>\n  </mat-card-content>\n</mat-card>\n\n<mat-table #table [dataSource]=\"users\" style=\"margin-right: 300px;\">\n\n  <mat-header-row *matHeaderRowDef=\"['username', 'password', 'action']\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: ['username', 'password', 'action'];\"></mat-row>\n\n  <ng-container matColumnDef=\"username\">\n    <mat-header-cell *matHeaderCellDef> UserName </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\">\n      <div class=\"overflow\">{{ row.username }}</div>\n    </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"password\">\n    <mat-header-cell *matHeaderCellDef> Password </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\" style=\"flex-basis: 260px;\">\n      <mat-form-field>\n        <input type=\"password\" matInput placeholder=\"Password\" [(ngModel)]=\"row.password\" required #pass=\"ngModel\">\n      </mat-form-field>\n      &nbsp;\n      <mat-form-field>\n        <input type=\"password\" matInput placeholder=\"Confirm Password\" [(ngModel)]=\"row.confirm\" required #cpass=\"ngModel\">\n      </mat-form-field>\n      <button mat-icon-button (click)=\"changePassword(row)\" [disabled]=\"!validRow(pass, cpass)\">\n        <mat-icon>done</mat-icon>\n      </button>\n    </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"action\">\n    <mat-header-cell *matHeaderCellDef></mat-header-cell>\n    <mat-cell *matCellDef=\"let row\" style=\"text-align: right; width: 100px;\">\n      <button *ngIf=\"row.username !== currentUserName\" mat-icon-button (click)=\"clearUser(row)\" [disabled]=\"row.username=== 'status'\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </mat-cell>\n  </ng-container>\n</mat-table>\n"
        },
        {
            "name": "VariantComponent",
            "id": "component-VariantComponent-96e04dde587f6ca6d6bad4ae8672bff9",
            "file": "src/app/shared/form-elements/variant.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fields-variant",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [formGroup]=\"form\">\n  <mat-form-field>\n    <ng-container *ngIf=\"field.limits?.source?.strict; else ac\">\n      <mat-select [(value)]=\"field.value\" [formControlName]=\"field.name\">\n        <mat-option *ngFor=\"let option of field.limits?.source?.value || []\" [value]=\"option\">{{ option }}</mat-option>\n      </mat-select>\n    </ng-container>\n    <ng-template #ac>\n      <input type=\"text\" matInput [formControlName]=\"field.name\" [matAutocomplete]=\"auto\" />\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option of field.limits?.source?.value || []\" [value]=\"option\">\n          {{ option }}\n        </mat-option>\n      </mat-autocomplete>\n    </ng-template>\n    <mat-error *ngIf=\"!isValid\"><app-error-info [field]=\"field\" [control]=\"control\"></app-error-info></mat-error>\n  </mat-form-field>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IFieldOptions",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FieldDirective"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { FieldDirective } from './field.directive';\n\n@Component({\n  selector: 'app-fields-variant',\n  template: `\n    <ng-container [formGroup]=\"form\">\n      <mat-form-field>\n        <ng-container *ngIf=\"field.limits?.source?.strict; else ac\">\n          <mat-select [(value)]=\"field.value\" [formControlName]=\"field.name\">\n            <mat-option *ngFor=\"let option of field.limits?.source?.value || []\" [value]=\"option\">{{ option }}</mat-option>\n          </mat-select>\n        </ng-container>\n        <ng-template #ac>\n          <input type=\"text\" matInput [formControlName]=\"field.name\" [matAutocomplete]=\"auto\" />\n          <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of field.limits?.source?.value || []\" [value]=\"option\">\n              {{ option }}\n            </mat-option>\n          </mat-autocomplete>\n        </ng-template>\n        <mat-error *ngIf=\"!isValid\"><app-error-info [field]=\"field\" [control]=\"control\"></app-error-info></mat-error>\n      </mat-form-field>\n    </ng-container>\n  `,\n})\nexport class VariantComponent extends FieldDirective implements OnInit {\n  ngOnInit() {\n    if (this.field.read_only) {\n      this.control.disable();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "FieldDirective",
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "AddingModule",
            "id": "module-AddingModule-887fb60bdbbbfb0b64a62b421f2efb15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/add-component/adding.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FormElementsModule } from '@app/shared/form-elements/form-elements.module';\nimport { MaterialModule } from '@app/shared/material.module';\nimport { StuffModule } from '@app/shared/stuff.module';\n\nimport { AddButtonComponent } from './add-button.component';\nimport { AddFormComponent } from './add-form.component';\nimport { BaseFormDirective } from './base-form.directive';\nimport { AddClusterComponent } from './add-cluster.component';\nimport { HostComponent } from './host.component';\nimport { Host2clusterComponent } from './host2cluster.component';\nimport { ProviderComponent } from './provider.component';\nimport { ServiceComponent } from './service.component';\nimport { ControlsComponent } from './controls.component';\n\n@NgModule({\n  declarations: [\n    AddButtonComponent,\n    AddFormComponent,\n    AddClusterComponent,\n    HostComponent,\n    Host2clusterComponent,\n    ProviderComponent,\n    ServiceComponent,\n    BaseFormDirective,\n    ControlsComponent,\n  ],\n  imports: [CommonModule, MaterialModule, StuffModule, FormsModule, ReactiveFormsModule, FormElementsModule],\n  exports: [\n    AddButtonComponent,\n    ProviderComponent,\n    AddClusterComponent,\n    HostComponent,\n    ServiceComponent,\n    Host2clusterComponent,\n    BaseFormDirective,\n    ControlsComponent,\n  ],\n  entryComponents: [AddFormComponent]\n})\nexport class AddingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddButtonComponent"
                        },
                        {
                            "name": "AddClusterComponent"
                        },
                        {
                            "name": "AddFormComponent"
                        },
                        {
                            "name": "BaseFormDirective"
                        },
                        {
                            "name": "ControlsComponent"
                        },
                        {
                            "name": "Host2clusterComponent"
                        },
                        {
                            "name": "HostComponent"
                        },
                        {
                            "name": "ProviderComponent"
                        },
                        {
                            "name": "ServiceComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormElementsModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "StuffModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddButtonComponent"
                        },
                        {
                            "name": "AddClusterComponent"
                        },
                        {
                            "name": "BaseFormDirective"
                        },
                        {
                            "name": "ControlsComponent"
                        },
                        {
                            "name": "Host2clusterComponent"
                        },
                        {
                            "name": "HostComponent"
                        },
                        {
                            "name": "ProviderComponent"
                        },
                        {
                            "name": "ServiceComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminModule",
            "id": "module-AdminModule-da5818e7048922becdfd0770abb303a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../core/auth/auth.guard';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { IntroComponent } from './intro.component';\nimport { PatternComponent } from './pattern.component';\nimport { SettingsComponent } from './settings.component';\nimport { UsersComponent } from './users/users.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PatternComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      {\n        path: '',\n        redirectTo: 'intro',\n        pathMatch: 'full',\n      },\n      {\n        path: 'intro',\n        component: IntroComponent,\n      },\n      {\n        path: 'settings',\n        component: SettingsComponent,\n      },\n      {\n        path: 'users',\n        component: UsersComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AdminRoutingModule {}\n\n@NgModule({\n  imports: [CommonModule, AdminRoutingModule, SharedModule],\n  declarations: [IntroComponent, SettingsComponent, UsersComponent, PatternComponent],\n})\nexport class AdminModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IntroComponent"
                        },
                        {
                            "name": "PatternComponent"
                        },
                        {
                            "name": "SettingsComponent"
                        },
                        {
                            "name": "UsersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "id": "module-AdminRoutingModule-da5818e7048922becdfd0770abb303a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../core/auth/auth.guard';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { IntroComponent } from './intro.component';\nimport { PatternComponent } from './pattern.component';\nimport { SettingsComponent } from './settings.component';\nimport { UsersComponent } from './users/users.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PatternComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      {\n        path: '',\n        redirectTo: 'intro',\n        pathMatch: 'full',\n      },\n      {\n        path: 'intro',\n        component: IntroComponent,\n      },\n      {\n        path: 'settings',\n        component: SettingsComponent,\n      },\n      {\n        path: 'users',\n        component: UsersComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AdminRoutingModule {}\n\n@NgModule({\n  imports: [CommonModule, AdminRoutingModule, SharedModule],\n  declarations: [IntroComponent, SettingsComponent, UsersComponent, PatternComponent],\n})\nexport class AdminModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-c9a4a31c4d9a4832e6a9213654ef2274",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AdwpUiWidgetsModule } from '@adwp-ui/widgets';\n\nimport { CoreModule } from '@app/core/core.module';\nimport { ConfigService } from '@app/core/services';\nimport { reducers, StoreEffects } from '@app/core/store';\nimport { environment } from '@env/environment';\nimport { AppComponent } from './app.component';\nimport { EntryModule } from './entry/entry.module';\nimport { MainModule } from './main/main.module';\nimport { SharedModule } from './shared/shared.module';\nimport { LogComponent } from './ws-logs/log.component';\nimport { appInitializer, translateLoader } from '@app/shared/translate/intializer';\nimport { AppRoutingModule } from '@app/app-routing.module';\nimport { ListService } from '@app/shared/components/list/list.service';\nimport { LIST_SERVICE_PROVIDER } from '@app/shared/components/list/list-service-token';\nimport { ADD_SERVICE_PROVIDER } from '@app/shared/add-component/add-service-model';\nimport { AddService } from '@app/shared/add-component/add.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LogComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    CoreModule,\n    SharedModule,\n    EntryModule,\n    MainModule,\n    AppRoutingModule,\n    StoreModule.forRoot(reducers),\n    EffectsModule.forRoot(StoreEffects),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n    TranslateModule.forRoot({\n      defaultLanguage: 'en',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: translateLoader,\n        deps: [HttpClient]\n      }\n    }),\n    AdwpUiWidgetsModule,\n  ],\n  bootstrap: [AppComponent],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (appConfig: ConfigService) => () => appConfig.load(),\n      deps: [ConfigService],\n      multi: true,\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: appInitializer,\n      deps: [TranslateService, Injector],\n      multi: true\n    },\n    {\n      provide: LIST_SERVICE_PROVIDER,\n      useClass: ListService\n    },\n    {\n      provide: ADD_SERVICE_PROVIDER,\n      useClass: AddService\n    },\n  ],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "EntryModule"
                        },
                        {
                            "name": "MainModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-7a949d7d14777f47367cc9c37f405275",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { LogComponent } from '@app/ws-logs/log.component';\nimport { AuthGuard } from '@app/core/auth/auth.guard';\nimport { LoginComponent } from '@app/main/login/login.component';\nimport { ProfileComponent } from '@app/main/profile/profile.component';\nimport { SupportComponent } from '@app/main/support/support.component';\nimport { FatalErrorComponent, GatewayTimeoutComponent, PageNotFoundComponent } from '@app/main/server-status.component';\nimport { HostListComponent } from '@app/components/host/host-list/host-list.component';\nimport { MainInfoComponent } from '@app/shared/components';\nimport { ConfigComponent } from '@app/shared/configuration/main/config.component';\nimport { HostproviderComponent } from '@app/components/hostprovider/hostprovider.component';\nimport { ConfigGroupHostListComponent, ConfigGroupListComponent } from '@app/config-groups';\nimport { HostDetailsComponent } from '@app/components/host/host-details/host-details.component';\nimport { ProviderDetailsComponent } from '@app/components/hostprovider/provider-details/provider-details.component';\nimport { GroupConfigDetailsComponent } from '@app/components/hostprovider/group-config-details/group-config-details.component';\nimport { HostStatusComponent } from '@app/components/host/host-status/host-status.component';\n\nconst routes: Routes = [\n  {\n    path: 'cluster',\n    loadChildren: () => \"import('app/entry/cluster/cluster.module').then(m => m.ClusterModule)\",\n  },\n  {\n    path: 'job',\n    loadChildren: () => \"import('app/entry/job/job.module').then(m => m.JobModule)\",\n  },\n  {\n    path: 'task',\n    loadChildren: () => \"import('app/entry/task/task.module').then(m => m.TaskModule)\",\n  },\n  {\n    path: 'bundle',\n    loadChildren: () => \"import('app/entry/bundle/bundle.module').then(m => m.BundleModule)\",\n  },\n  {\n    path: 'host',\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        component: HostListComponent,\n      }, {\n        path: ':host',\n        component: HostDetailsComponent,\n        children: [\n          { path: '', redirectTo: 'main', pathMatch: 'full' },\n          { path: 'main', component: MainInfoComponent },\n          { path: 'config', component: ConfigComponent },\n          { path: 'status', component: HostStatusComponent },\n        ],\n      }\n    ],\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'provider',\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        component: HostproviderComponent,\n      }, {\n        path: ':provider',\n        component: ProviderDetailsComponent,\n        children: [\n          { path: '', redirectTo: 'main', pathMatch: 'full' },\n          { path: 'main', component: MainInfoComponent },\n          { path: 'config', component: ConfigComponent },\n          { path: 'group_config', component: ConfigGroupListComponent },\n        ]\n      }\n    ],\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'provider/:provider/group_config/:group_config',\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    component: GroupConfigDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'host', pathMatch: 'full' },\n      { path: 'host', component: ConfigGroupHostListComponent },\n      { path: 'config', component: ConfigComponent, data: { isGroupConfig: true } },\n    ],\n  },\n\n  {\n    path: 'cluster/:cluster/host/:host/provider/:provider',\n    redirectTo: 'provider/:provider',\n  },\n  {\n    path: 'host/:host/provider/:provider',\n    redirectTo: 'provider/:provider',\n  },\n  { path: '', redirectTo: 'admin', pathMatch: 'full' },\n  { path: 'log', component: LogComponent, canActivate: [AuthGuard] },\n  { path: 'login', component: LoginComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'support', component: SupportComponent },\n  { path: '404', component: PageNotFoundComponent },\n  { path: '500', component: FatalErrorComponent },\n  { path: '504', component: GatewayTimeoutComponent },\n  {\n    path: 'admin',\n    loadChildren: () => \"import('app/admin/admin.module').then(m => m.AdminModule)\",\n  },\n  { path: '**', component: PageNotFoundComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AttributesModule",
            "id": "module-AttributesModule-dad1aecbe468c094ca4af775ddde34c8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/configuration/attributes/attributes.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "attributeConfig",
                            "type": "AttributesOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<AttributesModule>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "attributeConfig",
                            "type": "AttributesOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { ATTRIBUTES_OPTIONS, AttributeService, AttributesOptions } from './attribute.service';\nimport { GroupKeysWrapperComponent } from './attributes/group-keys/group-keys-wrapper.component';\nimport { ConfigFieldMarker } from './config-field.directive';\nimport { ConfigFieldAttributeProviderComponent } from './attribute-provider.component';\nimport { TooltipModule } from '@app/shared/components/tooltip/tooltip.module';\n\n@NgModule({\n  declarations: [\n    GroupKeysWrapperComponent,\n    ConfigFieldMarker,\n    ConfigFieldAttributeProviderComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatPseudoCheckboxModule,\n    MatCheckboxModule,\n    MatTooltipModule,\n    TooltipModule,\n    ReactiveFormsModule,\n  ],\n  exports: [\n    ConfigFieldAttributeProviderComponent,\n    ConfigFieldMarker\n  ],\n  providers: [AttributeService]\n})\nexport class AttributesModule {\n  static forRoot(attributeConfig: AttributesOptions): ModuleWithProviders<AttributesModule> {\n    return {\n      ngModule: AttributesModule,\n      providers: [{ provide: ATTRIBUTES_OPTIONS, useValue: attributeConfig }]\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AttributeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfigFieldAttributeProviderComponent"
                        },
                        {
                            "name": "ConfigFieldMarker"
                        },
                        {
                            "name": "GroupKeysWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfigFieldAttributeProviderComponent"
                        },
                        {
                            "name": "ConfigFieldMarker"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BundleModule",
            "id": "module-BundleModule-81d62190aa9216e6cc3e41727e48e342",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/bundle/bundle.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthGuard } from '../../core/auth/auth.guard';\nimport { BundleListComponent, MainComponent, LicenseComponent } from './bundle-list.component';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { BundleDetailsComponent } from '../../components/bundle/bundle-details/bundle-details.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    canActivate: [AuthGuard],\n    component: BundleListComponent,\n  },\n  {\n    path: ':bundle',\n    canActivate: [AuthGuard],\n    component: BundleDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainComponent },\n      { path: 'license', component: LicenseComponent },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BundleRoutingModule {}\n\n@NgModule({\n  declarations: [BundleListComponent, MainComponent, LicenseComponent],\n  imports: [CommonModule, SharedModule, BundleRoutingModule, RouterModule, BundleRoutingModule],\n})\nexport class BundleModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BundleListComponent"
                        },
                        {
                            "name": "LicenseComponent"
                        },
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BundleRoutingModule"
                        },
                        {
                            "name": "BundleRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BundleRoutingModule",
            "id": "module-BundleRoutingModule-81d62190aa9216e6cc3e41727e48e342",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/bundle/bundle.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthGuard } from '../../core/auth/auth.guard';\nimport { BundleListComponent, MainComponent, LicenseComponent } from './bundle-list.component';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { BundleDetailsComponent } from '../../components/bundle/bundle-details/bundle-details.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    canActivate: [AuthGuard],\n    component: BundleListComponent,\n  },\n  {\n    path: ':bundle',\n    canActivate: [AuthGuard],\n    component: BundleDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainComponent },\n      { path: 'license', component: LicenseComponent },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BundleRoutingModule {}\n\n@NgModule({\n  declarations: [BundleListComponent, MainComponent, LicenseComponent],\n  imports: [CommonModule, SharedModule, BundleRoutingModule, RouterModule, BundleRoutingModule],\n})\nexport class BundleModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClusterModule",
            "id": "module-ClusterModule-7c9fa6b4346b911c43e60d28977a8364",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/cluster/cluster.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n\nimport { ConfigComponent } from '../../shared/configuration/main/config.component';\nimport { ImportComponent, MainInfoComponent } from '@app/shared/components';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { ClusterListComponent } from './cluster.component';\nimport { HcmapComponent } from '@app/components/cluster/hcmap/hcmap.component';\nimport { ClusterHostComponent } from '../../components/cluster/host/cluster-host.component';\nimport { ServicesComponent } from '@app/components/cluster/services/services.component';\nimport { AuthGuard } from '../../core/auth/auth.guard';\nimport { ServiceComponentsComponent } from '../../components/service-component/service-components.component';\nimport {\n  ConfigGroupHostListComponent,\n  ConfigGroupListComponent,\n  ConfigGroupModule\n} from '../../config-groups';\nimport { ClusterDetailsComponent } from '../../components/cluster/cluster-details/cluster-details.component';\nimport { GroupConfigDetailsComponent } from '../../components/hostprovider/group-config-details/group-config-details.component';\nimport { ServiceDetailsComponent } from '../../components/service/service-details/service-details.component';\nimport { ServiceComponentDetailsComponent } from '../../components/service-component/service-component-details/service-component-details.component';\nimport { HostDetailsComponent } from '../../components/host/host-details/host-details.component';\nimport { ClusterStatusComponent } from '../../components/cluster/cluster-status/cluster-status.component';\nimport { ServiceStatusComponent } from '../../components/service/service-status/service-status.component';\nimport { ServiceComponentStatusComponent } from '../../components/service-component/service-component-status/service-component-status.component';\nimport { HostStatusComponent } from '../../components/host/host-status/host-status.component';\n\nconst clusterRoutes: Routes = [\n  {\n    path: '',\n    component: ClusterListComponent,\n    canActivate: [AuthGuard],\n  },\n  {\n    path: ':cluster',\n    component: ClusterDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'service', component: ServicesComponent },\n      { path: 'host', component: ClusterHostComponent },\n      { path: 'host_component', component: HcmapComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'group_config', component: ConfigGroupListComponent },\n      { path: 'status', component: ClusterStatusComponent },\n      { path: 'import', component: ImportComponent },\n    ],\n  },\n  {\n    path: ':cluster/group_config/:group_config',\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    component: GroupConfigDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'host', pathMatch: 'full' },\n      { path: 'host', component: ConfigGroupHostListComponent },\n      { path: 'config', component: ConfigComponent, data: { isGroupConfig: true } },\n    ],\n  },\n  {\n    path: ':cluster/service/:service',\n    component: ServiceDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'group_config', component: ConfigGroupListComponent },\n      { path: 'status', component: ServiceStatusComponent },\n      { path: 'import', component: ImportComponent },\n      { path: 'component', component: ServiceComponentsComponent },\n    ],\n  },\n  {\n    path: ':cluster/service/:service/group_config/:group_config',\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    component: GroupConfigDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'host', pathMatch: 'full' },\n      { path: 'host', component: ConfigGroupHostListComponent },\n      { path: 'config', component: ConfigComponent, data: { isGroupConfig: true } },\n    ],\n  },\n  {\n    path: ':cluster/service/:service/component/:servicecomponent',\n    component: ServiceComponentDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'group_config', component: ConfigGroupListComponent },\n      { path: 'status', component: ServiceComponentStatusComponent },\n    ],\n  },\n  {\n    path: ':cluster/service/:service/component/:component/group_config/:group_config',\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    component: GroupConfigDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'host', pathMatch: 'full' },\n      { path: 'host', component: ConfigGroupHostListComponent },\n      { path: 'config', component: ConfigComponent, data: { isGroupConfig: true } },\n    ],\n  },\n  {\n    path: ':cluster/host/:host',\n    component: HostDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'status', component: HostStatusComponent },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(clusterRoutes),\n  ],\n  exports: [RouterModule],\n})\nexport class ClusterRoutingModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n    ConfigGroupModule,\n    ClusterRoutingModule,\n  ],\n  declarations: [\n    ClusterListComponent,\n    ServicesComponent,\n    ClusterHostComponent,\n    HcmapComponent,\n    ClusterStatusComponent,\n  ],\n})\nexport class ClusterModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClusterHostComponent"
                        },
                        {
                            "name": "ClusterListComponent"
                        },
                        {
                            "name": "ClusterStatusComponent"
                        },
                        {
                            "name": "HcmapComponent"
                        },
                        {
                            "name": "ServicesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClusterRoutingModule"
                        },
                        {
                            "name": "ConfigGroupModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClusterRoutingModule",
            "id": "module-ClusterRoutingModule-7c9fa6b4346b911c43e60d28977a8364",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/cluster/cluster.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n\nimport { ConfigComponent } from '../../shared/configuration/main/config.component';\nimport { ImportComponent, MainInfoComponent } from '@app/shared/components';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { ClusterListComponent } from './cluster.component';\nimport { HcmapComponent } from '@app/components/cluster/hcmap/hcmap.component';\nimport { ClusterHostComponent } from '../../components/cluster/host/cluster-host.component';\nimport { ServicesComponent } from '@app/components/cluster/services/services.component';\nimport { AuthGuard } from '../../core/auth/auth.guard';\nimport { ServiceComponentsComponent } from '../../components/service-component/service-components.component';\nimport {\n  ConfigGroupHostListComponent,\n  ConfigGroupListComponent,\n  ConfigGroupModule\n} from '../../config-groups';\nimport { ClusterDetailsComponent } from '../../components/cluster/cluster-details/cluster-details.component';\nimport { GroupConfigDetailsComponent } from '../../components/hostprovider/group-config-details/group-config-details.component';\nimport { ServiceDetailsComponent } from '../../components/service/service-details/service-details.component';\nimport { ServiceComponentDetailsComponent } from '../../components/service-component/service-component-details/service-component-details.component';\nimport { HostDetailsComponent } from '../../components/host/host-details/host-details.component';\nimport { ClusterStatusComponent } from '../../components/cluster/cluster-status/cluster-status.component';\nimport { ServiceStatusComponent } from '../../components/service/service-status/service-status.component';\nimport { ServiceComponentStatusComponent } from '../../components/service-component/service-component-status/service-component-status.component';\nimport { HostStatusComponent } from '../../components/host/host-status/host-status.component';\n\nconst clusterRoutes: Routes = [\n  {\n    path: '',\n    component: ClusterListComponent,\n    canActivate: [AuthGuard],\n  },\n  {\n    path: ':cluster',\n    component: ClusterDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'service', component: ServicesComponent },\n      { path: 'host', component: ClusterHostComponent },\n      { path: 'host_component', component: HcmapComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'group_config', component: ConfigGroupListComponent },\n      { path: 'status', component: ClusterStatusComponent },\n      { path: 'import', component: ImportComponent },\n    ],\n  },\n  {\n    path: ':cluster/group_config/:group_config',\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    component: GroupConfigDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'host', pathMatch: 'full' },\n      { path: 'host', component: ConfigGroupHostListComponent },\n      { path: 'config', component: ConfigComponent, data: { isGroupConfig: true } },\n    ],\n  },\n  {\n    path: ':cluster/service/:service',\n    component: ServiceDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'group_config', component: ConfigGroupListComponent },\n      { path: 'status', component: ServiceStatusComponent },\n      { path: 'import', component: ImportComponent },\n      { path: 'component', component: ServiceComponentsComponent },\n    ],\n  },\n  {\n    path: ':cluster/service/:service/group_config/:group_config',\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    component: GroupConfigDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'host', pathMatch: 'full' },\n      { path: 'host', component: ConfigGroupHostListComponent },\n      { path: 'config', component: ConfigComponent, data: { isGroupConfig: true } },\n    ],\n  },\n  {\n    path: ':cluster/service/:service/component/:servicecomponent',\n    component: ServiceComponentDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'group_config', component: ConfigGroupListComponent },\n      { path: 'status', component: ServiceComponentStatusComponent },\n    ],\n  },\n  {\n    path: ':cluster/service/:service/component/:component/group_config/:group_config',\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    component: GroupConfigDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'host', pathMatch: 'full' },\n      { path: 'host', component: ConfigGroupHostListComponent },\n      { path: 'config', component: ConfigComponent, data: { isGroupConfig: true } },\n    ],\n  },\n  {\n    path: ':cluster/host/:host',\n    component: HostDetailsComponent,\n    canActivate: [AuthGuard],\n    canActivateChild: [AuthGuard],\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainInfoComponent },\n      { path: 'config', component: ConfigComponent },\n      { path: 'status', component: HostStatusComponent },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(clusterRoutes),\n  ],\n  exports: [RouterModule],\n})\nexport class ClusterRoutingModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n    ConfigGroupModule,\n    ClusterRoutingModule,\n  ],\n  declarations: [\n    ClusterListComponent,\n    ServicesComponent,\n    ClusterHostComponent,\n    HcmapComponent,\n    ClusterStatusComponent,\n  ],\n})\nexport class ClusterModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigGroupModule",
            "id": "module-ConfigGroupModule-2391140ab0d20e99ac04738b678dd093",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/config-groups/config-group.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConfigGroupHostListComponent, ConfigGroupListComponent } from './pages';\nimport { AdwpListModule } from '@adwp-ui/widgets';\nimport { AddConfigGroupComponent, AddHostToConfigGroupComponent } from './components';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatListModule } from '@angular/material/list';\nimport { AddingModule } from '@app/shared/add-component/adding.module';\nimport { FormElementsModule } from '@app/shared/form-elements/form-elements.module';\nimport { ListService } from '../shared/components/list/list.service';\nimport { LIST_SERVICE_PROVIDER } from '../shared/components/list/list-service-token';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n\n@NgModule({\n  declarations: [\n    ConfigGroupListComponent,\n    AddConfigGroupComponent,\n    ConfigGroupHostListComponent,\n    AddHostToConfigGroupComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    AdwpListModule,\n    MatListModule,\n    AddingModule,\n    FormElementsModule,\n    MatPaginatorModule,\n    MatCheckboxModule\n  ],\n  exports: [\n    AddConfigGroupComponent,\n  ],\n  providers: [\n    {\n      provide: LIST_SERVICE_PROVIDER,\n      useClass: ListService\n    }\n  ]\n})\nexport class ConfigGroupModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddConfigGroupComponent"
                        },
                        {
                            "name": "AddHostToConfigGroupComponent"
                        },
                        {
                            "name": "ConfigGroupHostListComponent"
                        },
                        {
                            "name": "ConfigGroupListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddingModule"
                        },
                        {
                            "name": "FormElementsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddConfigGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigurationModule",
            "id": "module-ConfigurationModule-d03285dec9a658c607cb46aa60d877b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/configuration/configuration.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { FormElementsModule } from '../form-elements/form-elements.module';\nimport { StuffModule } from '../stuff.module';\nimport { FieldService } from './services/field.service';\nimport { FieldComponent } from './field/field.component';\nimport { ConfigFieldsComponent } from './fields/fields.component';\nimport { GroupFieldsComponent } from './group-fields/group-fields.component';\nimport { ConfigComponent } from './main/config.component';\nimport { ItemComponent } from './scheme/item.component';\nimport { RootComponent } from './scheme/root.component';\nimport { SchemeComponent } from './scheme/scheme.component';\nimport { SchemeService } from './scheme/scheme.service';\nimport { ColorOptionDirective } from './tools/color-option.directive';\nimport { HistoryComponent } from './tools/history.component';\nimport { SearchComponent } from './tools/search.component';\nimport { ToolsComponent } from './tools/tools.component';\nimport { YspecService } from './yspec/yspec.service';\nimport { AdwpListModule } from '@adwp-ui/widgets';\nimport { AddingModule } from '@app/shared/add-component/adding.module';\nimport { ConfigService } from '@app/shared/configuration/services/config.service';\nimport { ConfigGroupModule } from '@app/config-groups';\nimport { AttributesModule } from '@app/shared/configuration/attributes/attributes.module';\nimport { ConfigAttributeNames } from '@app/shared/configuration/attributes/attribute.service';\nimport { GroupKeysWrapperComponent } from '@app/shared/configuration/attributes/attributes/group-keys/group-keys-wrapper.component';\n\nconst material = [\n  MatIconModule,\n  MatInputModule,\n  MatButtonModule,\n  MatSelectModule,\n  MatOptionModule,\n  MatCheckboxModule,\n  MatTooltipModule,\n  MatToolbarModule,\n  MatFormFieldModule,\n  MatExpansionModule,\n  MatSlideToggleModule,\n  MatListModule,\n];\n\n@NgModule({\n  declarations: [\n    FieldComponent,\n    ConfigFieldsComponent,\n    GroupFieldsComponent,\n    ConfigComponent,\n    HistoryComponent,\n    SearchComponent,\n    ColorOptionDirective,\n    ToolsComponent,\n    SchemeComponent,\n    RootComponent,\n    ItemComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    StuffModule,\n    FormElementsModule,\n    ...material,\n    AdwpListModule,\n    AddingModule,\n    ConfigGroupModule,\n    AttributesModule.forRoot({\n      group_keys: {\n        name: ConfigAttributeNames.GROUP_KEYS,\n        wrapper: GroupKeysWrapperComponent,\n        options: {\n          tooltipText: 'Group parameter'\n        }\n      },\n      custom_group_keys: {\n        name: ConfigAttributeNames.CUSTOM_GROUP_KEYS,\n        options: {\n          tooltipText: 'This parameter can not be added to config group'\n        }\n      }\n    })\n  ],\n  exports: [ConfigComponent, ConfigFieldsComponent],\n  providers: [FieldService, YspecService, SchemeService, ConfigService],\n})\nexport class ConfigurationModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConfigService"
                        },
                        {
                            "name": "FieldService"
                        },
                        {
                            "name": "SchemeService"
                        },
                        {
                            "name": "YspecService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColorOptionDirective"
                        },
                        {
                            "name": "ConfigComponent"
                        },
                        {
                            "name": "ConfigFieldsComponent"
                        },
                        {
                            "name": "FieldComponent"
                        },
                        {
                            "name": "GroupFieldsComponent"
                        },
                        {
                            "name": "HistoryComponent"
                        },
                        {
                            "name": "ItemComponent"
                        },
                        {
                            "name": "RootComponent"
                        },
                        {
                            "name": "SchemeComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "ToolsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddingModule"
                        },
                        {
                            "name": "AttributesModule"
                        },
                        {
                            "name": "ConfigGroupModule"
                        },
                        {
                            "name": "FormElementsModule"
                        },
                        {
                            "name": "StuffModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfigComponent"
                        },
                        {
                            "name": "ConfigFieldsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-2299f688192757b5ffaae80fb15cf6f6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { ApiService } from '@app/core/api';\nimport { AuthGuard } from './auth/auth.guard';\nimport { AuthService } from './auth/auth.service';\nimport { RequestCacheService, RequestCache } from '@app/core/http-interseptors/request-cache.service';\nimport { CachingInterseptor } from '@app/core/http-interseptors/caching-interseptor';\nimport { AuthInterceptor } from '@app/core/http-interseptors/auth-interseptor';\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [\n    ApiService,\n    { provide: RequestCache, useClass: RequestCacheService },\n    { provide: HTTP_INTERCEPTORS, useClass: CachingInterseptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    AuthGuard,\n    AuthService\n  ],\n})\nexport class CoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiService"
                        },
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "CachingInterseptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DetailsModule",
            "id": "module-DetailsModule-d480eedd93d23f48d0052c623f547382",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/details/details.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { RouterModule } from '@angular/router';\nimport { AdwpListModule } from '@adwp-ui/widgets';\n\nimport { StuffModule } from '../stuff.module';\nimport { SubtitleComponent } from './subtitle.component';\nimport { NavigationComponent } from '@app/components/navigation/navigation.component';\nimport { ActionsButtonComponent } from '@app/components/actions-button/actions-button.component';\n\nimport { NavItemPipe } from '@app/pipes/nav-item.pipe';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ObjectLinkColumnPipe } from '@app/pipes/object-link-column.pipe';\nimport { SortObjectsPipe } from '@app/pipes/sort-objects.pipe';\nimport { TaskObjectsComponent } from '@app/components/columns/task-objects/task-objects.component';\nimport { HostDetailsComponent } from '@app/components/host/host-details/host-details.component';\nimport { LeftMenuComponent } from './left-menu/left-menu.component';\nimport { LabelMenuItemComponent } from './left-menu-items/label-menu-item/label-menu-item.component';\nimport { StatusMenuItemComponent } from './left-menu-items/status-menu-item/status-menu-item.component';\nimport { ProviderDetailsComponent } from '@app/components/hostprovider/provider-details/provider-details.component';\nimport { GroupConfigDetailsComponent } from '@app/components/hostprovider/group-config-details/group-config-details.component';\nimport { BundleDetailsComponent } from '@app/components/bundle/bundle-details/bundle-details.component';\nimport { ServiceDetailsComponent } from '@app/components/service/service-details/service-details.component';\nimport { ServiceComponentDetailsComponent } from '@app/components/service-component/service-component-details/service-component-details.component';\nimport { JobDetailsComponent } from '@app/components/job/job-details/job-details.component';\nimport { ClusterDetailsComponent } from '@app/components/cluster/cluster-details/cluster-details.component';\nimport { LogMenuItemComponent } from './left-menu-items/log-menu-item/log-menu-item.component';\nimport { ConcernMenuItemComponent } from '@app/shared/details/left-menu-items/concern-menu-item/concern-menu-item.component';\nimport { ConcernMenuItemPipe } from './left-menu-items/concern-menu-item/concern-menu-item.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    StuffModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTooltipModule,\n    AdwpListModule.forRoot({\n      itemsPerPage: [10, 25, 50, 100],\n    }),\n  ],\n  exports: [\n    ServiceDetailsComponent,\n    HostDetailsComponent,\n    ProviderDetailsComponent,\n    GroupConfigDetailsComponent,\n    ServiceComponentDetailsComponent,\n    ClusterDetailsComponent,\n    BundleDetailsComponent,\n    JobDetailsComponent,\n    ActionsButtonComponent,\n    ObjectLinkColumnPipe,\n    SortObjectsPipe,\n    AdwpListModule,\n    TaskObjectsComponent,\n  ],\n  declarations: [\n    ServiceDetailsComponent,\n    HostDetailsComponent,\n    ProviderDetailsComponent,\n    GroupConfigDetailsComponent,\n    ServiceComponentDetailsComponent,\n    ClusterDetailsComponent,\n    BundleDetailsComponent,\n    JobDetailsComponent,\n    SubtitleComponent,\n    NavigationComponent,\n    ActionsButtonComponent,\n\n    NavItemPipe,\n    ObjectLinkColumnPipe,\n    SortObjectsPipe,\n    TaskObjectsComponent,\n    LeftMenuComponent,\n    LabelMenuItemComponent,\n    StatusMenuItemComponent,\n    LogMenuItemComponent,\n    ConcernMenuItemComponent,\n    ConcernMenuItemPipe,\n  ],\n})\nexport class DetailsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionsButtonComponent"
                        },
                        {
                            "name": "BundleDetailsComponent"
                        },
                        {
                            "name": "ClusterDetailsComponent"
                        },
                        {
                            "name": "ConcernMenuItemComponent"
                        },
                        {
                            "name": "ConcernMenuItemPipe"
                        },
                        {
                            "name": "GroupConfigDetailsComponent"
                        },
                        {
                            "name": "HostDetailsComponent"
                        },
                        {
                            "name": "JobDetailsComponent"
                        },
                        {
                            "name": "LabelMenuItemComponent"
                        },
                        {
                            "name": "LeftMenuComponent"
                        },
                        {
                            "name": "LogMenuItemComponent"
                        },
                        {
                            "name": "NavItemPipe"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "ObjectLinkColumnPipe"
                        },
                        {
                            "name": "ProviderDetailsComponent"
                        },
                        {
                            "name": "ServiceComponentDetailsComponent"
                        },
                        {
                            "name": "ServiceDetailsComponent"
                        },
                        {
                            "name": "SortObjectsPipe"
                        },
                        {
                            "name": "StatusMenuItemComponent"
                        },
                        {
                            "name": "SubtitleComponent"
                        },
                        {
                            "name": "TaskObjectsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "StuffModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActionsButtonComponent"
                        },
                        {
                            "name": "BundleDetailsComponent"
                        },
                        {
                            "name": "ClusterDetailsComponent"
                        },
                        {
                            "name": "GroupConfigDetailsComponent"
                        },
                        {
                            "name": "HostDetailsComponent"
                        },
                        {
                            "name": "JobDetailsComponent"
                        },
                        {
                            "name": "ObjectLinkColumnPipe"
                        },
                        {
                            "name": "ProviderDetailsComponent"
                        },
                        {
                            "name": "ServiceComponentDetailsComponent"
                        },
                        {
                            "name": "ServiceDetailsComponent"
                        },
                        {
                            "name": "SortObjectsPipe"
                        },
                        {
                            "name": "TaskObjectsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EntryModule",
            "id": "module-EntryModule-6ca66d8433e3a12eb253c4ab801d95b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/entry.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@app/shared/shared.module';\nimport { HostproviderComponent } from '@app/components/hostprovider/hostprovider.component';\nimport { HostListComponent } from '@app/components/host/host-list/host-list.component';\n\n@NgModule({\n  imports: [CommonModule, SharedModule],\n  declarations: [HostproviderComponent, HostListComponent],\n})\nexport class EntryModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HostListComponent"
                        },
                        {
                            "name": "HostproviderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormElementsModule",
            "id": "module-FormElementsModule-c2b6308ea70cef328de93ef271dab8f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/form-elements/form-elements.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { StuffModule } from '../stuff.module';\nimport { BooleanComponent } from './boolean.component';\nimport { BundlesComponent } from './bundles.component';\nimport { ButtonUploaderComponent } from './button-uploader.component';\nimport { ConfirmEqualValidatorDirective } from './confirm-equal-validator.directive';\nimport { DropdownComponent } from './dropdown.component';\nimport { ErrorInfoComponent } from './error-info.component';\nimport { FieldDirective } from './field.directive';\nimport { InputComponent } from './input.component';\nimport { JsonComponent } from './json.component';\nimport { BaseMapListDirective, FieldListComponent, FieldMapComponent } from './map.component';\nimport { PasswordComponent } from './password/password.component';\nimport { TextBoxComponent } from './text-box.component';\nimport { TextareaComponent } from './textarea.component';\nimport { VariantComponent } from './variant.component';\nimport { SecretTextComponent } from './secret-text/secret-text.component';\n\n@NgModule({\n  declarations: [\n    PasswordComponent,\n    BooleanComponent,\n    TextBoxComponent,\n    TextareaComponent,\n    JsonComponent,\n    DropdownComponent,\n    BundlesComponent,\n    ButtonUploaderComponent,\n    FieldListComponent,\n    FieldMapComponent,\n    InputComponent,\n    BaseMapListDirective,\n    ConfirmEqualValidatorDirective,\n    FieldDirective,\n    ErrorInfoComponent,\n    VariantComponent,\n    SecretTextComponent\n  ],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MaterialModule, StuffModule],\n  exports: [\n    FieldListComponent,\n    FieldMapComponent,\n    PasswordComponent,\n    BooleanComponent,\n    TextBoxComponent,\n    TextareaComponent,\n    JsonComponent,\n    DropdownComponent,\n    BundlesComponent,\n    InputComponent,\n    ButtonUploaderComponent,\n    VariantComponent,\n    ConfirmEqualValidatorDirective,\n    SecretTextComponent\n  ],\n})\nexport class FormElementsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseMapListDirective"
                        },
                        {
                            "name": "BooleanComponent"
                        },
                        {
                            "name": "BundlesComponent"
                        },
                        {
                            "name": "ButtonUploaderComponent"
                        },
                        {
                            "name": "ConfirmEqualValidatorDirective"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "ErrorInfoComponent"
                        },
                        {
                            "name": "FieldDirective"
                        },
                        {
                            "name": "FieldListComponent"
                        },
                        {
                            "name": "FieldMapComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "JsonComponent"
                        },
                        {
                            "name": "PasswordComponent"
                        },
                        {
                            "name": "SecretTextComponent"
                        },
                        {
                            "name": "TextBoxComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "VariantComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "StuffModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BooleanComponent"
                        },
                        {
                            "name": "BundlesComponent"
                        },
                        {
                            "name": "ButtonUploaderComponent"
                        },
                        {
                            "name": "ConfirmEqualValidatorDirective"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "FieldListComponent"
                        },
                        {
                            "name": "FieldMapComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "JsonComponent"
                        },
                        {
                            "name": "PasswordComponent"
                        },
                        {
                            "name": "SecretTextComponent"
                        },
                        {
                            "name": "TextBoxComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "VariantComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HostComponentsMapModule",
            "id": "module-HostComponentsMapModule-69a9aa35c7f0d939a536ed1cb5bfd527",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/host-components-map/host-components-map.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { MaterialModule } from '../material.module';\nimport { StuffModule } from '../stuff.module';\nimport { HolderDirective } from './holder.directive';\nimport { Much2ManyComponent } from './much-2-many/much-2-many.component';\nimport { ServiceHostComponent } from './services2hosts/service-host.component';\nimport { TakeService } from './take.service';\nimport { AddingModule } from '../add-component/adding.module';\nimport { DependenciesComponent } from './dependencies.component';\n\n@NgModule({\n  declarations: [HolderDirective, ServiceHostComponent, Much2ManyComponent, DependenciesComponent],\n  imports: [CommonModule, MaterialModule, RouterModule, StuffModule, AddingModule],\n  exports: [ServiceHostComponent],\n  providers: [TakeService]\n})\nexport class HostComponentsMapModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TakeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DependenciesComponent"
                        },
                        {
                            "name": "HolderDirective"
                        },
                        {
                            "name": "Much2ManyComponent"
                        },
                        {
                            "name": "ServiceHostComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddingModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "StuffModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ServiceHostComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JobModule",
            "id": "module-JobModule-7ffd2f97e77e9a469480e89131a04009",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/job/job.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from '@app/shared/shared.module';\nimport { JobInfoComponent } from './job-info.component';\nimport { JobRoutingModule } from './job-routing.module';\nimport { MainComponent } from './job.component';\nimport { LogComponent } from './log/log.component';\nimport { CheckComponent } from './log/check.component';\nimport { TextComponent } from './log/text.component';\n\n\n@NgModule({\n  declarations: [\n    MainComponent,\n    LogComponent,\n    JobInfoComponent,\n    CheckComponent,\n    TextComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n    JobRoutingModule,\n  ]\n})\nexport class JobModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckComponent"
                        },
                        {
                            "name": "JobInfoComponent"
                        },
                        {
                            "name": "LogComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "TextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "JobRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JobRoutingModule",
            "id": "module-JobRoutingModule-66db9b0e3b72ad9112e4172b0837037e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/job/job-routing.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AuthGuard } from '@app/core/auth/auth.guard';\nimport { MainComponent } from './job.component';\nimport { LogComponent } from './log/log.component';\nimport { JobDetailsComponent } from '../../components/job/job-details/job-details.component';\n\nconst routes: Routes = [\n  {\n    path: ':job',\n    canActivate: [AuthGuard],\n    component: JobDetailsComponent,\n    children: [\n      { path: '', redirectTo: 'main', pathMatch: 'full' },\n      { path: 'main', component: MainComponent },\n      { path: ':log', component: LogComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class JobRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-fdbba2cbab2bb6d3d4180f2f37ded576",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/main.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from '@app/shared/shared.module';\nimport { LoginComponent } from './login/login.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { SupportComponent } from './support/support.component';\nimport { TopComponent } from './top/top.component';\nimport { ProgressComponent } from './progress.component';\nimport { PageNotFoundComponent, FatalErrorComponent, GatewayTimeoutComponent } from './server-status.component';\nimport { BellComponent } from '@app/components/bell/bell.component';\nimport { NotificationsComponent } from '@app/components/notifications/notifications.component';\nimport { BellTaskLinkPipe } from '@app/pipes/bell-task-link.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n  ],\n  declarations: [\n    LoginComponent,\n    ProfileComponent,\n    SupportComponent,\n    FatalErrorComponent,\n    GatewayTimeoutComponent,\n    PageNotFoundComponent,\n    TopComponent,\n    ProgressComponent,\n    BellComponent,\n    NotificationsComponent,\n    BellTaskLinkPipe,\n  ],\n  exports: [\n    TopComponent,\n    BellComponent,\n    ProgressComponent,\n  ],\n})\nexport class MainModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BellComponent"
                        },
                        {
                            "name": "BellTaskLinkPipe"
                        },
                        {
                            "name": "FatalErrorComponent"
                        },
                        {
                            "name": "GatewayTimeoutComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "ProgressComponent"
                        },
                        {
                            "name": "SupportComponent"
                        },
                        {
                            "name": "TopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BellComponent"
                        },
                        {
                            "name": "ProgressComponent"
                        },
                        {
                            "name": "TopComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-44163574f2b107a457519c1ad2ba9c37",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/material.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule } from '@angular/core';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\n@NgModule({\n  exports: [\n    MatStepperModule,\n    CdkTableModule,\n    MatSlideToggleModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatMenuModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatIconModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatSliderModule,\n    MatButtonToggleModule,\n  ],\n})\nexport class MaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-5f20077c68342310fb4a7191435f4095",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatTreeModule } from '@angular/material/tree';\n\nimport { AddingModule } from './add-component/adding.module';\nimport {\n  ActionMasterComponent,\n  ButtonSpinnerComponent,\n  DialogComponent,\n  ExportComponent,\n  ImportComponent,\n  IssueInfoComponent,\n  MainInfoComponent,\n  StatusInfoComponent,\n  UpgradeComponent,\n} from './components';\nimport { ActionMasterConfigComponent } from './components/actions/master/action-master-config.component';\nimport { MultiSortDirective } from './components/list/multi-sort.directive';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { DetailsModule } from './details/details.module';\nimport { DynamicDirective, HoverDirective } from './directives';\nimport { FormElementsModule } from './form-elements/form-elements.module';\nimport { HostComponentsMapModule } from './host-components-map/host-components-map.module';\nimport { MaterialModule } from './material.module';\nimport { BreakRowPipe, TagEscPipe } from './pipes';\nimport { StuffModule } from './stuff.module';\nimport { StatusColumnComponent } from '@app/components/columns/status-column/status-column.component';\nimport { StateColumnComponent } from '@app/components/columns/state-column/state-column.component';\nimport { EditionColumnComponent } from '@app/components/columns/edition-column/edition-column.component';\nimport { ClusterColumnComponent } from '@app/components/columns/cluster-column/cluster-column.component';\nimport { ServiceComponentsComponent } from '@app/components/service-component/service-components.component';\nimport { JobService } from '@app/services/job.service';\nimport { TaskService } from '@app/services/task.service';\nimport { ToDataSourcePipe } from '@app/pipes/to-data-source.pipe';\nimport { PickKeysPipe } from '@app/pipes/pick-keys.pipe';\nimport { TranslateKeysPipe } from '@app/pipes/translate-object-keys.pipe';\nimport { TooltipModule } from '@app/shared/components/tooltip/tooltip.module';\nimport { StatusTreeComponent } from '@app/components/status-tree/status-tree.component';\nimport { HostStatusComponent } from '@app/components/host/host-status/host-status.component';\nimport { EntityStatusToStatusTreePipe } from '@app/pipes/entity-status-to-status-tree.pipe';\nimport { ServiceStatusComponent } from '@app/components/service/service-status/service-status.component';\nimport { ServiceComponentStatusComponent } from '@app/components/service-component/service-component-status/service-component-status.component';\nimport { StatusTreeLinkPipe } from '@app/pipes/status-tree-link.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    StuffModule,\n    FormElementsModule,\n    ConfigurationModule,\n    AddingModule,\n    HostComponentsMapModule,\n    DetailsModule,\n    TranslateModule,\n    TooltipModule,\n    MatTreeModule,\n  ],\n  declarations: [\n    DialogComponent,\n    BreakRowPipe,\n    HoverDirective,\n    DynamicDirective,\n    ButtonSpinnerComponent,\n    TagEscPipe,\n    IssueInfoComponent,\n    HostStatusComponent,\n    ServiceStatusComponent,\n    StatusInfoComponent,\n    MainInfoComponent,\n    MultiSortDirective,\n    ImportComponent,\n    ExportComponent,\n    ActionMasterComponent,\n    ActionMasterConfigComponent,\n    StatusColumnComponent,\n    StateColumnComponent,\n    EditionColumnComponent,\n    ClusterColumnComponent,\n    ServiceComponentsComponent,\n    ServiceComponentStatusComponent,\n    ToDataSourcePipe,\n    PickKeysPipe,\n    TranslateKeysPipe,\n    StatusTreeComponent,\n    EntityStatusToStatusTreePipe,\n    StatusTreeLinkPipe,\n  ],\n  exports: [\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    StuffModule,\n    FormElementsModule,\n    ConfigurationModule,\n    AddingModule,\n    HostComponentsMapModule,\n    DetailsModule,\n    DialogComponent,\n    BreakRowPipe,\n    HoverDirective,\n    DynamicDirective,\n    ButtonSpinnerComponent,\n    UpgradeComponent,\n    TagEscPipe,\n    HostStatusComponent,\n    ServiceStatusComponent,\n    StatusInfoComponent,\n    MainInfoComponent,\n    ImportComponent,\n    ExportComponent,\n    StatusColumnComponent,\n    StateColumnComponent,\n    EditionColumnComponent,\n    ClusterColumnComponent,\n    ServiceComponentsComponent,\n    ServiceComponentStatusComponent,\n    ToDataSourcePipe,\n    PickKeysPipe,\n    TranslateKeysPipe,\n    TooltipModule,\n    StatusTreeComponent,\n    EntityStatusToStatusTreePipe,\n    StatusTreeLinkPipe,\n  ],\n  providers: [\n    JobService,\n    TaskService,\n  ],\n})\nexport class SharedModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "JobService"
                        },
                        {
                            "name": "TaskService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionMasterComponent"
                        },
                        {
                            "name": "ActionMasterConfigComponent"
                        },
                        {
                            "name": "BreakRowPipe"
                        },
                        {
                            "name": "ButtonSpinnerComponent"
                        },
                        {
                            "name": "ClusterColumnComponent"
                        },
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "DynamicDirective"
                        },
                        {
                            "name": "EditionColumnComponent"
                        },
                        {
                            "name": "EntityStatusToStatusTreePipe"
                        },
                        {
                            "name": "ExportComponent"
                        },
                        {
                            "name": "HostStatusComponent"
                        },
                        {
                            "name": "HoverDirective"
                        },
                        {
                            "name": "ImportComponent"
                        },
                        {
                            "name": "IssueInfoComponent"
                        },
                        {
                            "name": "MainInfoComponent"
                        },
                        {
                            "name": "MultiSortDirective"
                        },
                        {
                            "name": "PickKeysPipe"
                        },
                        {
                            "name": "ServiceComponentStatusComponent"
                        },
                        {
                            "name": "ServiceComponentsComponent"
                        },
                        {
                            "name": "ServiceStatusComponent"
                        },
                        {
                            "name": "StateColumnComponent"
                        },
                        {
                            "name": "StatusColumnComponent"
                        },
                        {
                            "name": "StatusInfoComponent"
                        },
                        {
                            "name": "StatusTreeComponent"
                        },
                        {
                            "name": "StatusTreeLinkPipe"
                        },
                        {
                            "name": "TagEscPipe"
                        },
                        {
                            "name": "ToDataSourcePipe"
                        },
                        {
                            "name": "TranslateKeysPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddingModule"
                        },
                        {
                            "name": "ConfigurationModule"
                        },
                        {
                            "name": "DetailsModule"
                        },
                        {
                            "name": "FormElementsModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "StuffModule"
                        },
                        {
                            "name": "TooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddingModule"
                        },
                        {
                            "name": "BreakRowPipe"
                        },
                        {
                            "name": "ButtonSpinnerComponent"
                        },
                        {
                            "name": "ClusterColumnComponent"
                        },
                        {
                            "name": "ConfigurationModule"
                        },
                        {
                            "name": "DetailsModule"
                        },
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "DynamicDirective"
                        },
                        {
                            "name": "EditionColumnComponent"
                        },
                        {
                            "name": "EntityStatusToStatusTreePipe"
                        },
                        {
                            "name": "ExportComponent"
                        },
                        {
                            "name": "FormElementsModule"
                        },
                        {
                            "name": "HostStatusComponent"
                        },
                        {
                            "name": "HoverDirective"
                        },
                        {
                            "name": "ImportComponent"
                        },
                        {
                            "name": "MainInfoComponent"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PickKeysPipe"
                        },
                        {
                            "name": "ServiceComponentStatusComponent"
                        },
                        {
                            "name": "ServiceComponentsComponent"
                        },
                        {
                            "name": "ServiceStatusComponent"
                        },
                        {
                            "name": "StateColumnComponent"
                        },
                        {
                            "name": "StatusColumnComponent"
                        },
                        {
                            "name": "StatusInfoComponent"
                        },
                        {
                            "name": "StatusTreeComponent"
                        },
                        {
                            "name": "StatusTreeLinkPipe"
                        },
                        {
                            "name": "StuffModule"
                        },
                        {
                            "name": "TagEscPipe"
                        },
                        {
                            "name": "ToDataSourcePipe"
                        },
                        {
                            "name": "TooltipModule"
                        },
                        {
                            "name": "TranslateKeysPipe"
                        },
                        {
                            "name": "UpgradeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StuffModule",
            "id": "module-StuffModule-6c018707ee0761b1cbb0e96a9cc34442",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/stuff.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ActionsComponent, CrumbsComponent, UpgradeComponent } from './components';\nimport { ActionListComponent } from './components/actions/action-list/action-list.component';\nimport { ActionsDirective } from './components/actions/actions.directive';\nimport { TooltipDirective } from '@app/shared/components/tooltip';\nimport { PopoverDirective } from '@app/directives/popover.directive';\nimport {\n  BaseDirective,\n  ForTestDirective,\n  InfinityScrollDirective,\n  MTextareaDirective,\n  ScrollDirective,\n  SocketListenerDirective\n} from './directives';\nimport { MaterialModule } from './material.module';\nimport { MenuItemComponent } from './components/actions/action-list/menu-item/menu-item.component';\nimport { PopoverComponent } from '@app/components/popover/popover.component';\nimport { KeysPipe } from '@app/pipes/keys.pipe';\nimport { IsArrayPipe } from '@app/pipes/is-array.pipe';\nimport { IssuePathPipe } from '@app/pipes/issue-path.pipe';\nimport { ConcernComponent } from '@app/components/concern/concern.component';\nimport { ConcernService } from '@app/services/concern.service';\nimport { ConcernItemComponent } from '@app/components/concern/concern-item/concern-item.component';\nimport { IssueMessagePlaceholderPipe } from '@app/pipes/issue-message-placeholder.pipe';\nimport { ConcernListComponent } from '@app/components/concern/concern-list/concern-list.component';\nimport { ConcernListRefComponent } from '@app/components/concern/concern-list-ref/concern-list-ref.component';\nimport { TooltipModule } from '@app/shared/components/tooltip/tooltip.module';\n\n@NgModule({\n  declarations: [\n    ForTestDirective,\n    MTextareaDirective,\n    BaseDirective,\n    SocketListenerDirective,\n    CrumbsComponent,\n    UpgradeComponent,\n    ScrollDirective,\n    InfinityScrollDirective,\n    ActionsComponent,\n    ActionsDirective,\n    ActionListComponent,\n    MenuItemComponent,\n    PopoverDirective,\n    PopoverComponent,\n    ConcernComponent,\n    ConcernItemComponent,\n    IssueMessagePlaceholderPipe,\n    ConcernListComponent,\n    ConcernListRefComponent,\n    KeysPipe,\n    IsArrayPipe,\n    IssuePathPipe,\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    RouterModule,\n    TooltipModule\n  ],\n  exports: [\n    ForTestDirective,\n    TooltipDirective,\n    MTextareaDirective,\n    BaseDirective,\n    SocketListenerDirective,\n    CrumbsComponent,\n    UpgradeComponent,\n    ScrollDirective,\n    InfinityScrollDirective,\n    ActionsComponent,\n    ActionsDirective,\n    ActionListComponent,\n    MenuItemComponent,\n    PopoverDirective,\n    PopoverComponent,\n    ConcernComponent,\n    ConcernItemComponent,\n    IssueMessagePlaceholderPipe,\n    ConcernListComponent,\n    KeysPipe,\n    IsArrayPipe,\n    IssuePathPipe,\n    ConcernListRefComponent,\n    TooltipModule\n  ],\n  providers: [\n    ConcernService,\n  ],\n})\nexport class StuffModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConcernService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionListComponent"
                        },
                        {
                            "name": "ActionsComponent"
                        },
                        {
                            "name": "ActionsDirective"
                        },
                        {
                            "name": "BaseDirective"
                        },
                        {
                            "name": "ConcernComponent"
                        },
                        {
                            "name": "ConcernItemComponent"
                        },
                        {
                            "name": "ConcernListComponent"
                        },
                        {
                            "name": "ConcernListRefComponent"
                        },
                        {
                            "name": "CrumbsComponent"
                        },
                        {
                            "name": "ForTestDirective"
                        },
                        {
                            "name": "InfinityScrollDirective"
                        },
                        {
                            "name": "IsArrayPipe"
                        },
                        {
                            "name": "IssueMessagePlaceholderPipe"
                        },
                        {
                            "name": "IssuePathPipe"
                        },
                        {
                            "name": "KeysPipe"
                        },
                        {
                            "name": "MTextareaDirective"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "PopoverComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "ScrollDirective"
                        },
                        {
                            "name": "SocketListenerDirective"
                        },
                        {
                            "name": "UpgradeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "TooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActionListComponent"
                        },
                        {
                            "name": "ActionsComponent"
                        },
                        {
                            "name": "ActionsDirective"
                        },
                        {
                            "name": "BaseDirective"
                        },
                        {
                            "name": "ConcernComponent"
                        },
                        {
                            "name": "ConcernItemComponent"
                        },
                        {
                            "name": "ConcernListComponent"
                        },
                        {
                            "name": "ConcernListRefComponent"
                        },
                        {
                            "name": "CrumbsComponent"
                        },
                        {
                            "name": "ForTestDirective"
                        },
                        {
                            "name": "InfinityScrollDirective"
                        },
                        {
                            "name": "IsArrayPipe"
                        },
                        {
                            "name": "IssueMessagePlaceholderPipe"
                        },
                        {
                            "name": "IssuePathPipe"
                        },
                        {
                            "name": "KeysPipe"
                        },
                        {
                            "name": "MTextareaDirective"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "PopoverComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "ScrollDirective"
                        },
                        {
                            "name": "SocketListenerDirective"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "TooltipModule"
                        },
                        {
                            "name": "UpgradeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "id": "module-TaskModule-378babf3a59c15abcccd708605a303c1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entry/task/task.module.ts",
            "methods": [],
            "sourceCode": "// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../../core/auth/auth.guard';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { HoverDirective } from './hover.directive';\nimport { TasksComponent } from './tasks.component';\nimport { TaskStatusColumnComponent } from '@app/components/columns/task-status-column/task-status-column.component';\nimport { JobsComponent } from '@app/components/job/jobs/jobs.component';\nimport { JobStatusColumnComponent } from '@app/components/columns/job-status-column/job-status-column.component';\nimport { TaskNameComponent } from '@app/components/columns/task-name/task-name.component';\nimport { JobNameComponent } from '@app/components/columns/job-name/job-name.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    canActivate: [AuthGuard],\n    component: TasksComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [\n    TasksComponent,\n    HoverDirective,\n    TaskStatusColumnComponent,\n    TaskNameComponent,\n    JobNameComponent,\n    JobsComponent,\n    JobStatusColumnComponent,\n  ],\n})\nexport class TaskModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HoverDirective"
                        },
                        {
                            "name": "JobNameComponent"
                        },
                        {
                            "name": "JobStatusColumnComponent"
                        },
                        {
                            "name": "JobsComponent"
                        },
                        {
                            "name": "TaskNameComponent"
                        },
                        {
                            "name": "TaskStatusColumnComponent"
                        },
                        {
                            "name": "TasksComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-66c93f74ae899548f9d04b6aa647eb5c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/components/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SimpleTextComponent, TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\n\n\n@NgModule({\n  declarations: [TooltipComponent, SimpleTextComponent, TooltipDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [TooltipComponent, SimpleTextComponent, TooltipDirective]\n})\nexport class TooltipModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SimpleTextComponent"
                        },
                        {
                            "name": "TooltipComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SimpleTextComponent"
                        },
                        {
                            "name": "TooltipComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__karma__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "accord",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: IActionParameter): ((b: CompTile) => boolean) => (b: CompTile): boolean =>\n  b.component === `${a.service}/${a.component}`"
            },
            {
                "name": "ACKNOWLEDGE_EVENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notifications/notifications.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'acknowledge'"
            },
            {
                "name": "ADD_SERVICE_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/add-component/add-service-model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<IAddService>('AddService')"
            },
            {
                "name": "adjectives",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/add-component/naming.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\n  'Ancient',\n  'Beautiful',\n  'Big',\n  'Blue',\n  'Broad',\n  'Clear',\n  'Cold',\n  'Dark',\n  'Deep',\n  'Distant',\n  'Down',\n  'Dry',\n  'Famous',\n  'Fear',\n  'Flowing',\n  'Frozen',\n  'Great',\n  'Holy',\n  'Huge',\n  'Icy',\n  'Large',\n  'Latter',\n  'Longest',\n  'Lovely',\n  'Lower',\n  'Mad',\n  'Magnificent',\n  'Majestic',\n  'Middle',\n  'Mighty',\n  'Muddy',\n  'Narrow',\n  'Noble',\n  'North',\n  'Placid',\n  'Polluted',\n  'Quiet',\n  'Rapid',\n  'Sacred',\n  'Shallow',\n  'Slow',\n  'Sluggish',\n  'Small',\n  'Swift',\n  'Tidal',\n  'Tributary',\n  'Turbulent',\n  'Wide',\n  'Wild',\n]"
            },
            {
                "name": "ATTRIBUTES_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Attributes options')"
            },
            {
                "name": "authCheck",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] Check')"
            },
            {
                "name": "authFaled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] LoginFaled', props<{ message: string }>())"
            },
            {
                "name": "authLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] Login', props<{ login: string; password: string }>())"
            },
            {
                "name": "authLogout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] Logout')"
            },
            {
                "name": "authSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] LoginSuccess', props<{ login: string }>())"
            },
            {
                "name": "BACK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/router/router.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Router] Back'"
            },
            {
                "name": "Bell",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/bell.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({ })"
            },
            {
                "name": "checkActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(host_id: number, com: CompTile, action: 'add' | 'remove', load: StatePost): boolean => {\n  if (com.actions?.length) {\n    if (action === 'remove') return flag(host_id, com, load) ? com.actions.some((a) => a === 'remove') : true;\n    if (action === 'add') return flag(host_id, com, load) ? true : com.actions.some((a) => a === 'add');\n  } else return true;\n}"
            },
            {
                "name": "checkConstraint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(c: TConstraint, r: number): boolean => {\n  if (!c?.length) return true;\n  const v = c[c.length - 1];\n  return v === '+' || v === 'odd' || v > r || v === 'depend';\n}"
            },
            {
                "name": "checkDependencies",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(c: CompTile, cs: CompTile[]): void =>\n  findDependencies(c, cs).forEach((a) => (a.limit = a.limit ? [...a.limit, 'depend'] : ['depend']))"
            },
            {
                "name": "checkIssue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/issue.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getIssueSelector,\n  state => state\n)"
            },
            {
                "name": "checkRequires",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(component: CompTile, cs: CompTile[]): IRequires[] =>\n  component.requires.reduce<IRequires[]>(\n    (p, c) => (c.components.every((a) => cs.some((b) => b.prototype_id === a.prototype_id)) ? p : [...p, c]),\n    []\n  )"
            },
            {
                "name": "clearMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Socket] Clear messages')"
            },
            {
                "name": "clearProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Profile] ClearProfile')"
            },
            {
                "name": "COLUMNS_SET",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list/list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  cluster: ['name', 'prototype_version', 'description', 'state', 'status', 'actions', 'import', 'upgrade', 'config', 'controls'],\n  host2cluster: ['fqdn', 'provider_name', 'state', 'status', 'actions', 'config', 'remove'],\n  service2cluster: ['display_name', 'version_no_sort', 'state', 'status', 'actions', 'import', 'config'],\n  host: ['fqdn', 'provider_name', 'host2cluster', 'state', 'status', 'actions', 'config', 'controls'],\n  provider: ['name', 'prototype_version', 'state', 'actions', 'upgrade', 'config', 'controls'],\n  job: ['action', 'objects', 'start_date', 'finish_date', 'status'],\n  task: ['id', 'start_date', 'finish_date', 'status'],\n  bundle: ['name', 'version', 'edition', 'description', 'controls'],\n}"
            },
            {
                "name": "ComponentFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/test/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(count: number, service_id: number): IComponent[] =>\n  newArray<IComponent>(count, (_, i) => new HCmComponent(i + 1, service_id) as IComponent)",
                "rawdescription": "Array with specific service id and components with id by index [1, count]\nsee: class HCmComponent",
                "description": "<p>Array with specific service id and components with id by index [1, count]\nsee: class HCmComponent</p>\n"
            },
            {
                "name": "CONFIG_FIELD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/field/field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Config field')"
            },
            {
                "name": "CONFIG_GROUP_LIST_SERVICE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config-groups/service/config-group-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<EntityService<ConfigGroup>>('EntityService')"
            },
            {
                "name": "CONFIG_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/assets/config.json'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "createFormForAttribute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n}"
            },
            {
                "name": "disableHost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(h: HostTile, ap: IActionParameter[]): boolean =>\n  ap ? (isExist(h.relations as CompTile[], ap) ? isExpand(ap) : isShrink(ap)) : false"
            },
            {
                "name": "EntityNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/entity-names.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TypeName[]",
                "defaultValue": "['servicecomponent', 'group_config', 'component', 'host', 'service', 'cluster', 'provider', 'job', 'task', 'bundle']"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiRoot: '/api/v1/',\n  SERVER_URL_EVENT: `${p === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/event/`,\n  SERVER_URL_STATUS: `${p === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/status/`\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiRoot: '/api/v1/',\n  SERVER_URL_EVENT: `${p === 'https:' ? 'wss' : 'ws'}://localhost:8000/ws/event/`,\n  SERVER_URL_STATUS: `${p === 'https:' ? 'wss' : 'ws'}://localhost:8000/ws/status/`\n}"
            },
            {
                "name": "EXCLUDE_URLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/http-interseptors/auth-interseptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['/api/v1/token/', '/assets/config.json']"
            },
            {
                "name": "FAILED_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/bell/bell.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'#FF8A80'"
            },
            {
                "name": "fillIssue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/issue.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Issue] FillIssue', props<{ value: IIssues; url: string }>())"
            },
            {
                "name": "findAttrValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends object>(obj: T, key: string): boolean => {\n  let value;\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    if (typeof obj[i] === 'object') {\n      value = findAttrValue<Object>(obj[i], key);\n    } else if (i === key) {\n      value = obj[i];\n    }\n  }\n  return value;\n}"
            },
            {
                "name": "findDependencies",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(c: CompTile, cs: CompTile[]): CompTile[] => {\n  const r =\n    c.requires?.reduce<{ prototype_id: number }[]>(\n      (p, a) => [...p, ...a.components.map((b) => ({ prototype_id: b.prototype_id }))],\n      []\n    ) || [];\n  return cs.filter((a) => r.some((b) => b.prototype_id === a.prototype_id));\n}"
            },
            {
                "name": "flag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(host_id: number, com: CompTile, load: StatePost): boolean =>\n  load.data.some((a) => a.component_id === com.id && a.service_id === com.service_id && a.host_id === host_id)"
            },
            {
                "name": "fn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  boolean: (v: boolean | null, d: boolean | null, r: boolean): boolean | null => (String(v) === 'true' || String(v) === 'false' || String(v) === 'null' ? v : r ? d : null),\n  json: (v: string): string => (v === null ? '' : JSON.stringify(v, undefined, 4)),\n  map: (v: object, d: object): object => (!v ? d : v),\n  list: (v: string[], d: string[]): string[] => (!v ? d : v),\n  structure: (v: any): any => v,\n}"
            },
            {
                "name": "fo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(n: string) => (b: IFieldStack) => b.type !== 'group' && b.subname && b.name === n"
            },
            {
                "name": "FORWARD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/router/router.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Router] Forward'"
            },
            {
                "name": "fromBundle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/add-component/add.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() =>\n  new FormGroup({\n    prototype_id: new FormControl('', Validators.required),\n    name: new FormControl('', Validators.required),\n    description: new FormControl(),\n  })"
            },
            {
                "name": "getApiState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ApiState>('api')"
            },
            {
                "name": "getAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AuthState>('auth')"
            },
            {
                "name": "getConnectStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getSocketState, (state: SocketState) => state.status)"
            },
            {
                "name": "getControlType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(t: TNForm): controlType => typeToControl[t] || (t as controlType)"
            },
            {
                "name": "getField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(item: IFieldStack): IFieldOptions => {\n  return {\n    ...item,\n    key: getKey(item.name, item.subname),\n    value: getValue(item.type)(item.value, item.default, item.required),\n    validator: getValidator(item.required, item.limits?.min, item.limits?.max, item.type),\n    controlType: getControlType(item.type),\n    hidden: item.name === '__main_info' || isHidden(item),\n    compare: []\n  };\n}"
            },
            {
                "name": "getFirstAdminLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getProfileSelector,\n  state => state.username === 'admin' && !state.profile.settingsSaved\n)"
            },
            {
                "name": "getIssueSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/issue.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<IssueState>('issue')"
            },
            {
                "name": "getKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string, subname: string): string => (subname ? `${subname}/${name}` : name)"
            },
            {
                "name": "getMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getSocketState, (state) => state.message)"
            },
            {
                "name": "getNavigationPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/navigation/navigation.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getNavigationState,\n  state => state.path\n)"
            },
            {
                "name": "getNavigationState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/navigation/navigation.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<NavigationState>('navigation')"
            },
            {
                "name": "getOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: IFieldStack, d: IConfig) =>\n  d.config\n    .filter(fo(a.name))\n    .map((f) => getField(f))\n    // switch off validation for field if !(activatable: true && active: false) - line: 146\n    .map((c) => ({ ...c, name: c.subname, activatable: a.activatable && !isActive(d.attr, a.name) }))"
            },
            {
                "name": "getPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: IFieldStack, d: IConfig): IPanelOptions => ({\n  ...a,\n  hidden: isHidden(a),\n  active: a.activatable ? isActive(d.attr, a.name) : true,\n  options: getOptions(a, d),\n})"
            },
            {
                "name": "getPattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(t: TNForm): RegExp => (patternFn[t] ? patternFn[t]() : null)"
            },
            {
                "name": "getProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getProfileSelector,\n  state => state.profile\n)"
            },
            {
                "name": "getProfileSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ProfileState>('profile')"
            },
            {
                "name": "getRoot",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getApiState,\n  (state: ApiState) => state.root\n)"
            },
            {
                "name": "getSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(from: Tile[]): Tile => from.find((a) => a.isSelected)"
            },
            {
                "name": "getSocketState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<SocketState>('socket')"
            },
            {
                "name": "getStack",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getApiState,\n  (state: ApiState) => state.stack\n)"
            },
            {
                "name": "getValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(required: boolean, min: number, max: number, type: TNForm) => ({\n  required,\n  min,\n  max,\n  pattern: getPattern(type),\n})"
            },
            {
                "name": "getValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(t: TNForm) => {\n  const def = (value: number | string) => (value === null || value === undefined ? '' : String(value));\n  return fn[t] ? fn[t] : def;\n}"
            },
            {
                "name": "GO",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/router/router.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Router] Go'"
            },
            {
                "name": "handleTree",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(c: ISearchParam): ((a: TFormOptions) => TFormOptions) => (a: TFormOptions): TFormOptions => {\n  if ('options' in a) {\n    a.options = a.options.map(handleTree(c));\n    if (c.search) a.hidden = a.options.filter((b) => !b.hidden).length === 0;\n    else a.hidden = isAdvancedField(a) ? !c.advanced : false;\n  } else if (isVisibleField(a)) {\n    a.hidden = !(a.display_name.toLowerCase().includes(c.search.toLowerCase()) || String(a.value).toLocaleLowerCase().includes(c.search.toLocaleLowerCase()));\n    if (!a.hidden && isAdvancedField(a)) a.hidden = !c.advanced;\n  }\n  return a;\n}"
            },
            {
                "name": "HCFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/test/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(host_id: number, service_id: number, components: number): Post[] =>\n  newArray(components, (_, i) => new Post(host_id, service_id, i + 1, i + 1))"
            },
            {
                "name": "historyAnime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/main/main.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  trigger('history', [\n    state('hide', style({ top: '70px' })),\n    state('show', style({ top: '134px' })),\n    state('hideTools', style({ opacity: 0 })),\n    state('showTools', style({ opacity: 0.8 })),\n    transition('hideTools => showTools', animate('.5s .3s ease-in')),\n    transition('showTools => hideTools', animate('.2s ease-out')),\n    transition('hide <=> show', animate('.3s')),\n  ]),\n]"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthState",
                "defaultValue": "{\n  isValid: false,\n  message: '',\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/navigation/navigation.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NavigationState",
                "defaultValue": "{\n  path: [],\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SocketState",
                "defaultValue": "{\n  status: null,\n  message: null,\n}"
            },
            {
                "name": "InitState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApiState",
                "defaultValue": "{\n  root: null,\n  stack: null,\n}"
            },
            {
                "name": "InitState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/issue.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  value: null,\n  url: '',\n}"
            },
            {
                "name": "InitState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  username: '',\n  change_password: '',\n  profile: {\n    textarea: {},\n    settingsSaved: false,\n  },\n}"
            },
            {
                "name": "intPattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => new RegExp(/^[-]?\\d+$/)"
            },
            {
                "name": "isActive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: IConfigAttr, n: string) => a[n]?.active"
            },
            {
                "name": "isAdvancedField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: TFormOptions) => isVisibleField(a) && a.ui_options?.advanced"
            },
            {
                "name": "isAuthenticated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getAuthState,\n  state => state.isValid\n)"
            },
            {
                "name": "isBoolean",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/types/func.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(x: any) => typeof x === 'boolean'"
            },
            {
                "name": "isEmptyObject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/types/func.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(x: any) => isObject(x) && !Object.keys(x).length"
            },
            {
                "name": "isExist",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(rel: CompTile[], ap: IActionParameter[]): boolean =>\n  isShrink(ap) ? ap.some((a) => rel.some(accord(a))) : ap.every((a) => rel.some(accord(a)))"
            },
            {
                "name": "isExpand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ap: IActionParameter[]): boolean => ap.every((a) => a.action === 'add')"
            },
            {
                "name": "isHidden",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: IFieldStack) => !!(a.ui_options?.invisible || a.ui_options?.advanced)"
            },
            {
                "name": "isNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/types/func.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(x: any) => typeof x === 'number' && !isNaN(x)"
            },
            {
                "name": "isObject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/types/func.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(x: any) => x !== null && typeof x === 'object'"
            },
            {
                "name": "isShrink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/host-components-map/take.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ap: IActionParameter[]): boolean => ap.every((a) => a.action === 'remove')"
            },
            {
                "name": "ISSUE_MESSAGES_DEFAULT_MOCK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  concern: ISSUE_MESSAGES_FIRST_MESSAGE,\n}"
            },
            {
                "name": "ISSUE_MESSAGES_FIRST_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Concern",
                "defaultValue": "{\n  id: 2039,\n  blocking: true,\n  type: 'issue',\n  cause: 'config',\n  reason: {\n    message: 'Run ${action1} action on ${component1}.',\n    placeholder: {\n      action1: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: 'Restart'\n      },\n      component1: {\n        type: IMPlaceholderItemType.ComponentConfig,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2\n        },\n        name: 'My Component'\n      }\n    }\n  }\n}"
            },
            {
                "name": "ISSUE_MESSAGES_LIST_MOCK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  concerns: [\n    ISSUE_MESSAGES_FIRST_MESSAGE,\n    ISSUE_MESSAGES_SECOND_MESSAGE,\n    ISSUE_MESSAGES_VERY_LONG_MESSAGE,\n  ],\n}"
            },
            {
                "name": "ISSUE_MESSAGES_SECOND_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Concern",
                "defaultValue": "{\n  id: 2040,\n  blocking: true,\n  type: 'issue',\n  cause: 'config',\n  reason: {\n    message: 'Run the following ${action2} action on this ${component2}.',\n    placeholder: {\n      action2: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: 'Restart'\n      },\n      component2: {\n        type: IMPlaceholderItemType.ComponentConfig,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2\n        },\n        name: 'My Component'\n      }\n    }\n  }\n}"
            },
            {
                "name": "ISSUE_MESSAGES_VERY_LONG_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Concern",
                "defaultValue": "{\n  id: 2041,\n  blocking: true,\n  type: 'issue',\n  cause: 'config',\n  reason: {\n    message: 'Run ${action1} action on ${component1}. This is a very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' long message. Bonus ${action2}!',\n    placeholder: {\n      action1: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: 'Restart'\n      },\n      component1: {\n        type: IMPlaceholderItemType.ComponentConfig,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2\n        },\n        name: 'My Component'\n      },\n      action2: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids: {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: ''\n      }\n    }\n  }\n}"
            },
            {
                "name": "ISSUE_MESSAGES_VERY_LONG_MOCK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  concern: ISSUE_MESSAGES_VERY_LONG_MESSAGE,\n}"
            },
            {
                "name": "isVisibleField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: TFormOptions) => !a.ui_options?.invisible"
            },
            {
                "name": "kit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ issue: IssueInfoComponent, status: StatusInfoComponent }"
            },
            {
                "name": "LIST_SERVICE_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list/list-service-token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<IListService<any>>('ListService')"
            },
            {
                "name": "ListOfMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/concern-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ListOfMessagesPopup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/concern-list-popup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadConfigGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config-groups/loader.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => import('./config-group.module').then((m) => m.ConfigGroupModule)"
            },
            {
                "name": "loadIssue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/issue.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Issue] LoadIssue')"
            },
            {
                "name": "loadProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Profile] Load')"
            },
            {
                "name": "loadProfileSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Profile] LoadSuccess', props<{ profile: IUser }>())"
            },
            {
                "name": "loadRoot",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API] LoadRoot')"
            },
            {
                "name": "loadStack",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API] LoadStack')"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/configuration.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatIconModule,\n  MatInputModule,\n  MatButtonModule,\n  MatSelectModule,\n  MatOptionModule,\n  MatCheckboxModule,\n  MatTooltipModule,\n  MatToolbarModule,\n  MatFormFieldModule,\n  MatExpansionModule,\n  MatSlideToggleModule,\n  MatListModule,\n]"
            },
            {
                "name": "maxAge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/http-interseptors/request-cache.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Number.MAX_VALUE"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "MODELS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/add-component/add.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  provider: {\n    name: 'provider',\n    form: fromBundle(),\n  },\n  host: {\n    name: 'host',\n    form: new FormGroup({\n      fqdn: new FormControl('', [Validators.required, Validators.pattern(new RegExp(/^[A-Za-z0-9_\\.\\-]+$/))]),\n      cluster_id: new FormControl(),\n      provider_id: new FormControl('', Validators.required),\n    }),\n  },\n  cluster: {\n    name: 'cluster',\n    form: fromBundle(),\n  },\n  service: {\n    name: 'service',\n    title: 'services'\n  },\n  host2cluster: {\n    name: 'host2cluster',\n    title: 'hosts',\n  },\n}"
            },
            {
                "name": "newConfigGroupForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config-groups/service/config-group-add.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup =>\n  new FormGroup({\n    name: new FormControl('', [Validators.required, Validators.maxLength(30)]),\n    description: new FormControl(),\n  })"
            },
            {
                "name": "newConfigGroupHostForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config-groups/service/config-group-host-add.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() =>\n  new FormGroup({\n    name: new FormControl('', Validators.required),\n    description: new FormControl(),\n  })"
            },
            {
                "name": "notify",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/animations/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('notify', [\n  state('show', style({ opacity: 1 })),\n  state('hide', style({ opacity: 0 })),\n  transition('hide => show', [animate('.2s')]),\n  transition('show => hide', [animate('2s')]),\n])"
            },
            {
                "name": "OnlyMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/concern.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "openClose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/animations/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('openClose', [\n  state('true', style({ height: '*', opacity: 1 })),\n  state('false', style({ height: '0px', opacity: 0 })),\n  transition('true <=> false', [animate('0.5s')]),\n])"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/form-elements/boolean.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ clickAction: 'noop', color: 'accent' }"
            },
            {
                "name": "p",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "location.protocol"
            },
            {
                "name": "p",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "location.protocol"
            },
            {
                "name": "PADDING_TOP_BOTTOM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/directives/m-textarea.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "16"
            },
            {
                "name": "patternFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  integer: intPattern,\n  int: intPattern,\n  float: () => new RegExp(/^[-]?[0-9]+(\\.[0-9]+)?$/),\n}"
            },
            {
                "name": "POINT_WHEN_EMMIT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/directives/infinity-scroll.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "100"
            },
            {
                "name": "POSITION_MARGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "16"
            },
            {
                "name": "PROFILE_LINK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/profile.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${environment.apiRoot}profile/`"
            },
            {
                "name": "randomInteger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/types/func.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(max: number, min: number = 0): number =>\n  Math.floor(min + Math.random() * (max + 1 - min))"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  InitState,\n  on(rootSuccess, (state, { root }) => ({ ...state, root })),\n  on(rootError, state => ({ root: null, stack: null })),\n  on(stackSuccess, (state, { stack }) => ({ ...state, stack }))\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(authSuccess, state => ({ isValid: true, message: 'Auth is success.' })),\n  on(authFaled, (state, { message }) => ({ isValid: false, message })),\n  on(authLogout, state => ({ isValid: false, message: '' }))\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/issue.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(InitState, on(loadIssue, state => ({ ...state })), on(fillIssue, (state, { value, url }) => ({ value, url })))"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/navigation/navigation.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(setPath, (state, { path }) => ({ path })),\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  InitState,\n  on(loadProfileSuccess, (state, { profile }) => ({ ...profile })),\n  on(setTextareaHeight, state => ({ ...state })),\n  on(settingsSave, (state, { isSet }) => ({ ...state, isSet })),\n  on(clearProfile, () => InitState)\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(socketInit, (state) => ({ ...state })),\n  on(socketOpen, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketClose, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketResponse, (state, { message }) => ({\n    ...state,\n    message,\n  })),\n  on(clearMessages, (state) => ({ ...state, message: null }))\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\n  auth: authReducer,\n  socket: socketReducer,\n  api: apiReducer,\n  profile: profileReducer,\n  issue: issueReducer,\n  navigation: navigationReducer,\n}"
            },
            {
                "name": "RegularTree",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/status-tree/status-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "requiredObject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/import/import.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ValidatorFn => (control: AbstractControl): { [key: string]: boolean } | null =>\n  Object.keys(control.value).some((key) => control.value[key]) ? null : { requiered: true }"
            },
            {
                "name": "rivers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/add-component/naming.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\n  'Amur',\n  'Anadyr',\n  'Angara',\n  'Colorado',\n  'Congo',\n  'Desna',\n  'Dnieper',\n  'Don',\n  'Itrysh',\n  'Kama',\n  'Limpopo',\n  'Mekong',\n  'Mississippi',\n  'Nile',\n  'Ob',\n  'Oka',\n  'Pechora',\n  'Rhine',\n  'Ural',\n  'Volga',\n  'Yangtze',\n  'Yenisei',\n  'Yukon',\n  'Zambezi',\n]"
            },
            {
                "name": "rootError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API] LoadRootError')"
            },
            {
                "name": "rootSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API] LoadRootSuccess', props<{ root: IRoot }>())"
            },
            {
                "name": "RUNNING_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/bell/bell.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'#FFEA00'"
            },
            {
                "name": "selectMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "pipe(\n  select(getMessage),\n  skip(1),\n)"
            },
            {
                "name": "setPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/navigation/navigation.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Navigation] Set path', props<{ path: AdcmTypedEntity[] }>())"
            },
            {
                "name": "setPathOfRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/navigation/navigation.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Navigation] Set path', props<{ params: ParamMap }>())"
            },
            {
                "name": "setTextareaHeight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Profile] SetTextareaHeight', props<{ key: string; value: number }>())"
            },
            {
                "name": "settingsSave",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Profile] SettingsSave', props<{ isSet: boolean }>())"
            },
            {
                "name": "setValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/tests/configuration.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    )"
            },
            {
                "name": "socketClose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Socket] Close', props<{ status: StatusType }>())"
            },
            {
                "name": "socketInit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Socket] Init')"
            },
            {
                "name": "socketOpen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Socket] Open', props<{ status: StatusType }>())"
            },
            {
                "name": "socketResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Socket] Response', props<{ message: EventMessage }>())"
            },
            {
                "name": "stackSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/api/api.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[API] LoadStackSuccess', props<{ stack: IRoot }>())"
            },
            {
                "name": "StoreEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[AuthEffects, ApiEffects, ProfileEffects, IssueEffect, SocketEffect, NavigationEffects]"
            },
            {
                "name": "styleCSS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/server-status.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'div { font-weight:bold; margin: 40px auto; width: 400px;}'"
            },
            {
                "name": "SUCCESS_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/bell/bell.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'#1EE564'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/concern-list-popup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `<app-concern-list-ref [concerns]=\"concerns\"></app-concern-list-ref>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/concern-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `<app-concern-list [concerns]=\"concerns\"></app-concern-list>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/concern.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n  }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/status-tree/status-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n  },\n})"
            },
            {
                "name": "TemporaryEntityNameConverter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list/base-list.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(currentName: Partial<TypeName>): string => {\n\n  if (currentName === 'group_config') return 'group-config';\n  if (currentName === 'group_config_hosts') return 'group-config-hosts';\n\n  return currentName;\n}"
            },
            {
                "name": "toField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/tests/configuration.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n})"
            },
            {
                "name": "toFormOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/tests/configuration.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n}"
            },
            {
                "name": "toPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/tests/configuration.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n})"
            },
            {
                "name": "trueOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/import/import.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (control.value ? null : { trueOnly: !control.value })"
            },
            {
                "name": "typeToControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<controlType>",
                "defaultValue": "{\n  bool: 'boolean',\n  int: 'textbox',\n  integer: 'textbox',\n  float: 'textbox',\n  string: 'textbox',\n  file: 'textarea',\n  text: 'textarea',\n}"
            },
            {
                "name": "UPLOAD_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/stack.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${environment.apiRoot}stack/upload/`"
            },
            {
                "name": "USER_LINK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/users.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${environment.apiRoot}user/`"
            },
            {
                "name": "VeryLongMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/concern/concern.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "apiReducer",
                "file": "src/app/core/api/api.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "appInitializer",
                "file": "src/app/shared/translate/intializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "translate",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "translate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "authReducer",
                "file": "src/app/core/auth/auth.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clearEmptyField",
                "file": "src/app/core/types/func.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Remove empty, null, undefined properties</p>\n",
                "args": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Object",
                "jsdoctags": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "flatten",
                "file": "src/app/core/types/func.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function for a array,\nflattening an array of arrays</p>\n",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2281,
                            "end": 2282,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "a"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2275,
                            "end": 2280,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "getEventEntityType",
                "file": "src/app/store/navigation/navigation.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TypeName",
                "jsdoctags": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPath",
                "file": "src/app/store/navigation/navigation.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "getters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<Action>",
                "jsdoctags": [
                    {
                        "name": "getters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomColor",
                "file": "src/app/core/types/func.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 2681,
                            "end": 2688,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "returns"
                        },
                        "comment": "<p>16-bit hex string</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 2711,
                            "end": 2718,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "example"
                        },
                        "comment": "<p>&#39;#110C2E&#39;</p>\n"
                    }
                ]
            },
            {
                "name": "isCachable",
                "file": "src/app/core/http-interseptors/caching-interseptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "req",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "issueReducer",
                "file": "src/app/core/store/issue.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "navigationReducer",
                "file": "src/app/store/navigation/navigation.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "newArray",
                "file": "src/app/core/types/func.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "count",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2490,
                            "end": 2495,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "count"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2475,
                            "end": 2480,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": "",
                        "typeExpression": {
                            "pos": 2481,
                            "end": 2489,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 302,
                            "type": {
                                "pos": 2482,
                                "end": 2488,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 144
                            }
                        }
                    },
                    {
                        "name": {
                            "pos": 2535,
                            "end": 2537,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fn"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2500,
                            "end": 2505,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": "",
                        "typeExpression": {
                            "pos": 2506,
                            "end": 2534,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 302,
                            "type": {
                                "pos": 2507,
                                "end": 2533,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 175,
                                "parameters": [
                                    {
                                        "pos": 2508,
                                        "end": 2516,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 161,
                                        "name": {
                                            "pos": 2508,
                                            "end": 2509,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 78,
                                            "escapedText": "_"
                                        },
                                        "type": {
                                            "pos": 2510,
                                            "end": 2516,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 141
                                        }
                                    },
                                    {
                                        "pos": 2517,
                                        "end": 2527,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 161,
                                        "name": {
                                            "pos": 2517,
                                            "end": 2519,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 78,
                                            "escapedText": "i"
                                        },
                                        "type": {
                                            "pos": 2520,
                                            "end": 2527,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 144
                                        }
                                    }
                                ],
                                "type": {
                                    "pos": 2531,
                                    "end": 2533,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 174,
                                    "typeName": {
                                        "pos": 2531,
                                        "end": 2533,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 78,
                                        "escapedText": "T"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 2542,
                            "end": 2549,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "returns"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "nullEmptyField",
                "file": "src/app/core/types/func.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": true,
                "deprecationMessage": "",
                "description": "<p>Support nullable value in object properties,\nif value input field is empty return null.</p>\n",
                "args": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Object",
                "jsdoctags": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileReducer",
                "file": "src/app/core/store/profile/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sendRequest",
                "file": "src/app/core/http-interseptors/caching-interseptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cache",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<HttpEvent<any>>",
                "jsdoctags": [
                    {
                        "name": "req",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cache",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "socketReducer",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "translateLoader",
                "file": "src/app/shared/translate/intializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "uniqid",
                "file": "src/app/core/types/func.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prefix",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isFloat",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "prefix",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isFloat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ActionParam",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"add\" | \"remove\"",
                "file": "src/app/shared/host-components-map/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Attributes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Map<ConfigAttributeNames | ConfigAttribute>",
                "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 174
            },
            {
                "name": "AttributesOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<ConfigAttributeNames | AttributeOptions>",
                "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 174
            },
            {
                "name": "ComponentName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"issue\" | \"status\" | undefined",
                "file": "src/app/shared/components/tooltip/tooltip.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ConcernType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"issue\" | \"lock\"",
                "file": "src/app/models/concern/concern.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ConfigAttribute",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "controlType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"boolean\" | \"textbox\" | \"textarea\" | \"json\" | \"password\" | \"list\" | \"map\" | \"dropdown\" | \"file\" | \"text\" | \"structure\" | \"secrettext\"",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Mark for rendering required component</p>\n",
                "kind": 183
            },
            {
                "name": "Entities",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ICluster | Service | Host | Provider | Job | Task | Bundle",
                "file": "src/app/core/types/api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "EntityEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"add\" | \"add_job_log\" | \"create\" | \"delete\" | \"remove\" | \"change_config\" | \"change_state\" | \"change_status\" | \"change_job_status\" | \"change_hostcomponentmap\" | \"upgrade\" | \"concern\"",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "IssueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"cluster\" | \"service\" | \"servicecomponent\" | \"component\"",
                "file": "src/app/models/issue.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Job",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/types/task-job.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "JobStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"created\" | \"running\" | \"failed\" | \"success\" | \"aborted\"",
                "file": "src/app/core/types/task-job.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "JobType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"component\" | \"service\" | \"cluster\" | \"host\" | \"provider\"",
                "file": "src/app/core/types/task-job.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "PopoverEventFunc",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/abstract-directives/popover-content.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 175
            },
            {
                "name": "PositionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                "file": "src/app/shared/components/tooltip/tooltip.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ProfileState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IUser",
                "file": "src/app/core/store/profile/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 174
            },
            {
                "name": "Prototype",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/types/stack.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "resultTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "simpleTypes | simpleTypes[] | object",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "RouterActionsUnion",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Go | Back | Forward",
                "file": "src/app/core/store/router/router.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ServicePrototype",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/types/stack.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "simpleTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number | boolean",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "StackInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"cluster\" | \"host\" | \"provider\" | \"service\" | \"bundle\"",
                "file": "src/app/core/services/stack.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "stateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"created\" | \"locked\"",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "StatusTreeLinkFunc",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/models/status-tree.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 175
            },
            {
                "name": "StatusType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"open\" | \"close\" | \"re-open\"",
                "file": "src/app/core/store/sockets/socket.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Task",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/types/task-job.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "TaskStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | \"running\" | \"success\" | \"failed\"",
                "file": "src/app/entry/task/tasks.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TConstraint",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TConstraintValue[]",
                "file": "src/app/shared/host-components-map/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 179
            },
            {
                "name": "TConstraintValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number | \"+\" | \"odd\" | \"depend\"",
                "file": "src/app/shared/host-components-map/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TFormOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IFieldOptions | IPanelOptions",
                "file": "src/app/shared/configuration/services/field.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TMatch",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TNBase | TNReq",
                "file": "src/app/shared/configuration/yspec/yspec.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TNBase",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"string\" | \"integer\" | \"int\" | \"boolean\" | \"bool\" | \"float\"",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TNForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TNBase | TNReq | TNSpec",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TNReq",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dict\" | \"list\"",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TNSpec",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"structure\" | \"group\" | \"option\" | \"json\" | \"map\" | \"file\" | \"text\" | \"password\" | \"secrettext\" | \"variant\"",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number | boolean | object | any[]",
                "file": "src/app/shared/configuration/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TypeName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"bundle\" | \"cluster\" | \"host\" | \"provider\" | \"service\" | \"job\" | \"task\" | \"user\" | \"profile\" | \"adcm\" | \"stats\" | \"hostcomponent\" | \"service2cluster\" | \"host2cluster\" | \"servicecomponent\" | \"component\" | \"group_config\" | \"group_config_hosts\"",
                "file": "src/app/core/types/api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "ConcernEventType",
                "childs": [
                    {
                        "name": "Cluster",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cluster-concerns"
                    },
                    {
                        "name": "Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cluster-object-concerns"
                    },
                    {
                        "name": "Host",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "host-concerns"
                    },
                    {
                        "name": "HostProvider",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "host-provider-concerns"
                    },
                    {
                        "name": "ServiceComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "service-component-concerns"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/concern/concern-reason.ts"
            },
            {
                "name": "ConfigAttributeNames",
                "childs": [
                    {
                        "name": "GROUP_KEYS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "group_keys"
                    },
                    {
                        "name": "CUSTOM_GROUP_KEYS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "custom_group_keys"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/configuration/attributes/attribute.service.ts"
            },
            {
                "name": "Direction",
                "childs": [
                    {
                        "name": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "desc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "-"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/abstract-directives/list.directive.ts"
            },
            {
                "name": "DisplayMode",
                "childs": [
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inHost",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "noCluster",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/add-component/provider.component.ts"
            },
            {
                "name": "flagForConsole",
                "childs": [
                    {
                        "name": "profile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "profile"
                    },
                    {
                        "name": "socket",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "socket"
                    },
                    {
                        "name": "load_complete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "load_complete"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Magic strings for marking loading stages and other, for ci tests</p>\n",
                "file": "src/app/app.component.ts"
            },
            {
                "name": "Folding",
                "childs": [
                    {
                        "name": "Collapsed",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Expanded",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/status-tree/status-tree.component.ts"
            },
            {
                "name": "IMPlaceholderItemType",
                "childs": [
                    {
                        "name": "ComponentActionRun",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "component_action_run"
                    },
                    {
                        "name": "ComponentConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "component_config"
                    },
                    {
                        "name": "Cluster",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cluster"
                    },
                    {
                        "name": "Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "service"
                    },
                    {
                        "name": "Component",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "component"
                    },
                    {
                        "name": "HostProvider",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "provider"
                    },
                    {
                        "name": "Host",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "host"
                    },
                    {
                        "name": "Job",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "job"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/concern/concern-reason.ts"
            },
            {
                "name": "keyChannelStrim",
                "childs": [
                    {
                        "name": "scroll",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notifying",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "load_complete",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/services/channel.service.ts"
            },
            {
                "name": "whatShow",
                "childs": [
                    {
                        "name": "none",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "none"
                    },
                    {
                        "name": "config",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "config"
                    },
                    {
                        "name": "hostMap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hostmap"
                    },
                    {
                        "name": "stepper",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stepper"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/actions/master/master.service.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "__karma__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/shared/host-components-map/take.service.ts": [
                {
                    "name": "accord",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: IActionParameter): ((b: CompTile) => boolean) => (b: CompTile): boolean =>\n  b.component === `${a.service}/${a.component}`"
                },
                {
                    "name": "checkActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(host_id: number, com: CompTile, action: 'add' | 'remove', load: StatePost): boolean => {\n  if (com.actions?.length) {\n    if (action === 'remove') return flag(host_id, com, load) ? com.actions.some((a) => a === 'remove') : true;\n    if (action === 'add') return flag(host_id, com, load) ? true : com.actions.some((a) => a === 'add');\n  } else return true;\n}"
                },
                {
                    "name": "checkConstraint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(c: TConstraint, r: number): boolean => {\n  if (!c?.length) return true;\n  const v = c[c.length - 1];\n  return v === '+' || v === 'odd' || v > r || v === 'depend';\n}"
                },
                {
                    "name": "checkDependencies",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(c: CompTile, cs: CompTile[]): void =>\n  findDependencies(c, cs).forEach((a) => (a.limit = a.limit ? [...a.limit, 'depend'] : ['depend']))"
                },
                {
                    "name": "checkRequires",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(component: CompTile, cs: CompTile[]): IRequires[] =>\n  component.requires.reduce<IRequires[]>(\n    (p, c) => (c.components.every((a) => cs.some((b) => b.prototype_id === a.prototype_id)) ? p : [...p, c]),\n    []\n  )"
                },
                {
                    "name": "disableHost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(h: HostTile, ap: IActionParameter[]): boolean =>\n  ap ? (isExist(h.relations as CompTile[], ap) ? isExpand(ap) : isShrink(ap)) : false"
                },
                {
                    "name": "findDependencies",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(c: CompTile, cs: CompTile[]): CompTile[] => {\n  const r =\n    c.requires?.reduce<{ prototype_id: number }[]>(\n      (p, a) => [...p, ...a.components.map((b) => ({ prototype_id: b.prototype_id }))],\n      []\n    ) || [];\n  return cs.filter((a) => r.some((b) => b.prototype_id === a.prototype_id));\n}"
                },
                {
                    "name": "flag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(host_id: number, com: CompTile, load: StatePost): boolean =>\n  load.data.some((a) => a.component_id === com.id && a.service_id === com.service_id && a.host_id === host_id)"
                },
                {
                    "name": "getSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(from: Tile[]): Tile => from.find((a) => a.isSelected)"
                },
                {
                    "name": "isExist",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(rel: CompTile[], ap: IActionParameter[]): boolean =>\n  isShrink(ap) ? ap.some((a) => rel.some(accord(a))) : ap.every((a) => rel.some(accord(a)))"
                },
                {
                    "name": "isExpand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ap: IActionParameter[]): boolean => ap.every((a) => a.action === 'add')"
                },
                {
                    "name": "isShrink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/take.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ap: IActionParameter[]): boolean => ap.every((a) => a.action === 'remove')"
                }
            ],
            "src/app/components/notifications/notifications.component.ts": [
                {
                    "name": "ACKNOWLEDGE_EVENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notifications/notifications.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'acknowledge'"
                }
            ],
            "src/app/shared/add-component/add-service-model.ts": [
                {
                    "name": "ADD_SERVICE_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/add-component/add-service-model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<IAddService>('AddService')"
                }
            ],
            "src/app/shared/add-component/naming.ts": [
                {
                    "name": "adjectives",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/add-component/naming.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\n  'Ancient',\n  'Beautiful',\n  'Big',\n  'Blue',\n  'Broad',\n  'Clear',\n  'Cold',\n  'Dark',\n  'Deep',\n  'Distant',\n  'Down',\n  'Dry',\n  'Famous',\n  'Fear',\n  'Flowing',\n  'Frozen',\n  'Great',\n  'Holy',\n  'Huge',\n  'Icy',\n  'Large',\n  'Latter',\n  'Longest',\n  'Lovely',\n  'Lower',\n  'Mad',\n  'Magnificent',\n  'Majestic',\n  'Middle',\n  'Mighty',\n  'Muddy',\n  'Narrow',\n  'Noble',\n  'North',\n  'Placid',\n  'Polluted',\n  'Quiet',\n  'Rapid',\n  'Sacred',\n  'Shallow',\n  'Slow',\n  'Sluggish',\n  'Small',\n  'Swift',\n  'Tidal',\n  'Tributary',\n  'Turbulent',\n  'Wide',\n  'Wild',\n]"
                },
                {
                    "name": "rivers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/add-component/naming.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\n  'Amur',\n  'Anadyr',\n  'Angara',\n  'Colorado',\n  'Congo',\n  'Desna',\n  'Dnieper',\n  'Don',\n  'Itrysh',\n  'Kama',\n  'Limpopo',\n  'Mekong',\n  'Mississippi',\n  'Nile',\n  'Ob',\n  'Oka',\n  'Pechora',\n  'Rhine',\n  'Ural',\n  'Volga',\n  'Yangtze',\n  'Yenisei',\n  'Yukon',\n  'Zambezi',\n]"
                }
            ],
            "src/app/shared/configuration/attributes/attribute.service.ts": [
                {
                    "name": "ATTRIBUTES_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Attributes options')"
                },
                {
                    "name": "createFormForAttribute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(fb: FormBuilder, json: ConfigAttributesJSON, attr: ConfigAttributeNames, disabled: boolean = false): FormGroup => {\n  const buildFormGroup = (json: boolean | ConfigAttributesJSON) => {\n    const data = Object.entries(json).map(([key, value]) => [key, value]).reduce((acc, [key, value]: [string, boolean | ConfigAttributesJSON]) => {\n\n      if (isBoolean(value) || isEmptyObject(value)) {\n        return {\n          ...acc,\n          [key]: { value, disabled }\n        };\n      } else if (!isEmptyObject(value)) {\n        return { ...acc, [key]: buildFormGroup(value) };\n      }\n\n    }, {});\n\n    return fb.group(data);\n  };\n\n  return buildFormGroup(json[attr]);\n}"
                }
            ],
            "src/app/core/auth/auth.store.ts": [
                {
                    "name": "authCheck",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Check')"
                },
                {
                    "name": "authFaled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] LoginFaled', props<{ message: string }>())"
                },
                {
                    "name": "authLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Login', props<{ login: string; password: string }>())"
                },
                {
                    "name": "authLogout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Logout')"
                },
                {
                    "name": "authSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] LoginSuccess', props<{ login: string }>())"
                },
                {
                    "name": "getAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AuthState>('auth')"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "defaultValue": "{\n  isValid: false,\n  message: '',\n}"
                },
                {
                    "name": "isAuthenticated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getAuthState,\n  state => state.isValid\n)"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(authSuccess, state => ({ isValid: true, message: 'Auth is success.' })),\n  on(authFaled, (state, { message }) => ({ isValid: false, message })),\n  on(authLogout, state => ({ isValid: false, message: '' }))\n)"
                }
            ],
            "src/app/core/store/router/router.actions.ts": [
                {
                    "name": "BACK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/router/router.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Router] Back'"
                },
                {
                    "name": "FORWARD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/router/router.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Router] Forward'"
                },
                {
                    "name": "GO",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/router/router.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Router] Go'"
                }
            ],
            "src/stories/bell.stories.ts": [
                {
                    "name": "Bell",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/bell.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({ })"
                }
            ],
            "src/app/core/store/issue.ts": [
                {
                    "name": "checkIssue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/issue.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getIssueSelector,\n  state => state\n)"
                },
                {
                    "name": "fillIssue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/issue.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Issue] FillIssue', props<{ value: IIssues; url: string }>())"
                },
                {
                    "name": "getIssueSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/issue.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<IssueState>('issue')"
                },
                {
                    "name": "InitState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/issue.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  value: null,\n  url: '',\n}"
                },
                {
                    "name": "loadIssue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/issue.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Issue] LoadIssue')"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/issue.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(InitState, on(loadIssue, state => ({ ...state })), on(fillIssue, (state, { value, url }) => ({ value, url })))"
                }
            ],
            "src/app/core/store/sockets/socket.reducer.ts": [
                {
                    "name": "clearMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Socket] Clear messages')"
                },
                {
                    "name": "getConnectStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getSocketState, (state: SocketState) => state.status)"
                },
                {
                    "name": "getMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getSocketState, (state) => state.message)"
                },
                {
                    "name": "getSocketState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<SocketState>('socket')"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocketState",
                    "defaultValue": "{\n  status: null,\n  message: null,\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(socketInit, (state) => ({ ...state })),\n  on(socketOpen, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketClose, (state, { status }) => ({\n    ...state,\n    status,\n  })),\n  on(socketResponse, (state, { message }) => ({\n    ...state,\n    message,\n  })),\n  on(clearMessages, (state) => ({ ...state, message: null }))\n)"
                },
                {
                    "name": "selectMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "pipe(\n  select(getMessage),\n  skip(1),\n)"
                },
                {
                    "name": "socketClose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Socket] Close', props<{ status: StatusType }>())"
                },
                {
                    "name": "socketInit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Socket] Init')"
                },
                {
                    "name": "socketOpen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Socket] Open', props<{ status: StatusType }>())"
                },
                {
                    "name": "socketResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Socket] Response', props<{ message: EventMessage }>())"
                }
            ],
            "src/app/core/store/profile/index.ts": [
                {
                    "name": "clearProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Profile] ClearProfile')"
                },
                {
                    "name": "getFirstAdminLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getProfileSelector,\n  state => state.username === 'admin' && !state.profile.settingsSaved\n)"
                },
                {
                    "name": "getProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getProfileSelector,\n  state => state.profile\n)"
                },
                {
                    "name": "getProfileSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProfileState>('profile')"
                },
                {
                    "name": "InitState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  username: '',\n  change_password: '',\n  profile: {\n    textarea: {},\n    settingsSaved: false,\n  },\n}"
                },
                {
                    "name": "loadProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Profile] Load')"
                },
                {
                    "name": "loadProfileSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Profile] LoadSuccess', props<{ profile: IUser }>())"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  InitState,\n  on(loadProfileSuccess, (state, { profile }) => ({ ...profile })),\n  on(setTextareaHeight, state => ({ ...state })),\n  on(settingsSave, (state, { isSet }) => ({ ...state, isSet })),\n  on(clearProfile, () => InitState)\n)"
                },
                {
                    "name": "setTextareaHeight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Profile] SetTextareaHeight', props<{ key: string; value: number }>())"
                },
                {
                    "name": "settingsSave",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Profile] SettingsSave', props<{ isSet: boolean }>())"
                }
            ],
            "src/app/shared/components/list/list.service.ts": [
                {
                    "name": "COLUMNS_SET",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list/list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  cluster: ['name', 'prototype_version', 'description', 'state', 'status', 'actions', 'import', 'upgrade', 'config', 'controls'],\n  host2cluster: ['fqdn', 'provider_name', 'state', 'status', 'actions', 'config', 'remove'],\n  service2cluster: ['display_name', 'version_no_sort', 'state', 'status', 'actions', 'import', 'config'],\n  host: ['fqdn', 'provider_name', 'host2cluster', 'state', 'status', 'actions', 'config', 'controls'],\n  provider: ['name', 'prototype_version', 'state', 'actions', 'upgrade', 'config', 'controls'],\n  job: ['action', 'objects', 'start_date', 'finish_date', 'status'],\n  task: ['id', 'start_date', 'finish_date', 'status'],\n  bundle: ['name', 'version', 'edition', 'description', 'controls'],\n}"
                }
            ],
            "src/app/shared/host-components-map/test/index.ts": [
                {
                    "name": "ComponentFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/test/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(count: number, service_id: number): IComponent[] =>\n  newArray<IComponent>(count, (_, i) => new HCmComponent(i + 1, service_id) as IComponent)",
                    "rawdescription": "Array with specific service id and components with id by index [1, count]\nsee: class HCmComponent",
                    "description": "<p>Array with specific service id and components with id by index [1, count]\nsee: class HCmComponent</p>\n"
                },
                {
                    "name": "HCFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/host-components-map/test/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(host_id: number, service_id: number, components: number): Post[] =>\n  newArray(components, (_, i) => new Post(host_id, service_id, i + 1, i + 1))"
                }
            ],
            "src/app/shared/configuration/field/field.component.ts": [
                {
                    "name": "CONFIG_FIELD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/field/field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Config field')"
                }
            ],
            "src/app/config-groups/service/config-group-list.service.ts": [
                {
                    "name": "CONFIG_GROUP_LIST_SERVICE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config-groups/service/config-group-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<EntityService<ConfigGroup>>('EntityService')"
                }
            ],
            "src/app/core/services/config.service.ts": [
                {
                    "name": "CONFIG_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/assets/config.json'"
                }
            ],
            "src/app/models/entity-names.ts": [
                {
                    "name": "EntityNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/entity-names.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeName[]",
                    "defaultValue": "['servicecomponent', 'group_config', 'component', 'host', 'service', 'cluster', 'provider', 'job', 'task', 'bundle']"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiRoot: '/api/v1/',\n  SERVER_URL_EVENT: `${p === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/event/`,\n  SERVER_URL_STATUS: `${p === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/status/`\n}"
                },
                {
                    "name": "p",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "location.protocol"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiRoot: '/api/v1/',\n  SERVER_URL_EVENT: `${p === 'https:' ? 'wss' : 'ws'}://localhost:8000/ws/event/`,\n  SERVER_URL_STATUS: `${p === 'https:' ? 'wss' : 'ws'}://localhost:8000/ws/status/`\n}"
                },
                {
                    "name": "p",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "location.protocol"
                }
            ],
            "src/app/core/http-interseptors/auth-interseptor.ts": [
                {
                    "name": "EXCLUDE_URLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/http-interseptors/auth-interseptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['/api/v1/token/', '/assets/config.json']"
                }
            ],
            "src/app/components/bell/bell.component.ts": [
                {
                    "name": "FAILED_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/bell/bell.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'#FF8A80'"
                },
                {
                    "name": "RUNNING_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/bell/bell.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'#FFEA00'"
                },
                {
                    "name": "SUCCESS_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/bell/bell.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'#1EE564'"
                }
            ],
            "src/app/shared/configuration/services/field.service.ts": [
                {
                    "name": "findAttrValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends object>(obj: T, key: string): boolean => {\n  let value;\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    if (typeof obj[i] === 'object') {\n      value = findAttrValue<Object>(obj[i], key);\n    } else if (i === key) {\n      value = obj[i];\n    }\n  }\n  return value;\n}"
                },
                {
                    "name": "fn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  boolean: (v: boolean | null, d: boolean | null, r: boolean): boolean | null => (String(v) === 'true' || String(v) === 'false' || String(v) === 'null' ? v : r ? d : null),\n  json: (v: string): string => (v === null ? '' : JSON.stringify(v, undefined, 4)),\n  map: (v: object, d: object): object => (!v ? d : v),\n  list: (v: string[], d: string[]): string[] => (!v ? d : v),\n  structure: (v: any): any => v,\n}"
                },
                {
                    "name": "fo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(n: string) => (b: IFieldStack) => b.type !== 'group' && b.subname && b.name === n"
                },
                {
                    "name": "getControlType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(t: TNForm): controlType => typeToControl[t] || (t as controlType)"
                },
                {
                    "name": "getField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(item: IFieldStack): IFieldOptions => {\n  return {\n    ...item,\n    key: getKey(item.name, item.subname),\n    value: getValue(item.type)(item.value, item.default, item.required),\n    validator: getValidator(item.required, item.limits?.min, item.limits?.max, item.type),\n    controlType: getControlType(item.type),\n    hidden: item.name === '__main_info' || isHidden(item),\n    compare: []\n  };\n}"
                },
                {
                    "name": "getKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string, subname: string): string => (subname ? `${subname}/${name}` : name)"
                },
                {
                    "name": "getOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: IFieldStack, d: IConfig) =>\n  d.config\n    .filter(fo(a.name))\n    .map((f) => getField(f))\n    // switch off validation for field if !(activatable: true && active: false) - line: 146\n    .map((c) => ({ ...c, name: c.subname, activatable: a.activatable && !isActive(d.attr, a.name) }))"
                },
                {
                    "name": "getPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: IFieldStack, d: IConfig): IPanelOptions => ({\n  ...a,\n  hidden: isHidden(a),\n  active: a.activatable ? isActive(d.attr, a.name) : true,\n  options: getOptions(a, d),\n})"
                },
                {
                    "name": "getPattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(t: TNForm): RegExp => (patternFn[t] ? patternFn[t]() : null)"
                },
                {
                    "name": "getValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(required: boolean, min: number, max: number, type: TNForm) => ({\n  required,\n  min,\n  max,\n  pattern: getPattern(type),\n})"
                },
                {
                    "name": "getValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(t: TNForm) => {\n  const def = (value: number | string) => (value === null || value === undefined ? '' : String(value));\n  return fn[t] ? fn[t] : def;\n}"
                },
                {
                    "name": "handleTree",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(c: ISearchParam): ((a: TFormOptions) => TFormOptions) => (a: TFormOptions): TFormOptions => {\n  if ('options' in a) {\n    a.options = a.options.map(handleTree(c));\n    if (c.search) a.hidden = a.options.filter((b) => !b.hidden).length === 0;\n    else a.hidden = isAdvancedField(a) ? !c.advanced : false;\n  } else if (isVisibleField(a)) {\n    a.hidden = !(a.display_name.toLowerCase().includes(c.search.toLowerCase()) || String(a.value).toLocaleLowerCase().includes(c.search.toLocaleLowerCase()));\n    if (!a.hidden && isAdvancedField(a)) a.hidden = !c.advanced;\n  }\n  return a;\n}"
                },
                {
                    "name": "intPattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => new RegExp(/^[-]?\\d+$/)"
                },
                {
                    "name": "isActive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: IConfigAttr, n: string) => a[n]?.active"
                },
                {
                    "name": "isAdvancedField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: TFormOptions) => isVisibleField(a) && a.ui_options?.advanced"
                },
                {
                    "name": "isHidden",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: IFieldStack) => !!(a.ui_options?.invisible || a.ui_options?.advanced)"
                },
                {
                    "name": "isVisibleField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: TFormOptions) => !a.ui_options?.invisible"
                },
                {
                    "name": "patternFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  integer: intPattern,\n  int: intPattern,\n  float: () => new RegExp(/^[-]?[0-9]+(\\.[0-9]+)?$/),\n}"
                },
                {
                    "name": "typeToControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<controlType>",
                    "defaultValue": "{\n  bool: 'boolean',\n  int: 'textbox',\n  integer: 'textbox',\n  float: 'textbox',\n  string: 'textbox',\n  file: 'textarea',\n  text: 'textarea',\n}"
                }
            ],
            "src/app/shared/add-component/add.service.ts": [
                {
                    "name": "fromBundle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/add-component/add.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() =>\n  new FormGroup({\n    prototype_id: new FormControl('', Validators.required),\n    name: new FormControl('', Validators.required),\n    description: new FormControl(),\n  })"
                },
                {
                    "name": "MODELS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/add-component/add.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  provider: {\n    name: 'provider',\n    form: fromBundle(),\n  },\n  host: {\n    name: 'host',\n    form: new FormGroup({\n      fqdn: new FormControl('', [Validators.required, Validators.pattern(new RegExp(/^[A-Za-z0-9_\\.\\-]+$/))]),\n      cluster_id: new FormControl(),\n      provider_id: new FormControl('', Validators.required),\n    }),\n  },\n  cluster: {\n    name: 'cluster',\n    form: fromBundle(),\n  },\n  service: {\n    name: 'service',\n    title: 'services'\n  },\n  host2cluster: {\n    name: 'host2cluster',\n    title: 'hosts',\n  },\n}"
                }
            ],
            "src/app/core/api/api.reducer.ts": [
                {
                    "name": "getApiState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ApiState>('api')"
                },
                {
                    "name": "getRoot",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getApiState,\n  (state: ApiState) => state.root\n)"
                },
                {
                    "name": "getStack",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getApiState,\n  (state: ApiState) => state.stack\n)"
                },
                {
                    "name": "InitState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiState",
                    "defaultValue": "{\n  root: null,\n  stack: null,\n}"
                },
                {
                    "name": "loadRoot",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API] LoadRoot')"
                },
                {
                    "name": "loadStack",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API] LoadStack')"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  InitState,\n  on(rootSuccess, (state, { root }) => ({ ...state, root })),\n  on(rootError, state => ({ root: null, stack: null })),\n  on(stackSuccess, (state, { stack }) => ({ ...state, stack }))\n)"
                },
                {
                    "name": "rootError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API] LoadRootError')"
                },
                {
                    "name": "rootSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API] LoadRootSuccess', props<{ root: IRoot }>())"
                },
                {
                    "name": "stackSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/api/api.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[API] LoadStackSuccess', props<{ stack: IRoot }>())"
                }
            ],
            "src/app/store/navigation/navigation.store.ts": [
                {
                    "name": "getNavigationPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getNavigationState,\n  state => state.path\n)"
                },
                {
                    "name": "getNavigationState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<NavigationState>('navigation')"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationState",
                    "defaultValue": "{\n  path: [],\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(setPath, (state, { path }) => ({ path })),\n)"
                },
                {
                    "name": "setPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Navigation] Set path', props<{ path: AdcmTypedEntity[] }>())"
                },
                {
                    "name": "setPathOfRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Navigation] Set path', props<{ params: ParamMap }>())"
                }
            ],
            "src/app/shared/configuration/main/main.service.ts": [
                {
                    "name": "historyAnime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/main/main.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  trigger('history', [\n    state('hide', style({ top: '70px' })),\n    state('show', style({ top: '134px' })),\n    state('hideTools', style({ opacity: 0 })),\n    state('showTools', style({ opacity: 0.8 })),\n    transition('hideTools => showTools', animate('.5s .3s ease-in')),\n    transition('showTools => hideTools', animate('.2s ease-out')),\n    transition('hide <=> show', animate('.3s')),\n  ]),\n]"
                }
            ],
            "src/app/core/types/func.ts": [
                {
                    "name": "isBoolean",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/types/func.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(x: any) => typeof x === 'boolean'"
                },
                {
                    "name": "isEmptyObject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/types/func.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(x: any) => isObject(x) && !Object.keys(x).length"
                },
                {
                    "name": "isNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/types/func.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(x: any) => typeof x === 'number' && !isNaN(x)"
                },
                {
                    "name": "isObject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/types/func.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(x: any) => x !== null && typeof x === 'object'"
                },
                {
                    "name": "randomInteger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/types/func.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(max: number, min: number = 0): number =>\n  Math.floor(min + Math.random() * (max + 1 - min))"
                }
            ],
            "src/stories/concern/mock.ts": [
                {
                    "name": "ISSUE_MESSAGES_DEFAULT_MOCK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  concern: ISSUE_MESSAGES_FIRST_MESSAGE,\n}"
                },
                {
                    "name": "ISSUE_MESSAGES_FIRST_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Concern",
                    "defaultValue": "{\n  id: 2039,\n  blocking: true,\n  type: 'issue',\n  cause: 'config',\n  reason: {\n    message: 'Run ${action1} action on ${component1}.',\n    placeholder: {\n      action1: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: 'Restart'\n      },\n      component1: {\n        type: IMPlaceholderItemType.ComponentConfig,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2\n        },\n        name: 'My Component'\n      }\n    }\n  }\n}"
                },
                {
                    "name": "ISSUE_MESSAGES_LIST_MOCK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  concerns: [\n    ISSUE_MESSAGES_FIRST_MESSAGE,\n    ISSUE_MESSAGES_SECOND_MESSAGE,\n    ISSUE_MESSAGES_VERY_LONG_MESSAGE,\n  ],\n}"
                },
                {
                    "name": "ISSUE_MESSAGES_SECOND_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Concern",
                    "defaultValue": "{\n  id: 2040,\n  blocking: true,\n  type: 'issue',\n  cause: 'config',\n  reason: {\n    message: 'Run the following ${action2} action on this ${component2}.',\n    placeholder: {\n      action2: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: 'Restart'\n      },\n      component2: {\n        type: IMPlaceholderItemType.ComponentConfig,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2\n        },\n        name: 'My Component'\n      }\n    }\n  }\n}"
                },
                {
                    "name": "ISSUE_MESSAGES_VERY_LONG_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Concern",
                    "defaultValue": "{\n  id: 2041,\n  blocking: true,\n  type: 'issue',\n  cause: 'config',\n  reason: {\n    message: 'Run ${action1} action on ${component1}. This is a very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' very very very very very very very very very very very very very very very very very very very very very very very' +\n      ' long message. Bonus ${action2}!',\n    placeholder: {\n      action1: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: 'Restart'\n      },\n      component1: {\n        type: IMPlaceholderItemType.ComponentConfig,\n        ids : {\n          cluster: 1,\n          service: 2,\n          component: 2\n        },\n        name: 'My Component'\n      },\n      action2: {\n        type: IMPlaceholderItemType.ComponentActionRun,\n        ids: {\n          cluster: 1,\n          service: 2,\n          component: 2,\n          action: 22\n        },\n        name: ''\n      }\n    }\n  }\n}"
                },
                {
                    "name": "ISSUE_MESSAGES_VERY_LONG_MOCK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  concern: ISSUE_MESSAGES_VERY_LONG_MESSAGE,\n}"
                }
            ],
            "src/app/shared/components/tooltip/tooltip.component.ts": [
                {
                    "name": "kit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ issue: IssueInfoComponent, status: StatusInfoComponent }"
                },
                {
                    "name": "POSITION_MARGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "16"
                }
            ],
            "src/app/shared/components/list/list-service-token.ts": [
                {
                    "name": "LIST_SERVICE_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list/list-service-token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<IListService<any>>('ListService')"
                }
            ],
            "src/stories/concern/concern-list.stories.ts": [
                {
                    "name": "ListOfMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/concern-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/concern-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `<app-concern-list [concerns]=\"concerns\"></app-concern-list>`,\n})"
                }
            ],
            "src/stories/concern/concern-list-popup.stories.ts": [
                {
                    "name": "ListOfMessagesPopup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/concern-list-popup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/concern-list-popup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `<app-concern-list-ref [concerns]=\"concerns\"></app-concern-list-ref>`,\n})"
                }
            ],
            "src/app/config-groups/loader.ts": [
                {
                    "name": "loadConfigGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config-groups/loader.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => import('./config-group.module').then((m) => m.ConfigGroupModule)"
                }
            ],
            "src/app/shared/configuration/configuration.module.ts": [
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/configuration.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatIconModule,\n  MatInputModule,\n  MatButtonModule,\n  MatSelectModule,\n  MatOptionModule,\n  MatCheckboxModule,\n  MatTooltipModule,\n  MatToolbarModule,\n  MatFormFieldModule,\n  MatExpansionModule,\n  MatSlideToggleModule,\n  MatListModule,\n]"
                }
            ],
            "src/app/core/http-interseptors/request-cache.service.ts": [
                {
                    "name": "maxAge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/http-interseptors/request-cache.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Number.MAX_VALUE"
                }
            ],
            "src/app/core/store/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\n  auth: authReducer,\n  socket: socketReducer,\n  api: apiReducer,\n  profile: profileReducer,\n  issue: issueReducer,\n  navigation: navigationReducer,\n}"
                },
                {
                    "name": "StoreEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[AuthEffects, ApiEffects, ProfileEffects, IssueEffect, SocketEffect, NavigationEffects]"
                }
            ],
            "src/app/config-groups/service/config-group-add.service.ts": [
                {
                    "name": "newConfigGroupForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config-groups/service/config-group-add.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup =>\n  new FormGroup({\n    name: new FormControl('', [Validators.required, Validators.maxLength(30)]),\n    description: new FormControl(),\n  })"
                }
            ],
            "src/app/config-groups/service/config-group-host-add.service.ts": [
                {
                    "name": "newConfigGroupHostForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config-groups/service/config-group-host-add.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() =>\n  new FormGroup({\n    name: new FormControl('', Validators.required),\n    description: new FormControl(),\n  })"
                }
            ],
            "src/app/core/animations/index.ts": [
                {
                    "name": "notify",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/animations/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('notify', [\n  state('show', style({ opacity: 1 })),\n  state('hide', style({ opacity: 0 })),\n  transition('hide => show', [animate('.2s')]),\n  transition('show => hide', [animate('2s')]),\n])"
                },
                {
                    "name": "openClose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/animations/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('openClose', [\n  state('true', style({ height: '*', opacity: 1 })),\n  state('false', style({ height: '0px', opacity: 0 })),\n  transition('true <=> false', [animate('0.5s')]),\n])"
                }
            ],
            "src/stories/concern/concern.stories.ts": [
                {
                    "name": "OnlyMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/concern.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/concern.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n  }\n})"
                },
                {
                    "name": "VeryLongMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/concern/concern.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/shared/form-elements/boolean.component.ts": [
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/form-elements/boolean.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ clickAction: 'noop', color: 'accent' }"
                }
            ],
            "src/app/shared/directives/m-textarea.directive.ts": [
                {
                    "name": "PADDING_TOP_BOTTOM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/directives/m-textarea.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "16"
                }
            ],
            "src/app/shared/directives/infinity-scroll.directive.ts": [
                {
                    "name": "POINT_WHEN_EMMIT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/directives/infinity-scroll.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "100"
                }
            ],
            "src/app/core/store/profile/profile.service.ts": [
                {
                    "name": "PROFILE_LINK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/profile/profile.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${environment.apiRoot}profile/`"
                }
            ],
            "src/stories/status-tree/status-tree.stories.ts": [
                {
                    "name": "RegularTree",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/status-tree/status-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/status-tree/status-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n  },\n})"
                }
            ],
            "src/app/shared/components/import/import.component.ts": [
                {
                    "name": "requiredObject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/import/import.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ValidatorFn => (control: AbstractControl): { [key: string]: boolean } | null =>\n  Object.keys(control.value).some((key) => control.value[key]) ? null : { requiered: true }"
                },
                {
                    "name": "trueOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/import/import.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ValidatorFn => (control: AbstractControl): { [key: string]: any } | null => (control.value ? null : { trueOnly: !control.value })"
                }
            ],
            "src/app/shared/configuration/tests/configuration.ts": [
                {
                    "name": "setValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/tests/configuration.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: IFieldStack[], v: TValue): IOutput =>\n  data\n    .filter((a) => !a.subname)\n    .reduce(\n      (p, c, i) => ({\n        ...p,\n        [c.name]:\n          c.type === 'group'\n            ? data\n                .filter((a) => a.name === c.name && a.type !== 'group')\n                .reduce((a, b, k) => ({ ...a, [b.subname]: v[i][k] }), {})\n            : v\n            ? v[i]\n            : null,\n      }),\n      {}\n    )"
                },
                {
                    "name": "toField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/tests/configuration.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: IFieldStack): IFieldOptions => ({\n  ...a,\n  controlType: getControlType(a.type),\n  validator: getValidator(a.required, a.limits?.min, a.limits?.max, a.type),\n  compare: [],\n  key: getKey(a.name, a.subname),\n  hidden: false,\n  value: getValue(a.type)(a.value, a.default, a.required),\n})"
                },
                {
                    "name": "toFormOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/tests/configuration.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: IConfig): TFormOptions[] => {\n  return data.config.reduce((p, c) => {\n    if (c.subname) return p;\n    if (c.type !== 'group') return [...p, toField(c)];\n    else return [...p, toPanel(c, data)];\n  }, []);\n}"
                },
                {
                    "name": "toPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/configuration/tests/configuration.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: IFieldStack, data: IConfig): IPanelOptions => ({\n  ...a,\n  options: getOptions(a, data),\n  active: true,\n  hidden: false,\n})"
                }
            ],
            "src/app/main/server-status.component.ts": [
                {
                    "name": "styleCSS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/server-status.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'div { font-weight:bold; margin: 40px auto; width: 400px;}'"
                }
            ],
            "src/app/shared/components/list/base-list.directive.ts": [
                {
                    "name": "TemporaryEntityNameConverter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list/base-list.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(currentName: Partial<TypeName>): string => {\n\n  if (currentName === 'group_config') return 'group-config';\n  if (currentName === 'group_config_hosts') return 'group-config-hosts';\n\n  return currentName;\n}"
                }
            ],
            "src/app/core/services/stack.service.ts": [
                {
                    "name": "UPLOAD_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/stack.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${environment.apiRoot}stack/upload/`"
                }
            ],
            "src/app/admin/users/users.service.ts": [
                {
                    "name": "USER_LINK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/users.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${environment.apiRoot}user/`"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/api/api.reducer.ts": [
                {
                    "name": "apiReducer",
                    "file": "src/app/core/api/api.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/translate/intializer.ts": [
                {
                    "name": "appInitializer",
                    "file": "src/app/shared/translate/intializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "translate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "translate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateLoader",
                    "file": "src/app/shared/translate/intializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/auth/auth.store.ts": [
                {
                    "name": "authReducer",
                    "file": "src/app/core/auth/auth.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/types/func.ts": [
                {
                    "name": "clearEmptyField",
                    "file": "src/app/core/types/func.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Remove empty, null, undefined properties</p>\n",
                    "args": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Object",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flatten",
                    "file": "src/app/core/types/func.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function for a array,\nflattening an array of arrays</p>\n",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2281,
                                "end": 2282,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "a"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2275,
                                "end": 2280,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getRandomColor",
                    "file": "src/app/core/types/func.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2681,
                                "end": 2688,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>16-bit hex string</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2711,
                                "end": 2718,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;#110C2E&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "newArray",
                    "file": "src/app/core/types/func.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "count",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2490,
                                "end": 2495,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "count"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2475,
                                "end": 2480,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 2481,
                                "end": 2489,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 2482,
                                    "end": 2488,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 144
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 2535,
                                "end": 2537,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fn"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2500,
                                "end": 2505,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 2506,
                                "end": 2534,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 2507,
                                    "end": 2533,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 175,
                                    "parameters": [
                                        {
                                            "pos": 2508,
                                            "end": 2516,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 161,
                                            "name": {
                                                "pos": 2508,
                                                "end": 2509,
                                                "flags": 4194304,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 0,
                                                "kind": 78,
                                                "escapedText": "_"
                                            },
                                            "type": {
                                                "pos": 2510,
                                                "end": 2516,
                                                "flags": 4194304,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 1,
                                                "kind": 141
                                            }
                                        },
                                        {
                                            "pos": 2517,
                                            "end": 2527,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 161,
                                            "name": {
                                                "pos": 2517,
                                                "end": 2519,
                                                "flags": 4194304,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 0,
                                                "kind": 78,
                                                "escapedText": "i"
                                            },
                                            "type": {
                                                "pos": 2520,
                                                "end": 2527,
                                                "flags": 4194304,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 1,
                                                "kind": 144
                                            }
                                        }
                                    ],
                                    "type": {
                                        "pos": 2531,
                                        "end": 2533,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 174,
                                        "typeName": {
                                            "pos": 2531,
                                            "end": 2533,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 78,
                                            "escapedText": "T"
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2542,
                                "end": 2549,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "nullEmptyField",
                    "file": "src/app/core/types/func.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": true,
                    "deprecationMessage": "",
                    "description": "<p>Support nullable value in object properties,\nif value input field is empty return null.</p>\n",
                    "args": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Object",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uniqid",
                    "file": "src/app/core/types/func.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prefix",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isFloat",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "prefix",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isFloat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/navigation/navigation.store.ts": [
                {
                    "name": "getEventEntityType",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TypeName",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPath",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "getters",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<Action>",
                    "jsdoctags": [
                        {
                            "name": "getters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigationReducer",
                    "file": "src/app/store/navigation/navigation.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/http-interseptors/caching-interseptor.ts": [
                {
                    "name": "isCachable",
                    "file": "src/app/core/http-interseptors/caching-interseptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendRequest",
                    "file": "src/app/core/http-interseptors/caching-interseptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cache",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<HttpEvent<any>>",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cache",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/issue.ts": [
                {
                    "name": "issueReducer",
                    "file": "src/app/core/store/issue.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/profile/index.ts": [
                {
                    "name": "profileReducer",
                    "file": "src/app/core/store/profile/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/sockets/socket.reducer.ts": [
                {
                    "name": "socketReducer",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/models/concern/concern-reason.ts": [
                {
                    "name": "ConcernEventType",
                    "childs": [
                        {
                            "name": "Cluster",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cluster-concerns"
                        },
                        {
                            "name": "Service",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cluster-object-concerns"
                        },
                        {
                            "name": "Host",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "host-concerns"
                        },
                        {
                            "name": "HostProvider",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "host-provider-concerns"
                        },
                        {
                            "name": "ServiceComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "service-component-concerns"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/concern/concern-reason.ts"
                },
                {
                    "name": "IMPlaceholderItemType",
                    "childs": [
                        {
                            "name": "ComponentActionRun",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "component_action_run"
                        },
                        {
                            "name": "ComponentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "component_config"
                        },
                        {
                            "name": "Cluster",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cluster"
                        },
                        {
                            "name": "Service",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "service"
                        },
                        {
                            "name": "Component",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "component"
                        },
                        {
                            "name": "HostProvider",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "provider"
                        },
                        {
                            "name": "Host",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "host"
                        },
                        {
                            "name": "Job",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "job"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/concern/concern-reason.ts"
                }
            ],
            "src/app/shared/configuration/attributes/attribute.service.ts": [
                {
                    "name": "ConfigAttributeNames",
                    "childs": [
                        {
                            "name": "GROUP_KEYS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "group_keys"
                        },
                        {
                            "name": "CUSTOM_GROUP_KEYS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "custom_group_keys"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/configuration/attributes/attribute.service.ts"
                }
            ],
            "src/app/abstract-directives/list.directive.ts": [
                {
                    "name": "Direction",
                    "childs": [
                        {
                            "name": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "desc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "-"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/abstract-directives/list.directive.ts"
                }
            ],
            "src/app/shared/add-component/provider.component.ts": [
                {
                    "name": "DisplayMode",
                    "childs": [
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "inHost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "noCluster",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/add-component/provider.component.ts"
                }
            ],
            "src/app/app.component.ts": [
                {
                    "name": "flagForConsole",
                    "childs": [
                        {
                            "name": "profile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "profile"
                        },
                        {
                            "name": "socket",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "socket"
                        },
                        {
                            "name": "load_complete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "load_complete"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Magic strings for marking loading stages and other, for ci tests</p>\n",
                    "file": "src/app/app.component.ts"
                }
            ],
            "src/app/components/status-tree/status-tree.component.ts": [
                {
                    "name": "Folding",
                    "childs": [
                        {
                            "name": "Collapsed",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Expanded",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/status-tree/status-tree.component.ts"
                }
            ],
            "src/app/core/services/channel.service.ts": [
                {
                    "name": "keyChannelStrim",
                    "childs": [
                        {
                            "name": "scroll",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notifying",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "load_complete",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/services/channel.service.ts"
                }
            ],
            "src/app/shared/components/actions/master/master.service.ts": [
                {
                    "name": "whatShow",
                    "childs": [
                        {
                            "name": "none",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "none"
                        },
                        {
                            "name": "config",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "config"
                        },
                        {
                            "name": "hostMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hostmap"
                        },
                        {
                            "name": "stepper",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stepper"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/actions/master/master.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/host-components-map/types.ts": [
                {
                    "name": "ActionParam",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"add\" | \"remove\"",
                    "file": "src/app/shared/host-components-map/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TConstraint",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TConstraintValue[]",
                    "file": "src/app/shared/host-components-map/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 179
                },
                {
                    "name": "TConstraintValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number | \"+\" | \"odd\" | \"depend\"",
                    "file": "src/app/shared/host-components-map/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/configuration/attributes/attribute.service.ts": [
                {
                    "name": "Attributes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Map<ConfigAttributeNames | ConfigAttribute>",
                    "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 174
                },
                {
                    "name": "AttributesOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<ConfigAttributeNames | AttributeOptions>",
                    "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 174
                },
                {
                    "name": "ConfigAttribute",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/configuration/attributes/attribute.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/shared/components/tooltip/tooltip.service.ts": [
                {
                    "name": "ComponentName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"issue\" | \"status\" | undefined",
                    "file": "src/app/shared/components/tooltip/tooltip.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "PositionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"right\" | \"bottom\" | \"left\"",
                    "file": "src/app/shared/components/tooltip/tooltip.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/models/concern/concern.ts": [
                {
                    "name": "ConcernType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"issue\" | \"lock\"",
                    "file": "src/app/models/concern/concern.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/configuration/types.ts": [
                {
                    "name": "controlType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"boolean\" | \"textbox\" | \"textarea\" | \"json\" | \"password\" | \"list\" | \"map\" | \"dropdown\" | \"file\" | \"text\" | \"structure\" | \"secrettext\"",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Mark for rendering required component</p>\n",
                    "kind": 183
                },
                {
                    "name": "resultTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "simpleTypes | simpleTypes[] | object",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "simpleTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number | boolean",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "stateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"created\" | \"locked\"",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TNBase",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"string\" | \"integer\" | \"int\" | \"boolean\" | \"bool\" | \"float\"",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TNForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TNBase | TNReq | TNSpec",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TNReq",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dict\" | \"list\"",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TNSpec",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"structure\" | \"group\" | \"option\" | \"json\" | \"map\" | \"file\" | \"text\" | \"password\" | \"secrettext\" | \"variant\"",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number | boolean | object | any[]",
                    "file": "src/app/shared/configuration/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/types/api.ts": [
                {
                    "name": "Entities",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ICluster | Service | Host | Provider | Job | Task | Bundle",
                    "file": "src/app/core/types/api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TypeName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"bundle\" | \"cluster\" | \"host\" | \"provider\" | \"service\" | \"job\" | \"task\" | \"user\" | \"profile\" | \"adcm\" | \"stats\" | \"hostcomponent\" | \"service2cluster\" | \"host2cluster\" | \"servicecomponent\" | \"component\" | \"group_config\" | \"group_config_hosts\"",
                    "file": "src/app/core/types/api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/store/sockets/socket.reducer.ts": [
                {
                    "name": "EntityEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"add\" | \"add_job_log\" | \"create\" | \"delete\" | \"remove\" | \"change_config\" | \"change_state\" | \"change_status\" | \"change_job_status\" | \"change_hostcomponentmap\" | \"upgrade\" | \"concern\"",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "StatusType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"open\" | \"close\" | \"re-open\"",
                    "file": "src/app/core/store/sockets/socket.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/models/issue.ts": [
                {
                    "name": "IssueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"cluster\" | \"service\" | \"servicecomponent\" | \"component\"",
                    "file": "src/app/models/issue.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/types/task-job.ts": [
                {
                    "name": "Job",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/types/task-job.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "JobStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"created\" | \"running\" | \"failed\" | \"success\" | \"aborted\"",
                    "file": "src/app/core/types/task-job.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "JobType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"component\" | \"service\" | \"cluster\" | \"host\" | \"provider\"",
                    "file": "src/app/core/types/task-job.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "Task",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/types/task-job.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/abstract-directives/popover-content.directive.ts": [
                {
                    "name": "PopoverEventFunc",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/abstract-directives/popover-content.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 175
                }
            ],
            "src/app/core/store/profile/index.ts": [
                {
                    "name": "ProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IUser",
                    "file": "src/app/core/store/profile/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 174
                }
            ],
            "src/app/core/types/stack.ts": [
                {
                    "name": "Prototype",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/types/stack.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "ServicePrototype",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/types/stack.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/core/store/router/router.actions.ts": [
                {
                    "name": "RouterActionsUnion",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Go | Back | Forward",
                    "file": "src/app/core/store/router/router.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/services/stack.service.ts": [
                {
                    "name": "StackInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"cluster\" | \"host\" | \"provider\" | \"service\" | \"bundle\"",
                    "file": "src/app/core/services/stack.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/models/status-tree.ts": [
                {
                    "name": "StatusTreeLinkFunc",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/models/status-tree.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 175
                }
            ],
            "src/app/entry/task/tasks.component.ts": [
                {
                    "name": "TaskStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | \"running\" | \"success\" | \"failed\"",
                    "file": "src/app/entry/task/tasks.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/configuration/services/field.service.ts": [
                {
                    "name": "TFormOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IFieldOptions | IPanelOptions",
                    "file": "src/app/shared/configuration/services/field.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/configuration/yspec/yspec.service.ts": [
                {
                    "name": "TMatch",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TNBase | TNReq",
                    "file": "src/app/shared/configuration/yspec/yspec.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "cluster",
                        "loadChildren": "app/entry/cluster/cluster.module#ClusterModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "clusterRoutes",
                                        "filename": "src/app/entry/cluster/cluster.module.ts",
                                        "module": "ClusterRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ClusterListComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ]
                                            },
                                            {
                                                "path": ":cluster",
                                                "component": "ClusterDetailsComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "main",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "main",
                                                        "component": "MainInfoComponent"
                                                    },
                                                    {
                                                        "path": "service",
                                                        "component": "ServicesComponent"
                                                    },
                                                    {
                                                        "path": "host",
                                                        "component": "ClusterHostComponent"
                                                    },
                                                    {
                                                        "path": "host_component",
                                                        "component": "HcmapComponent"
                                                    },
                                                    {
                                                        "path": "config",
                                                        "component": "ConfigComponent"
                                                    },
                                                    {
                                                        "path": "group_config",
                                                        "component": "ConfigGroupListComponent"
                                                    },
                                                    {
                                                        "path": "status",
                                                        "component": "ClusterStatusComponent"
                                                    },
                                                    {
                                                        "path": "import",
                                                        "component": "ImportComponent"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": ":cluster/group_config/:group_config",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "component": "GroupConfigDetailsComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "host",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "host",
                                                        "component": "ConfigGroupHostListComponent"
                                                    },
                                                    {
                                                        "path": "config",
                                                        "component": "ConfigComponent",
                                                        "data": {
                                                            "isGroupConfig": true
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "path": ":cluster/service/:service",
                                                "component": "ServiceDetailsComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "main",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "main",
                                                        "component": "MainInfoComponent"
                                                    },
                                                    {
                                                        "path": "config",
                                                        "component": "ConfigComponent"
                                                    },
                                                    {
                                                        "path": "group_config",
                                                        "component": "ConfigGroupListComponent"
                                                    },
                                                    {
                                                        "path": "status",
                                                        "component": "ServiceStatusComponent"
                                                    },
                                                    {
                                                        "path": "import",
                                                        "component": "ImportComponent"
                                                    },
                                                    {
                                                        "path": "component",
                                                        "component": "ServiceComponentsComponent"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": ":cluster/service/:service/group_config/:group_config",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "component": "GroupConfigDetailsComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "host",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "host",
                                                        "component": "ConfigGroupHostListComponent"
                                                    },
                                                    {
                                                        "path": "config",
                                                        "component": "ConfigComponent",
                                                        "data": {
                                                            "isGroupConfig": true
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "path": ":cluster/service/:service/component/:servicecomponent",
                                                "component": "ServiceComponentDetailsComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "main",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "main",
                                                        "component": "MainInfoComponent"
                                                    },
                                                    {
                                                        "path": "config",
                                                        "component": "ConfigComponent"
                                                    },
                                                    {
                                                        "path": "group_config",
                                                        "component": "ConfigGroupListComponent"
                                                    },
                                                    {
                                                        "path": "status",
                                                        "component": "ServiceComponentStatusComponent"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": ":cluster/service/:service/component/:component/group_config/:group_config",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "component": "GroupConfigDetailsComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "host",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "host",
                                                        "component": "ConfigGroupHostListComponent"
                                                    },
                                                    {
                                                        "path": "config",
                                                        "component": "ConfigComponent",
                                                        "data": {
                                                            "isGroupConfig": true
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "path": ":cluster/host/:host",
                                                "component": "HostDetailsComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "main",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "main",
                                                        "component": "MainInfoComponent"
                                                    },
                                                    {
                                                        "path": "config",
                                                        "component": "ConfigComponent"
                                                    },
                                                    {
                                                        "path": "status",
                                                        "component": "HostStatusComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ClusterModule"
                            }
                        ]
                    },
                    {
                        "path": "job",
                        "loadChildren": "app/entry/job/job.module#JobModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/entry/job/job-routing.module.ts",
                                        "module": "JobRoutingModule",
                                        "children": [
                                            {
                                                "path": ":job",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "component": "JobDetailsComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "main",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "main",
                                                        "component": "MainComponent"
                                                    },
                                                    {
                                                        "path": ":log",
                                                        "component": "LogComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "JobModule"
                            }
                        ]
                    },
                    {
                        "path": "task",
                        "loadChildren": "app/entry/task/task.module#TaskModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "TaskModule"
                            }
                        ]
                    },
                    {
                        "path": "bundle",
                        "loadChildren": "app/entry/bundle/bundle.module#BundleModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/entry/bundle/bundle.module.ts",
                                        "module": "BundleRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "component": "BundleListComponent"
                                            },
                                            {
                                                "path": ":bundle",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "component": "BundleDetailsComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "main",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "main",
                                                        "component": "MainComponent"
                                                    },
                                                    {
                                                        "path": "license",
                                                        "component": "LicenseComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "BundleModule"
                            }
                        ]
                    },
                    {
                        "path": "host",
                        "children": [
                            {
                                "path": "",
                                "pathMatch": "full",
                                "component": "HostListComponent"
                            },
                            {
                                "path": ":host",
                                "component": "HostDetailsComponent",
                                "children": [
                                    {
                                        "path": "",
                                        "redirectTo": "main",
                                        "pathMatch": "full"
                                    },
                                    {
                                        "path": "main",
                                        "component": "MainInfoComponent"
                                    },
                                    {
                                        "path": "config",
                                        "component": "ConfigComponent"
                                    },
                                    {
                                        "path": "status",
                                        "component": "HostStatusComponent"
                                    }
                                ]
                            }
                        ],
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "provider",
                        "children": [
                            {
                                "path": "",
                                "pathMatch": "full",
                                "component": "HostproviderComponent"
                            },
                            {
                                "path": ":provider",
                                "component": "ProviderDetailsComponent",
                                "children": [
                                    {
                                        "path": "",
                                        "redirectTo": "main",
                                        "pathMatch": "full"
                                    },
                                    {
                                        "path": "main",
                                        "component": "MainInfoComponent"
                                    },
                                    {
                                        "path": "config",
                                        "component": "ConfigComponent"
                                    },
                                    {
                                        "path": "group_config",
                                        "component": "ConfigGroupListComponent"
                                    }
                                ]
                            }
                        ],
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "provider/:provider/group_config/:group_config",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "canActivateChild": [
                            "AuthGuard"
                        ],
                        "component": "GroupConfigDetailsComponent",
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "host",
                                "pathMatch": "full"
                            },
                            {
                                "path": "host",
                                "component": "ConfigGroupHostListComponent"
                            },
                            {
                                "path": "config",
                                "component": "ConfigComponent",
                                "data": {
                                    "isGroupConfig": true
                                }
                            }
                        ]
                    },
                    {
                        "path": "cluster/:cluster/host/:host/provider/:provider",
                        "redirectTo": "provider/:provider"
                    },
                    {
                        "path": "host/:host/provider/:provider",
                        "redirectTo": "provider/:provider"
                    },
                    {
                        "path": "",
                        "redirectTo": "admin",
                        "pathMatch": "full"
                    },
                    {
                        "path": "log",
                        "component": "LogComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "profile",
                        "component": "ProfileComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "support",
                        "component": "SupportComponent"
                    },
                    {
                        "path": "404",
                        "component": "PageNotFoundComponent"
                    },
                    {
                        "path": "500",
                        "component": "FatalErrorComponent"
                    },
                    {
                        "path": "504",
                        "component": "GatewayTimeoutComponent"
                    },
                    {
                        "path": "admin",
                        "loadChildren": "app/admin/admin.module#AdminModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/admin/admin.module.ts",
                                        "module": "AdminRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PatternComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "canActivateChild": [
                                                    "AuthGuard"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "intro",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "intro",
                                                        "component": "IntroComponent"
                                                    },
                                                    {
                                                        "path": "settings",
                                                        "component": "SettingsComponent"
                                                    },
                                                    {
                                                        "path": "users",
                                                        "component": "UsersComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AdminModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "component": "PageNotFoundComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "e2e/login/login.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "e2e/start/start.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StartPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/adwp-base-list.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AdwpBaseListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/adwp-list.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdwpListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/base-detail.abstract.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseDetailAbstractDirective",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/concern-list.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ConcernListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/detail.abstract.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DetailAbstractDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/list.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/menu-item.abstract.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MenuItemAbstractDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/popover-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PopoverContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract-directives/status.abstract.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StatusAbstractDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract/entity-service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EntityService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/abstract/having-status-tree.abstract.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HavingStatusTreeAbstractService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/intro.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntroComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/pattern.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PatternComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/users.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/users.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_LINK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/actions-button/actions-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionsButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bell/bell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bell/bell.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationsData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bell/bell.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FAILED_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bell/bell.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RUNNING_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bell/bell.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUCCESS_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/bundle/bundle-details/bundle-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BundleDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cluster/cluster-details/cluster-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClusterDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cluster/cluster-status/cluster-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClusterStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cluster/hcmap/hcmap.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HcmapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cluster/host/cluster-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClusterHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cluster/services/services.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServicesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/cluster-column/cluster-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClusterColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/cluster-column/cluster-column.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddClusterEventData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/edition-column/edition-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditionColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/job-name/job-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/job-status-column/job-status-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobStatusColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/state-column/state-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StateColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/status-column/status-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/status-column/status-column.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatusData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/task-name/task-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/task-objects/task-objects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskObjectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/columns/task-status-column/task-status-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskStatusColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/concern/concern-item/concern-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConcernItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/concern/concern-list-ref/concern-list-ref.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConcernListRefComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/concern/concern-list/concern-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConcernListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/concern/concern.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConcernComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/host/host-details/host-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HostDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/host/host-list/host-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HostListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/host/host-status/host-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HostStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hostprovider/group-config-details/group-config-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupConfigDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hostprovider/hostprovider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HostproviderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hostprovider/provider-details/provider-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProviderDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/job/job-details/job-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/job/jobs/jobs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notifications/notifications.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACKNOWLEDGE_EVENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/popover/popover.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopoverComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/service-component/service-component-details/service-component-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceComponentDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/service-component/service-component-status/service-component-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceComponentStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/service-component/service-components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/service/service-details/service-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/service/service-status/service-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/status-tree/status-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/status-tree/status-tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CountedStatusTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/status-tree/status-tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Counts",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/status-tree/status-tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExampleFlatNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/components/config-group-add/config-group-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddConfigGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/components/config-group-host-add/config-group-host-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddHostToConfigGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/loader.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadConfigGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/model/config-group.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigGroup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/pages/group-list/group-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigGroupListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/pages/host-list/host-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigGroupHostListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group-add.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigGroupAddService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group-add.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "newConfigGroupForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group-host-add.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigGroupHostAddService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group-host-add.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "newConfigGroupHostForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group-host-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigGroupHostListService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigGroupListService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group-list.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFIG_GROUP_LIST_SERVICE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config-groups/service/config-group.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigGroupService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/animations/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "notify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/animations/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openClose",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "apiReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getApiState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRoot",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getStack",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRoot",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadStack",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rootError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rootSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stackSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authCheck",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authFaled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authLogin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authLogout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isAuthenticated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/auth-interseptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/auth-interseptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXCLUDE_URLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/caching-interseptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "CachingInterseptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/caching-interseptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isCachable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/caching-interseptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sendRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/request-cache.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RequestCache",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/request-cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RequestCacheService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/request-cache.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestCacheEntry",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-interseptors/request-cache.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maxAge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/app/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/channel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChannelService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/channel.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBroadcast",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/cluster.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClusterService",
                "coveragePercent": 8,
                "coverageCount": "2/25",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/cluster.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkerInstance",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/config.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IVersionInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFIG_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dom.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DomService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/fully-rendered.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FullyRenderedService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/preloader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PreloaderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/stack.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StackService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/stack.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPLOAD_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IssueEffect",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IssueState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "issueReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkIssue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fillIssue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIssueSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadIssue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFirstAdminLogin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProfileSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProfileSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setTextareaHeight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "settingsSave",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LastViewedTask",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/profile/profile.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROFILE_LINK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/route-serializer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RouteSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/route-serializer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/router.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Back",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/router.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Forward",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/router.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Go",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/router.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BACK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/router.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FORWARD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/router.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GO",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/router/router.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RouterEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketEffect",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventMessage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEMObject",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SocketState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "socketReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getConnectStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSocketState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socketClose",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socketInit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socketOpen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socketResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/sockets/socket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAction",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionParameter",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUIOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiFlat",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseEntity",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Bundle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanLicensed",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Host",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRoot",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "License",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Provider",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Service",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/context-manager.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContextManager",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clearEmptyField",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "flatten",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "newArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nullEmptyField",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "uniqid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isEmptyObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/func.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "randomInteger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/host-component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HostComponent",
                "coveragePercent": 18,
                "coverageCount": "3/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/host-component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/host-component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRequires",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/import-export.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IExport",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/import-export.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImport",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/stack.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StackBase",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task-job.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckLog",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task-job.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JobAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task-job.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JobObject",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task-job.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JobRaw",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task-job.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogFile",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task-job.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskBase",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task-job.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskRaw",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EmmitRow",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PopoverDirective",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/popover.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopoverInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/bundle/bundle-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BundleListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/bundle/bundle-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LicenseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/bundle/bundle-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/cluster/cluster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClusterListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/job/job-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/job/job.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/job/log/check.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/job/log/log.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/job/log/log.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITimeInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/job/log/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/task/hover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HoverDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/entry/task/tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/factories/details.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DetailsFactory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/factories/list.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListFactory",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/date-helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateHelper",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/issue-helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IssueHelper",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/objects-helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectsHelper",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/main/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/main/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/main/progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main/server-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FatalErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/server-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GatewayTimeoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/server-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/server-status.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "styleCSS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/support/support.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SupportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main/top/top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAction",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/bundle.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBundle",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/models/cluster-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IClusterService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/cluster.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICluster",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/models/component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConcernReason",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderActionRun",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderCluster",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderHost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderHostProvider",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderJob",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern-reason.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMPlaceholderService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/concern/concern.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Concern",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDetails",
                "coveragePercent": 5,
                "coverageCount": "1/20",
                "status": "low"
            },
            {
                "filePath": "src/app/models/details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavItem",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStyledNavItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/entity-names.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EntityNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdcmEntity",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdcmTypedEntity",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/eventable-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConcernEventFilter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/eventable-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventableService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/eventable-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventFilter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/host.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHost",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/models/issue.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIssues",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/issue.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IssueEntity",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/list-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListResult",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/service-component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IServiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status-tree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClusterStatusTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status-tree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HostComponentStatusTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status-tree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HostStatusTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status-tree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceStatusTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status-tree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceStatusTree",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status-tree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatusTree",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status-tree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatusTreeSubject",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/universal-adcm-event-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UniversalAdcmEventData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/bell-task-link.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BellTaskLinkPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/entity-status-to-status-tree.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "EntityStatusToStatusTreePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/is-array.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IsArrayPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/issue-message-placeholder.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IssueMessagePlaceholderPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/issue-path.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IssuePathPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/keys.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "KeysPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/nav-item.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NavItemPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/object-link-column.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ObjectLinkColumnPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/pick-keys.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PickKeysPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/sort-objects.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SortObjectsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/status-tree-link.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "StatusTreeLinkPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/to-data-source.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ToDataSourcePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/translate-object-keys.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TranslateKeysPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/bundle.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BundleService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cluster-entity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClusterEntityService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/concern.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConcernService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/host.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HostService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/job.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JobService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/provider.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProviderService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/service-component.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServiceComponentService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/stats.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/stats.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Stats",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add-cluster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddClusterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add-service-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add-service-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add-service-model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_SERVICE_PROVIDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromBundle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/add.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODELS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/base-form.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseFormDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/controls.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ControlsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/host2cluster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Host2clusterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/naming.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GenName",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/naming.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adjectives",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/naming.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rivers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/provider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProviderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-component/service.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/action-list/action-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/action-list/menu-item/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/actions.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ActionsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/actions.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionParameters",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/actions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActionsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/master/action-master-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionMasterConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/master/master.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionMasterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/master/master.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MasterService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/master/master.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMasterData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/actions/master/master.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/crumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/import/import.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/import/import.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/import/import.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IComposite",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/import/import.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requiredObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/import/import.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "trueOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/issue-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/issue-info.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIssueInfo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/base-list.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/base-list.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRowHost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/base-list.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemporaryEntityNameConverter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/list-service-token.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IListService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/list-service-token.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListInstance",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/list-service-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_SERVICE_PROVIDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/list.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLUMNS_SET",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list/multi-sort.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MultiSortDirective",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/main-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/status-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/status/status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatusService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/status/status.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAllStatus",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/status/status.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "kit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POSITION_MARGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ComponentData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TooltipService",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TooltipDisplayOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TooltipOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upgrade.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpgradeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upgrade.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Upgrade",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upgrade.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpgradeItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute-provider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigFieldAttributeProviderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConfigAttributeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AttributeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AttributeOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AttributeWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigAttributeOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigAttributesJSON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ATTRIBUTES_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attribute.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createFormForAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/attributes/group-keys/group-keys-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupKeysWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/attributes/config-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ConfigFieldMarker",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/configuration.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/field/field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldComponent",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/field/field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFIG_FIELD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/fields/fields.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigFieldsComponent",
                "coveragePercent": 5,
                "coverageCount": "1/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/group-fields/group-fields.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupFieldsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/main/config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/main/main.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MainService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/main/main.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISearchParam",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/configuration/main/main.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "historyAnime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/scheme/item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/scheme/root.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RootComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/scheme/scheme.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemeComponent",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/scheme/scheme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SchemeService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/scheme/scheme.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IControl",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/scheme/scheme.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/config.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfigListResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/config.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfigResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/config.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FieldService",
                "coveragePercent": 38,
                "coverageCount": "5/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOutput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISource",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToolsEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findAttrValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getControlType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handleTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "intPattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isActive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isAdvancedField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isHidden",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isVisibleField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "patternFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/services/field.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "typeToControl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Configuration",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FieldFactory",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FieldStack",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Limits",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UIOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "YContainer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "YField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Yspec",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toFormOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tests/configuration.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tools/color-option.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ColorOptionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tools/history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tools/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/tools/tools.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompareConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICanGroup",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICompare",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfigAttr",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldStack",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILimits",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPanelOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUIoptions",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IValidator",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IVariantSet",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/yspec/yspec.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "YspecService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/yspec/yspec.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStructure",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/yspec/yspec.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IYContainer",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/yspec/yspec.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IYField",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/yspec/yspec.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IYRoot",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/configuration/yspec/yspec.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IYspec",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/details/left-menu-items/concern-menu-item/concern-menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConcernMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/details/left-menu-items/concern-menu-item/concern-menu-item.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ConcernMenuItemPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/details/left-menu-items/label-menu-item/label-menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/details/left-menu-items/log-menu-item/log-menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/details/left-menu-items/status-menu-item/status-menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/details/left-menu/left-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeftMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/details/left-menu/left-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeftMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/details/subtitle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubtitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/base.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/base.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISocketListener",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/dynamic.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/dynamic.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/dynamic.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/for-test.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ForTestDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/hover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HoverDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/infinity-scroll.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InfinityScrollDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/infinity-scroll.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POINT_WHEN_EMMIT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/m-textarea.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MTextareaDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/m-textarea.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PADDING_TOP_BOTTOM",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/scroll.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ScrollDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/socketListener.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SocketListenerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/socketListener.directive.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketListenerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/boolean.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/boolean.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/bundles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BundlesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/button-uploader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonUploaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/confirm-equal-validator.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ConfirmEqualValidatorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/error-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/json.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JsonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldMapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/map.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseMapListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/password/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/secret-text/secret-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SecretTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/text-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/form-elements/variant.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VariantComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/dependencies.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependenciesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/holder.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HolderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/much-2-many/much-2-many.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Much2ManyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/services2hosts/service-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceHostComponent",
                "coveragePercent": 8,
                "coverageCount": "3/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TakeService",
                "coveragePercent": 13,
                "coverageCount": "2/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkConstraint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkDependencies",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkRequires",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disableHost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "findDependencies",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isExist",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isExpand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/take.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isShrink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/test/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HCmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/test/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HcmHost",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/test/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HCmRequires",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/test/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/test/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComponentFactory",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/host-components-map/test/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HCFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CompTile",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HostTile",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StatePost",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Tile",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRawHosComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/host-components-map/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStream",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/break-row.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BreakRowPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/tag-esc.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TagEscPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/translate/intializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "appInitializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/translate/intializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "translateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation-effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEventEntityType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "navigationReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getNavigationPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getNavigationState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/navigation/navigation.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setPathOfRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ws-logs/log.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "p",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "p",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/bell.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bell",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/concern-list-popup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ListOfMessagesPopup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/concern-list-popup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/concern-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ListOfMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/concern-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/concern.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OnlyMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/concern.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/concern.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VeryLongMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ISSUE_MESSAGES_DEFAULT_MOCK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ISSUE_MESSAGES_FIRST_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ISSUE_MESSAGES_LIST_MOCK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ISSUE_MESSAGES_SECOND_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ISSUE_MESSAGES_VERY_LONG_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/concern/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ISSUE_MESSAGES_VERY_LONG_MOCK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/status-tree/status-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegularTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/status-tree/status-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__karma__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}